digraph F0 {
	node [shape=plaintext]
  fontname="Consolas"
  fontsize="40"
  node[label="fn", shape="box", style=""] fn;
  fn -> F0L0;
  node[label="label.0", shape="box", style=""] F0R1;
  F0R1 -> F0R2;
  node[label="  r2 = ptr param 0"] F0R2;
  F0R2 -> F0R3;
  node[label="  r3 = ptr param 1"] F0R3;
  F0R3 -> F0R4;
  node[label="  r4 = ptr param 2"] F0R4;
  F0R4 -> F0R5;
  node[label="  r5 = &param 0"] F0R5;
  F0R5 -> F0R6;
  node[label="  r6 = &param 1"] F0R6;
  F0R6 -> F0R7;
  node[label="  r7 = &param 2"] F0R7;
  F0R7 -> F0R8;
  F0R8 -> F0R8;
  node[label="label.1", shape="box", style=""] F0R8;
  F0R8 -> F0R9;
  node[label="  r9 = local 4 (4 align)"] F0R9;
  F0R9 -> F0R10;
  node[label="  r10 = int i32 0"] F0R10;
  F0R10 -> F0R11;
  node[label="  store i32 r9, r10 (4 align)"] F0R11;
  F0R11 -> F0R12;
  F0R12 -> F0R12;
  node[label="label.3", shape="box", style=""] F0R12;
  F0R12 -> F0R13;
  node[label="  r13 = load i32 r9 (4 align)"] F0R13;
  F0R13 -> F0R14;
  node[label="  r14 = int i32 16"] F0R14;
  F0R14 -> F0R15;
  node[label="  r15 = icmp slt bool r13, r14"] F0R15;
  F0R15 -> F0R16;
  node[label="  if (r15) L2 else L4"] F0R16;
  F0R16 -> F0R17;
  F0R16 -> F0R94;
  node[label="label.2", shape="box", style=""] F0R17;
  node[label="label.5", shape="box", style=""] F0R18;
  F0R18 -> F0R19;
  node[label="  r19 = load ptr r5 (8 align)"] F0R19;
  F0R19 -> F0R20;
  node[label="  r20 = load i32 r9 (4 align)"] F0R20;
  F0R20 -> F0R21;
  node[label="  r21 = sxt i64 r20"] F0R21;
  F0R21 -> F0R22;
  node[label="  r22 = array r19, r21, 2"] F0R22;
  F0R22 -> F0R23;
  node[label="  r23 = load i16 r22 (2 align)"] F0R23;
  F0R23 -> F0R24;
  node[label="  r24 = sxt i32 r23"] F0R24;
  F0R24 -> F0R25;
  node[label="  r25 = int i32 0"] F0R25;
  F0R25 -> F0R26;
  node[label="  r26 = icmp slt bool r25, r24"] F0R26;
  F0R26 -> F0R27;
  node[label="  if (r26) L6 else L7"] F0R27;
  F0R27 -> F0R28;
  F0R27 -> F0R58;
  node[label="label.6", shape="box", style=""] F0R28;
  F0R28 -> F0R29;
  node[label="  r29 = load ptr r5 (8 align)"] F0R29;
  F0R29 -> F0R30;
  node[label="  r30 = load i32 r9 (4 align)"] F0R30;
  F0R30 -> F0R31;
  node[label="  r31 = sxt i64 r30"] F0R31;
  F0R31 -> F0R32;
  node[label="  r32 = array r29, r31, 2"] F0R32;
  F0R32 -> F0R33;
  node[label="  r33 = load ptr r7 (8 align)"] F0R33;
  F0R33 -> F0R34;
  node[label="  r34 = load i32 r9 (4 align)"] F0R34;
  F0R34 -> F0R35;
  node[label="  r35 = sxt i64 r34"] F0R35;
  F0R35 -> F0R36;
  node[label="  r36 = array r33, r35, 2"] F0R36;
  F0R36 -> F0R37;
  node[label="  r37 = load i16 r36 (2 align)"] F0R37;
  F0R37 -> F0R38;
  node[label="  r38 = zxt i32 r37"] F0R38;
  F0R38 -> F0R39;
  node[label="  r39 = load ptr r5 (8 align)"] F0R39;
  F0R39 -> F0R40;
  node[label="  r40 = load i32 r9 (4 align)"] F0R40;
  F0R40 -> F0R41;
  node[label="  r41 = sxt i64 r40"] F0R41;
  F0R41 -> F0R42;
  node[label="  r42 = array r39, r41, 2"] F0R42;
  F0R42 -> F0R43;
  node[label="  r43 = load i16 r42 (2 align)"] F0R43;
  F0R43 -> F0R44;
  node[label="  r44 = sxt i32 r43"] F0R44;
  F0R44 -> F0R45;
  node[label="  r45 = add i32 r38, r44"] F0R45;
  F0R45 -> F0R46;
  node[label="  r46 = load ptr r6 (8 align)"] F0R46;
  F0R46 -> F0R47;
  node[label="  r47 = load i32 r9 (4 align)"] F0R47;
  F0R47 -> F0R48;
  node[label="  r48 = sxt i64 r47"] F0R48;
  F0R48 -> F0R49;
  node[label="  r49 = array r46, r48, 2"] F0R49;
  F0R49 -> F0R50;
  node[label="  r50 = load i16 r49 (2 align)"] F0R50;
  F0R50 -> F0R51;
  node[label="  r51 = zxt i32 r50"] F0R51;
  F0R51 -> F0R52;
  node[label="  r52 = mul i32 r45, r51"] F0R52;
  F0R52 -> F0R53;
  node[label="  r53 = int i32 16"] F0R53;
  F0R53 -> F0R54;
  node[label="  r54 = sar i32 r52, r53"] F0R54;
  F0R54 -> F0R55;
  node[label="  r55 = trunc i16 r54"] F0R55;
  F0R55 -> F0R56;
  node[label="  store i16 r32, r55 (2 align)"] F0R56;
  F0R56 -> F0R57;
  node[label="  goto L8"] F0R57;
  F0R57 -> F0R88;
  node[label="label.7", shape="box", style=""] F0R58;
  F0R58 -> F0R59;
  node[label="  r59 = load ptr r5 (8 align)"] F0R59;
  F0R59 -> F0R60;
  node[label="  r60 = load i32 r9 (4 align)"] F0R60;
  F0R60 -> F0R61;
  node[label="  r61 = sxt i64 r60"] F0R61;
  F0R61 -> F0R62;
  node[label="  r62 = array r59, r61, 2"] F0R62;
  F0R62 -> F0R63;
  node[label="  r63 = load ptr r7 (8 align)"] F0R63;
  F0R63 -> F0R64;
  node[label="  r64 = load i32 r9 (4 align)"] F0R64;
  F0R64 -> F0R65;
  node[label="  r65 = sxt i64 r64"] F0R65;
  F0R65 -> F0R66;
  node[label="  r66 = array r63, r65, 2"] F0R66;
  F0R66 -> F0R67;
  node[label="  r67 = load i16 r66 (2 align)"] F0R67;
  F0R67 -> F0R68;
  node[label="  r68 = zxt i32 r67"] F0R68;
  F0R68 -> F0R69;
  node[label="  r69 = load ptr r5 (8 align)"] F0R69;
  F0R69 -> F0R70;
  node[label="  r70 = load i32 r9 (4 align)"] F0R70;
  F0R70 -> F0R71;
  node[label="  r71 = sxt i64 r70"] F0R71;
  F0R71 -> F0R72;
  node[label="  r72 = array r69, r71, 2"] F0R72;
  F0R72 -> F0R73;
  node[label="  r73 = load i16 r72 (2 align)"] F0R73;
  F0R73 -> F0R74;
  node[label="  r74 = sxt i32 r73"] F0R74;
  F0R74 -> F0R75;
  node[label="  r75 = sub i32 r68, r74"] F0R75;
  F0R75 -> F0R76;
  node[label="  r76 = load ptr r6 (8 align)"] F0R76;
  F0R76 -> F0R77;
  node[label="  r77 = load i32 r9 (4 align)"] F0R77;
  F0R77 -> F0R78;
  node[label="  r78 = sxt i64 r77"] F0R78;
  F0R78 -> F0R79;
  node[label="  r79 = array r76, r78, 2"] F0R79;
  F0R79 -> F0R80;
  node[label="  r80 = load i16 r79 (2 align)"] F0R80;
  F0R80 -> F0R81;
  node[label="  r81 = zxt i32 r80"] F0R81;
  F0R81 -> F0R82;
  node[label="  r82 = mul i32 r75, r81"] F0R82;
  F0R82 -> F0R83;
  node[label="  r83 = int i32 16"] F0R83;
  F0R83 -> F0R84;
  node[label="  r84 = sar i32 r82, r83"] F0R84;
  F0R84 -> F0R85;
  node[label="  r85 = neg i32 r84"] F0R85;
  F0R85 -> F0R86;
  node[label="  r86 = trunc i16 r85"] F0R86;
  F0R86 -> F0R87;
  node[label="  store i16 r62, r86 (2 align)"] F0R87;
  F0R87 -> F0R88;
  F0R88 -> F0R88;
  node[label="label.8", shape="box", style=""] F0R88;
  F0R88 -> F0R89;
  node[label="  r89 = load i32 r9 (4 align)"] F0R89;
  F0R89 -> F0R90;
  node[label="  r90 = int i32 1"] F0R90;
  F0R90 -> F0R91;
  node[label="  r91 = add i32 r89, r90"] F0R91;
  F0R91 -> F0R92;
  node[label="  store ptr r9, r91 (4 align)"] F0R92;
  F0R92 -> F0R93;
  node[label="  goto L3"] F0R93;
  F0R93 -> F0R12;
  node[label="label.4", shape="box", style=""] F0R94;
}


