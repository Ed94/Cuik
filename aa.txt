
	3:	typedef char * va_list ; 
	104:	typedef unsigned long DWORD ; 
	105:	typedef int WINBOOL , * PWINBOOL , * LPWINBOOL ; 
	109:	typedef WINBOOL BOOL ; 
	113:	typedef unsigned char BYTE ; 
	115:	typedef BOOL * PBOOL , * LPBOOL ; 
	116:	typedef unsigned short WORD ; 
	117:	typedef float FLOAT ; 
	118:	typedef FLOAT * PFLOAT ; 
	119:	typedef BYTE * PBYTE , * LPBYTE ; 
	120:	typedef int * PINT , * LPINT ; 
	121:	typedef WORD * PWORD , * LPWORD ; 
	122:	typedef long * LPLONG ; 
	123:	typedef DWORD * PDWORD , * LPDWORD ; 
	124:	typedef void * PVOID , * LPVOID ; 
	125:	typedef const void * PCVOID , * LPCVOID ; 
	126:	typedef int INT ; 
	127:	typedef unsigned int UINT , * PUINT , * LPUINT ; 
	3:	typedef unsigned long long size_t ; 
	5:	void * memset ( void * s , int c , size_t n ) ; 
	6:	void * memcpy ( void * restrict s1 , const void * restrict s2 , size_t n ) ; 
	7:	void * memmove ( void * s1 , const void * s2 , size_t n ) ; 
	8:	void * memchr ( const void * s , int c , size_t n ) ; 
	9:	int memcmp ( const void * s1 , const void * s2 , size_t n ) ; 
	11:	char * strcpy ( char * restrict s1 , const char * restrict s2 ) ; 
	12:	char * strncpy ( char * restrict s1 , const char * restrict s2 , size_t n ) ; 
	13:	char * strcat ( char * restrict s1 , const char * restrict s2 ) ; 
	14:	char * strncat ( char * restrict s1 , const char * restrict s2 , size_t n ) ; 
	15:	int strcmp ( const char * s1 , const char * s2 ) ; 
	16:	int strcoll ( const char * s1 , const char * s2 ) ; 
	17:	int strncmp ( const char * s1 , const char * s2 , size_t n ) ; 
	18:	size_t strxfrm ( char * restrict s1 , const char * restrict s2 , size_t n ) ; 
	19:	char * strchr ( const char * s , int c ) ; 
	20:	size_t strcspn ( const char * s1 , const char * s2 ) ; 
	21:	char * strpbrk ( const char * s1 , const char * s2 ) ; 
	22:	char * strrchr ( const char * s , int c ) ; 
	23:	size_t strspn ( const char * s1 , const char * s2 ) ; 
	24:	char * strstr ( const char * s1 , const char * s2 ) ; 
	25:	char * strtok ( char * restrict s1 , const char * restrict s2 ) ; 
	41:	typedef char CHAR ; 
	42:	typedef short SHORT ; 
	43:	typedef long LONG ; 
	44:	typedef CHAR CCHAR ; 
	45:	typedef unsigned char UCHAR , * PUCHAR ; 
	46:	typedef unsigned short USHORT , * PUSHORT ; 
	47:	typedef unsigned long ULONG , * PULONG ; 
	48:	typedef char * PSZ ; 
	55:	typedef unsigned short wchar_t ; 
	59:	typedef wchar_t WCHAR ; 
	60:	typedef WCHAR * PWCHAR , * LPWCH , * PWCH , * NWPSTR , * LPWSTR , * PWSTR ; 
	61:	typedef const WCHAR * LPCWCH , * PCWCH , * LPCWSTR , * PCWSTR ; 
	62:	typedef CHAR * PCHAR , * LPCH , * PCH , * NPSTR , * LPSTR , * PSTR ; 
	63:	typedef const CHAR * LPCCH , * PCSTR , * LPCSTR ; 
	71:	typedef CHAR TCHAR ; 
	72:	typedef CHAR _TCHAR ; 
	75:	typedef TCHAR TBYTE , * PTCH , * PTBYTE ; 
	76:	typedef TCHAR * LPTCH , * PTSTR , * LPTSTR , * LP , * PTCHAR ; 
	77:	typedef const TCHAR * LPCTSTR ; 
	86:	typedef LONG * PLONG ; 
	87:	typedef void * HANDLE ; 
	88:	typedef HANDLE * PHANDLE , * LPHANDLE ; 
	94:	typedef DWORD LCID ; 
	95:	typedef PDWORD PLCID ; 
	96:	typedef WORD LANGID ; 
	102:	typedef long long LONGLONG ; 
	103:	typedef unsigned long long DWORDLONG ; 
	107:	typedef LONGLONG * PLONGLONG ; 
	108:	typedef DWORDLONG * PDWORDLONG ; 
	109:	typedef DWORDLONG ULONGLONG , * PULONGLONG ; 
	110:	typedef LONGLONG USN ; 
	120:	typedef BYTE BOOLEAN , * PBOOLEAN ; 
	45:	typedef int LONG32 , * PLONG32 ; 
	47:	typedef int INT32 , * PINT32 ; 
	49:	typedef unsigned int ULONG32 , * PULONG32 ; 
	50:	typedef unsigned int DWORD32 , * PDWORD32 ; 
	51:	typedef unsigned int UINT32 , * PUINT32 ; 
	53:	typedef long long INT_PTR , * PINT_PTR ; 
	54:	typedef unsigned long long UINT_PTR , * PUINT_PTR ; 
	55:	typedef long long LONG_PTR , * PLONG_PTR ; 
	56:	typedef unsigned long long ULONG_PTR , * PULONG_PTR ; 
	57:	typedef unsigned long long HANDLE_PTR ; 
	58:	typedef unsigned int UHALF_PTR , * PUHALF_PTR ; 
	59:	typedef int HALF_PTR , * PHALF_PTR ; 
	89:	typedef int INT_PTR , * PINT_PTR ; 
	90:	typedef unsigned int UINT_PTR , * PUINT_PTR ; 
	91:	typedef long LONG_PTR , * PLONG_PTR ; 
	92:	typedef unsigned long ULONG_PTR , * PULONG_PTR ; 
	93:	typedef unsigned short UHALF_PTR , * PUHALF_PTR ; 
	94:	typedef short HALF_PTR , * PHALF_PTR ; 
	95:	typedef unsigned long HANDLE_PTR ; 
	97:	typedef ULONG_PTR SIZE_T , * PSIZE_T ; 
	98:	typedef LONG_PTR SSIZE_T , * PSSIZE_T ; 
	99:	typedef ULONG_PTR DWORD_PTR , * PDWORD_PTR ; 
	100:	typedef long long LONG64 , * PLONG64 ; 
	101:	typedef long long INT64 , * PINT64 ; 
	102:	typedef unsigned long long ULONG64 , * PULONG64 ; 
	103:	typedef unsigned long long DWORD64 , * PDWORD64 ; 
	104:	typedef unsigned long long UINT64 , * PUINT64 ; 
	1078:	typedef DWORD ACCESS_MASK , * PACCESS_MASK ; 
	1081:	typedef struct _GUID { 
	1082:	unsigned long Data1 ; 
	1083:	unsigned short Data2 ; 
	1084:	unsigned short Data3 ; 
	1085:	unsigned char Data4 [ 8 ] ; 
	1086:	} GUID , * REFGUID , * LPGUID ; 
	1089:	typedef struct _GENERIC_MAPPING { 
	1090:	ACCESS_MASK GenericRead ; 
	1091:	ACCESS_MASK GenericWrite ; 
	1092:	ACCESS_MASK GenericExecute ; 
	1093:	ACCESS_MASK GenericAll ; 
	1094:	} GENERIC_MAPPING , * PGENERIC_MAPPING ; 
	1095:	typedef struct _ACE_HEADER { 
	1096:	BYTE AceType ; 
	1097:	BYTE AceFlags ; 
	1098:	WORD AceSize ; 
	1099:	} ACE_HEADER ; 
	1100:	typedef struct _ACCESS_ALLOWED_ACE { 
	1101:	ACE_HEADER Header ; 
	1102:	ACCESS_MASK Mask ; 
	1103:	DWORD SidStart ; 
	1104:	} ACCESS_ALLOWED_ACE ; 
	1105:	typedef struct _ACCESS_DENIED_ACE { 
	1106:	ACE_HEADER Header ; 
	1107:	ACCESS_MASK Mask ; 
	1108:	DWORD SidStart ; 
	1109:	} ACCESS_DENIED_ACE ; 
	1110:	typedef struct _SYSTEM_AUDIT_ACE { 
	1111:	ACE_HEADER Header ; 
	1112:	ACCESS_MASK Mask ; 
	1113:	DWORD SidStart ; 
	1114:	} SYSTEM_AUDIT_ACE ; 
	1115:	typedef SYSTEM_AUDIT_ACE * PSYSTEM_AUDIT_ACE ; 
	1116:	typedef struct _SYSTEM_ALARM_ACE { 
	1117:	ACE_HEADER Header ; 
	1118:	ACCESS_MASK Mask ; 
	1119:	DWORD SidStart ; 
	1120:	} SYSTEM_ALARM_ACE , * PSYSTEM_ALARM_ACE ; 
	1121:	typedef struct _ACCESS_ALLOWED_OBJECT_ACE { 
	1122:	ACE_HEADER Header ; 
	1123:	ACCESS_MASK Mask ; 
	1124:	DWORD Flags ; 
	1125:	GUID ObjectType ; 
	1126:	GUID InheritedObjectType ; 
	1127:	DWORD SidStart ; 
	1128:	} ACCESS_ALLOWED_OBJECT_ACE , * PACCESS_ALLOWED_OBJECT_ACE ; 
	1129:	typedef struct _ACCESS_DENIED_OBJECT_ACE { 
	1130:	ACE_HEADER Header ; 
	1131:	ACCESS_MASK Mask ; 
	1132:	DWORD Flags ; 
	1133:	GUID ObjectType ; 
	1134:	GUID InheritedObjectType ; 
	1135:	DWORD SidStart ; 
	1136:	} ACCESS_DENIED_OBJECT_ACE , * PACCESS_DENIED_OBJECT_ACE ; 
	1137:	typedef struct _SYSTEM_AUDIT_OBJECT_ACE { 
	1138:	ACE_HEADER Header ; 
	1139:	ACCESS_MASK Mask ; 
	1140:	DWORD Flags ; 
	1141:	GUID ObjectType ; 
	1142:	GUID InheritedObjectType ; 
	1143:	DWORD SidStart ; 
	1144:	} SYSTEM_AUDIT_OBJECT_ACE , * PSYSTEM_AUDIT_OBJECT_ACE ; 
	1145:	typedef struct _SYSTEM_ALARM_OBJECT_ACE { 
	1146:	ACE_HEADER Header ; 
	1147:	ACCESS_MASK Mask ; 
	1148:	DWORD Flags ; 
	1149:	GUID ObjectType ; 
	1150:	GUID InheritedObjectType ; 
	1151:	DWORD SidStart ; 
	1152:	} SYSTEM_ALARM_OBJECT_ACE , * PSYSTEM_ALARM_OBJECT_ACE ; 
	1153:	typedef struct _ACL { 
	1154:	BYTE AclRevision ; 
	1155:	BYTE Sbz1 ; 
	1156:	WORD AclSize ; 
	1157:	WORD AceCount ; 
	1158:	WORD Sbz2 ; 
	1159:	} ACL , * PACL ; 
	1160:	typedef struct _ACL_REVISION_INFORMATION { 
	1161:	DWORD AclRevision ; 
	1162:	} ACL_REVISION_INFORMATION ; 
	1163:	typedef struct _ACL_SIZE_INFORMATION { 
	1164:	DWORD AceCount ; 
	1165:	DWORD AclBytesInUse ; 
	1166:	DWORD AclBytesFree ; 
	1167:	} ACL_SIZE_INFORMATION ; 
	1181:	typedef struct _FLOATING_SAVE_AREA { 
	1182:	DWORD ControlWord ; 
	1183:	DWORD StatusWord ; 
	1184:	DWORD TagWord ; 
	1185:	DWORD ErrorOffset ; 
	1186:	DWORD ErrorSelector ; 
	1187:	DWORD DataOffset ; 
	1188:	DWORD DataSelector ; 
	1189:	BYTE RegisterArea [ 80 ] ; 
	1190:	DWORD Cr0NpxState ; 
	1191:	} FLOATING_SAVE_AREA ; 
	1192:	typedef struct _CONTEXT { 
	1193:	DWORD ContextFlags ; 
	1194:	DWORD Dr0 ; 
	1195:	DWORD Dr1 ; 
	1196:	DWORD Dr2 ; 
	1197:	DWORD Dr3 ; 
	1198:	DWORD Dr6 ; 
	1199:	DWORD Dr7 ; 
	1200:	FLOATING_SAVE_AREA FloatSave ; 
	1201:	DWORD SegGs ; 
	1202:	DWORD SegFs ; 
	1203:	DWORD SegEs ; 
	1204:	DWORD SegDs ; 
	1205:	DWORD Edi ; 
	1206:	DWORD Esi ; 
	1207:	DWORD Ebx ; 
	1208:	DWORD Edx ; 
	1209:	DWORD Ecx ; 
	1210:	DWORD Eax ; 
	1211:	DWORD Ebp ; 
	1212:	DWORD Eip ; 
	1213:	DWORD SegCs ; 
	1214:	DWORD EFlags ; 
	1215:	DWORD Esp ; 
	1216:	DWORD SegSs ; 
	1217:	BYTE ExtendedRegisters [ 512 ] ; 
	1218:	} CONTEXT ; 
	1627:	typedef CONTEXT * PCONTEXT , * LPCONTEXT ; 
	1628:	typedef struct _EXCEPTION_RECORD { 
	1629:	DWORD ExceptionCode ; 
	1630:	DWORD ExceptionFlags ; 
	1631:	struct _EXCEPTION_RECORD * ExceptionRecord ; 
	1632:	PVOID ExceptionAddress ; 
	1633:	DWORD NumberParameters ; 
	1634:	DWORD ExceptionInformation [ 15 ] ; 
	1635:	} EXCEPTION_RECORD , * PEXCEPTION_RECORD ; 
	1636:	typedef struct _EXCEPTION_POINTERS { 
	1637:	PEXCEPTION_RECORD ExceptionRecord ; 
	1638:	PCONTEXT ContextRecord ; 
	1639:	} EXCEPTION_POINTERS , * PEXCEPTION_POINTERS , * LPEXCEPTION_POINTERS ; 
	1640:	typedef union _LARGE_INTEGER { 
	1641:	struct { 
	1642:	DWORD LowPart ; 
	1643:	LONG HighPart ; 
	1644:	} u ; 
	1646:	struct { 
	1647:	DWORD LowPart ; 
	1648:	LONG HighPart ; 
	1649:	} ; 
	1651:	LONGLONG QuadPart ; 
	1652:	} LARGE_INTEGER , * PLARGE_INTEGER ; 
	1653:	typedef union _ULARGE_INTEGER { 
	1654:	struct { 
	1655:	DWORD LowPart ; 
	1656:	DWORD HighPart ; 
	1657:	} u ; 
	1659:	struct { 
	1660:	DWORD LowPart ; 
	1661:	DWORD HighPart ; 
	1662:	} ; 
	1664:	ULONGLONG QuadPart ; 
	1665:	} ULARGE_INTEGER , * PULARGE_INTEGER ; 
	1666:	typedef LARGE_INTEGER LUID , * PLUID ; 
	1668:	typedef struct _LUID_AND_ATTRIBUTES { 
	1669:	LUID Luid ; 
	1670:	DWORD Attributes ; 
	1671:	} LUID_AND_ATTRIBUTES ; 
	1673:	typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY [ 1 ] ; 
	1674:	typedef LUID_AND_ATTRIBUTES_ARRAY * PLUID_AND_ATTRIBUTES_ARRAY ; 
	1675:	typedef struct _PRIVILEGE_SET { 
	1676:	DWORD PrivilegeCount ; 
	1677:	DWORD Control ; 
	1678:	LUID_AND_ATTRIBUTES Privilege [ 1 ] ; 
	1679:	} PRIVILEGE_SET , * PPRIVILEGE_SET ; 
	1680:	typedef struct _SECURITY_ATTRIBUTES { 
	1681:	DWORD nLength ; 
	1682:	LPVOID lpSecurityDescriptor ; 
	1683:	BOOL bInheritHandle ; 
	1684:	} SECURITY_ATTRIBUTES , * PSECURITY_ATTRIBUTES , * LPSECURITY_ATTRIBUTES ; 
	1685:	typedef enum _SECURITY_IMPERSONATION_LEVEL { 
	1686:	SecurityAnonymous , 
	1687:	SecurityIdentification , 
	1688:	SecurityImpersonation , 
	1689:	SecurityDelegation 
	1690:	} SECURITY_IMPERSONATION_LEVEL ; 
	1691:	typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE , * PSECURITY_CONTEXT_TRACKING_MODE ; 
	1692:	typedef struct _SECURITY_QUALITY_OF_SERVICE { 
	1693:	DWORD Length ; 
	1694:	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel ; 
	1695:	SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode ; 
	1696:	BOOLEAN EffectiveOnly ; 
	1697:	} SECURITY_QUALITY_OF_SERVICE , * PSECURITY_QUALITY_OF_SERVICE ; 
	1698:	typedef PVOID PACCESS_TOKEN ; 
	1699:	typedef struct _SE_IMPERSONATION_STATE { 
	1700:	PACCESS_TOKEN Token ; 
	1701:	BOOLEAN CopyOnOpen ; 
	1702:	BOOLEAN EffectiveOnly ; 
	1703:	SECURITY_IMPERSONATION_LEVEL Level ; 
	1704:	} SE_IMPERSONATION_STATE , * PSE_IMPERSONATION_STATE ; 
	1705:	typedef struct _SID_IDENTIFIER_AUTHORITY { 
	1706:	BYTE Value [ 6 ] ; 
	1707:	} SID_IDENTIFIER_AUTHORITY , * PSID_IDENTIFIER_AUTHORITY , * LPSID_IDENTIFIER_AUTHORITY ; 
	1708:	typedef PVOID PSID ; 
	1709:	typedef struct _SID { 
	1710:	BYTE Revision ; 
	1711:	BYTE SubAuthorityCount ; 
	1712:	SID_IDENTIFIER_AUTHORITY IdentifierAuthority ; 
	1713:	DWORD SubAuthority [ 1 ] ; 
	1714:	} SID , * PISID ; 
	1715:	typedef struct _SID_AND_ATTRIBUTES { 
	1716:	PSID Sid ; 
	1717:	DWORD Attributes ; 
	1718:	} SID_AND_ATTRIBUTES ; 
	1719:	typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY [ 1 ] ; 
	1720:	typedef SID_AND_ATTRIBUTES_ARRAY * PSID_AND_ATTRIBUTES_ARRAY ; 
	1721:	typedef struct _TOKEN_SOURCE { 
	1722:	CHAR SourceName [ 8 ] ; 
	1723:	LUID SourceIdentifier ; 
	1724:	} TOKEN_SOURCE , * PTOKEN_SOURCE ; 
	1725:	typedef struct _TOKEN_CONTROL { 
	1726:	LUID TokenId ; 
	1727:	LUID AuthenticationId ; 
	1728:	LUID ModifiedId ; 
	1729:	TOKEN_SOURCE TokenSource ; 
	1730:	} TOKEN_CONTROL , * PTOKEN_CONTROL ; 
	1731:	typedef struct _TOKEN_DEFAULT_DACL { 
	1732:	PACL DefaultDacl ; 
	1733:	} TOKEN_DEFAULT_DACL , * PTOKEN_DEFAULT_DACL ; 
	1734:	typedef struct _TOKEN_GROUPS { 
	1735:	DWORD GroupCount ; 
	1736:	SID_AND_ATTRIBUTES Groups [ 1 ] ; 
	1737:	} TOKEN_GROUPS , * PTOKEN_GROUPS , * LPTOKEN_GROUPS ; 
	1738:	typedef struct _TOKEN_OWNER { 
	1739:	PSID Owner ; 
	1740:	} TOKEN_OWNER , * PTOKEN_OWNER ; 
	1741:	typedef struct _TOKEN_PRIMARY_GROUP { 
	1742:	PSID PrimaryGroup ; 
	1743:	} TOKEN_PRIMARY_GROUP , * PTOKEN_PRIMARY_GROUP ; 
	1744:	typedef struct _TOKEN_PRIVILEGES { 
	1745:	DWORD PrivilegeCount ; 
	1746:	LUID_AND_ATTRIBUTES Privileges [ 1 ] ; 
	1747:	} TOKEN_PRIVILEGES , * PTOKEN_PRIVILEGES , * LPTOKEN_PRIVILEGES ; 
	1748:	typedef enum tagTOKEN_TYPE { TokenPrimary = 1 , TokenImpersonation } TOKEN_TYPE ; 
	1749:	typedef struct _TOKEN_STATISTICS { 
	1750:	LUID TokenId ; 
	1751:	LUID AuthenticationId ; 
	1752:	LARGE_INTEGER ExpirationTime ; 
	1753:	TOKEN_TYPE TokenType ; 
	1754:	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel ; 
	1755:	DWORD DynamicCharged ; 
	1756:	DWORD DynamicAvailable ; 
	1757:	DWORD GroupCount ; 
	1758:	DWORD PrivilegeCount ; 
	1759:	LUID ModifiedId ; 
	1760:	} TOKEN_STATISTICS ; 
	1761:	typedef struct _TOKEN_USER { 
	1762:	SID_AND_ATTRIBUTES User ; 
	1763:	} TOKEN_USER , * PTOKEN_USER ; 
	1764:	typedef DWORD SECURITY_INFORMATION , * PSECURITY_INFORMATION ; 
	1765:	typedef WORD SECURITY_DESCRIPTOR_CONTROL , * PSECURITY_DESCRIPTOR_CONTROL ; 
	1766:	typedef struct _SECURITY_DESCRIPTOR { 
	1767:	BYTE Revision ; 
	1768:	BYTE Sbz1 ; 
	1769:	SECURITY_DESCRIPTOR_CONTROL Control ; 
	1770:	PSID Owner ; 
	1771:	PSID Group ; 
	1772:	PACL Sacl ; 
	1773:	PACL Dacl ; 
	1774:	} SECURITY_DESCRIPTOR , * PSECURITY_DESCRIPTOR , * PISECURITY_DESCRIPTOR ; 
	1775:	typedef enum _TOKEN_INFORMATION_CLASS { 
	1776:	TokenUser = 1 , TokenGroups , TokenPrivileges , TokenOwner , 
	1777:	TokenPrimaryGroup , TokenDefaultDacl , TokenSource , TokenType , 
	1778:	TokenImpersonationLevel , TokenStatistics , TokenRestrictedSids , 
	1779:	TokenSessionId 
	1780:	} TOKEN_INFORMATION_CLASS ; 
	1781:	typedef enum _SID_NAME_USE { 
	1782:	SidTypeUser = 1 , SidTypeGroup , SidTypeDomain , SidTypeAlias , SidTypeWellKnownGroup , 
	1783:	SidTypeDeletedAccount , SidTypeInvalid , SidTypeUnknown 
	1784:	} SID_NAME_USE , * PSID_NAME_USE ; 
	1785:	typedef struct _QUOTA_LIMITS { 
	1786:	SIZE_T PagedPoolLimit ; 
	1787:	SIZE_T NonPagedPoolLimit ; 
	1788:	SIZE_T MinimumWorkingSetSize ; 
	1789:	SIZE_T MaximumWorkingSetSize ; 
	1790:	SIZE_T PagefileLimit ; 
	1791:	LARGE_INTEGER TimeLimit ; 
	1792:	} QUOTA_LIMITS , * PQUOTA_LIMITS ; 
	1793:	typedef struct _IO_COUNTERS { 
	1794:	ULONGLONG ReadOperationCount ; 
	1795:	ULONGLONG WriteOperationCount ; 
	1796:	ULONGLONG OtherOperationCount ; 
	1797:	ULONGLONG ReadTransferCount ; 
	1798:	ULONGLONG WriteTransferCount ; 
	1799:	ULONGLONG OtherTransferCount ; 
	1800:	} IO_COUNTERS , * PIO_COUNTERS ; 
	1801:	typedef struct _FILE_NOTIFY_INFORMATION { 
	1802:	DWORD NextEntryOffset ; 
	1803:	DWORD Action ; 
	1804:	DWORD FileNameLength ; 
	1805:	WCHAR FileName [ 1 ] ; 
	1806:	} FILE_NOTIFY_INFORMATION , * PFILE_NOTIFY_INFORMATION ; 
	1807:	typedef struct _TAPE_ERASE { 
	1808:	DWORD Type ; 
	1809:	BOOLEAN Immediate ; 
	1810:	} TAPE_ERASE , * PTAPE_ERASE ; 
	1811:	typedef struct _TAPE_GET_DRIVE_PARAMETERS { 
	1812:	BOOLEAN ECC ; 
	1813:	BOOLEAN Compression ; 
	1814:	BOOLEAN DataPadding ; 
	1815:	BOOLEAN ReportSetmarks ; 
	1816:	DWORD DefaultBlockSize ; 
	1817:	DWORD MaximumBlockSize ; 
	1818:	DWORD MinimumBlockSize ; 
	1819:	DWORD MaximumPartitionCount ; 
	1820:	DWORD FeaturesLow ; 
	1821:	DWORD FeaturesHigh ; 
	1822:	DWORD EOTWarningZoneSize ; 
	1823:	} TAPE_GET_DRIVE_PARAMETERS , * PTAPE_GET_DRIVE_PARAMETERS ; 
	1824:	typedef struct _TAPE_GET_MEDIA_PARAMETERS { 
	1825:	LARGE_INTEGER Capacity ; 
	1826:	LARGE_INTEGER Remaining ; 
	1827:	DWORD BlockSize ; 
	1828:	DWORD PartitionCount ; 
	1829:	BOOLEAN WriteProtected ; 
	1830:	} TAPE_GET_MEDIA_PARAMETERS , * PTAPE_GET_MEDIA_PARAMETERS ; 
	1831:	typedef struct _TAPE_GET_POSITION { 
	1832:	ULONG Type ; 
	1833:	ULONG Partition ; 
	1834:	ULONG OffsetLow ; 
	1835:	ULONG OffsetHigh ; 
	1836:	} TAPE_GET_POSITION , * PTAPE_GET_POSITION ; 
	1837:	typedef struct _TAPE_PREPARE { 
	1838:	DWORD Operation ; 
	1839:	BOOLEAN Immediate ; 
	1840:	} TAPE_PREPARE , * PTAPE_PREPARE ; 
	1841:	typedef struct _TAPE_SET_DRIVE_PARAMETERS { 
	1842:	BOOLEAN ECC ; 
	1843:	BOOLEAN Compression ; 
	1844:	BOOLEAN DataPadding ; 
	1845:	BOOLEAN ReportSetmarks ; 
	1846:	ULONG EOTWarningZoneSize ; 
	1847:	} TAPE_SET_DRIVE_PARAMETERS , * PTAPE_SET_DRIVE_PARAMETERS ; 
	1848:	typedef struct _TAPE_SET_MEDIA_PARAMETERS { 
	1849:	ULONG BlockSize ; 
	1850:	} TAPE_SET_MEDIA_PARAMETERS , * PTAPE_SET_MEDIA_PARAMETERS ; 
	1851:	typedef struct _TAPE_SET_POSITION { 
	1852:	DWORD Method ; 
	1853:	DWORD Partition ; 
	1854:	LARGE_INTEGER Offset ; 
	1855:	BOOLEAN Immediate ; 
	1856:	} TAPE_SET_POSITION , * PTAPE_SET_POSITION ; 
	1857:	typedef struct _TAPE_WRITE_MARKS { 
	1858:	DWORD Type ; 
	1859:	DWORD Count ; 
	1860:	BOOLEAN Immediate ; 
	1861:	} TAPE_WRITE_MARKS , * PTAPE_WRITE_MARKS ; 
	1862:	typedef struct _TAPE_CREATE_PARTITION { 
	1863:	DWORD Method ; 
	1864:	DWORD Count ; 
	1865:	DWORD Size ; 
	1866:	} TAPE_CREATE_PARTITION , * PTAPE_CREATE_PARTITION ; 
	1867:	typedef struct _MEMORY_BASIC_INFORMATION { 
	1868:	PVOID BaseAddress ; 
	1869:	PVOID AllocationBase ; 
	1870:	DWORD AllocationProtect ; 
	1871:	DWORD RegionSize ; 
	1872:	DWORD State ; 
	1873:	DWORD Protect ; 
	1874:	DWORD Type ; 
	1875:	} MEMORY_BASIC_INFORMATION , * PMEMORY_BASIC_INFORMATION ; 
	1876:	typedef struct _MESSAGE_RESOURCE_ENTRY { 
	1877:	WORD Length ; 
	1878:	WORD Flags ; 
	1879:	BYTE Text [ 1 ] ; 
	1880:	} MESSAGE_RESOURCE_ENTRY , * PMESSAGE_RESOURCE_ENTRY ; 
	1881:	typedef struct _MESSAGE_RESOURCE_BLOCK { 
	1882:	DWORD LowId ; 
	1883:	DWORD HighId ; 
	1884:	DWORD OffsetToEntries ; 
	1885:	} MESSAGE_RESOURCE_BLOCK , * PMESSAGE_RESOURCE_BLOCK ; 
	1886:	typedef struct _MESSAGE_RESOURCE_DATA { 
	1887:	DWORD NumberOfBlocks ; 
	1888:	MESSAGE_RESOURCE_BLOCK Blocks [ 1 ] ; 
	1889:	} MESSAGE_RESOURCE_DATA , * PMESSAGE_RESOURCE_DATA ; 
	1890:	typedef struct _LIST_ENTRY { 
	1891:	struct _LIST_ENTRY * Flink ; 
	1892:	struct _LIST_ENTRY * Blink ; 
	1893:	} LIST_ENTRY , * PLIST_ENTRY ; 
	1894:	typedef struct _RTL_CRITICAL_SECTION_DEBUG { 
	1895:	WORD Type ; 
	1896:	WORD CreatorBackTraceIndex ; 
	1897:	struct _RTL_CRITICAL_SECTION * CriticalSection ; 
	1898:	LIST_ENTRY ProcessLocksList ; 
	1899:	DWORD EntryCount ; 
	1900:	DWORD ContentionCount ; 
	1901:	DWORD Spare [ 2 ] ; 
	1902:	} RTL_CRITICAL_SECTION_DEBUG , * PRTL_CRITICAL_SECTION_DEBUG ; 
	1903:	typedef struct _RTL_CRITICAL_SECTION { 
	1904:	PRTL_CRITICAL_SECTION_DEBUG DebugInfo ; 
	1905:	LONG LockCount ; 
	1906:	LONG RecursionCount ; 
	1907:	HANDLE OwningThread ; 
	1908:	HANDLE LockSemaphore ; 
	1909:	DWORD Reserved ; 
	1910:	} RTL_CRITICAL_SECTION , * PRTL_CRITICAL_SECTION ; 
	1911:	typedef struct _EVENTLOGRECORD { 
	1912:	DWORD Length ; 
	1913:	DWORD Reserved ; 
	1914:	DWORD RecordNumber ; 
	1915:	DWORD TimeGenerated ; 
	1916:	DWORD TimeWritten ; 
	1917:	DWORD EventID ; 
	1918:	WORD EventType ; 
	1919:	WORD NumStrings ; 
	1920:	WORD EventCategory ; 
	1921:	WORD ReservedFlags ; 
	1922:	DWORD ClosingRecordNumber ; 
	1923:	DWORD StringOffset ; 
	1924:	DWORD UserSidLength ; 
	1925:	DWORD UserSidOffset ; 
	1926:	DWORD DataLength ; 
	1927:	DWORD DataOffset ; 
	1928:	} EVENTLOGRECORD , * PEVENTLOGRECORD ; 
	1929:	typedef struct _OSVERSIONINFOA { 
	1930:	DWORD dwOSVersionInfoSize ; 
	1931:	DWORD dwMajorVersion ; 
	1932:	DWORD dwMinorVersion ; 
	1933:	DWORD dwBuildNumber ; 
	1934:	DWORD dwPlatformId ; 
	1935:	CHAR szCSDVersion [ 128 ] ; 
	1936:	} OSVERSIONINFOA , * POSVERSIONINFOA , * LPOSVERSIONINFOA ; 
	1937:	typedef struct _OSVERSIONINFOW { 
	1938:	DWORD dwOSVersionInfoSize ; 
	1939:	DWORD dwMajorVersion ; 
	1940:	DWORD dwMinorVersion ; 
	1941:	DWORD dwBuildNumber ; 
	1942:	DWORD dwPlatformId ; 
	1943:	WCHAR szCSDVersion [ 128 ] ; 
	1944:	} OSVERSIONINFOW , * POSVERSIONINFOW , * LPOSVERSIONINFOW ; 
	1945:	typedef struct _OSVERSIONINFOEXA { 
	1946:	DWORD dwOSVersionInfoSize ; 
	1947:	DWORD dwMajorVersion ; 
	1948:	DWORD dwMinorVersion ; 
	1949:	DWORD dwBuildNumber ; 
	1950:	DWORD dwPlatformId ; 
	1951:	CHAR szCSDVersion [ 128 ] ; 
	1952:	WORD wServicePackMajor ; 
	1953:	WORD wServicePackMinor ; 
	1954:	WORD wSuiteMask ; 
	1955:	BYTE wProductType ; 
	1956:	BYTE wReserved ; 
	1957:	} OSVERSIONINFOEXA , * POSVERSIONINFOEXA , * LPOSVERSIONINFOEXA ; 
	1958:	typedef struct _OSVERSIONINFOEXW { 
	1959:	DWORD dwOSVersionInfoSize ; 
	1960:	DWORD dwMajorVersion ; 
	1961:	DWORD dwMinorVersion ; 
	1962:	DWORD dwBuildNumber ; 
	1963:	DWORD dwPlatformId ; 
	1964:	WCHAR szCSDVersion [ 128 ] ; 
	1965:	WORD wServicePackMajor ; 
	1966:	WORD wServicePackMinor ; 
	1967:	WORD wSuiteMask ; 
	1968:	BYTE wProductType ; 
	1969:	BYTE wReserved ; 
	1970:	} OSVERSIONINFOEXW , * POSVERSIONINFOEXW , * LPOSVERSIONINFOEXW ; 
	1972:	typedef struct _IMAGE_VXD_HEADER { 
	1973:	WORD e32_magic ; 
	1974:	BYTE e32_border ; 
	1975:	BYTE e32_worder ; 
	1976:	DWORD e32_level ; 
	1977:	WORD e32_cpu ; 
	1978:	WORD e32_os ; 
	1979:	DWORD e32_ver ; 
	1980:	DWORD e32_mflags ; 
	1981:	DWORD e32_mpages ; 
	1982:	DWORD e32_startobj ; 
	1983:	DWORD e32_eip ; 
	1984:	DWORD e32_stackobj ; 
	1985:	DWORD e32_esp ; 
	1986:	DWORD e32_pagesize ; 
	1987:	DWORD e32_lastpagesize ; 
	1988:	DWORD e32_fixupsize ; 
	1989:	DWORD e32_fixupsum ; 
	1990:	DWORD e32_ldrsize ; 
	1991:	DWORD e32_ldrsum ; 
	1992:	DWORD e32_objtab ; 
	1993:	DWORD e32_objcnt ; 
	1994:	DWORD e32_objmap ; 
	1995:	DWORD e32_itermap ; 
	1996:	DWORD e32_rsrctab ; 
	1997:	DWORD e32_rsrccnt ; 
	1998:	DWORD e32_restab ; 
	1999:	DWORD e32_enttab ; 
	2000:	DWORD e32_dirtab ; 
	2001:	DWORD e32_dircnt ; 
	2002:	DWORD e32_fpagetab ; 
	2003:	DWORD e32_frectab ; 
	2004:	DWORD e32_impmod ; 
	2005:	DWORD e32_impmodcnt ; 
	2006:	DWORD e32_impproc ; 
	2007:	DWORD e32_pagesum ; 
	2008:	DWORD e32_datapage ; 
	2009:	DWORD e32_preload ; 
	2010:	DWORD e32_nrestab ; 
	2011:	DWORD e32_cbnrestab ; 
	2012:	DWORD e32_nressum ; 
	2013:	DWORD e32_autodata ; 
	2014:	DWORD e32_debuginfo ; 
	2015:	DWORD e32_debuglen ; 
	2016:	DWORD e32_instpreload ; 
	2017:	DWORD e32_instdemand ; 
	2018:	DWORD e32_heapsize ; 
	2019:	BYTE e32_res3 [ 12 ] ; 
	2020:	DWORD e32_winresoff ; 
	2021:	DWORD e32_winreslen ; 
	2022:	WORD e32_devid ; 
	2023:	WORD e32_ddkver ; 
	2024:	} IMAGE_VXD_HEADER , * PIMAGE_VXD_HEADER ; 
	2027:	typedef struct _IMAGE_FILE_HEADER { 
	2028:	WORD Machine ; 
	2029:	WORD NumberOfSections ; 
	2030:	DWORD TimeDateStamp ; 
	2031:	DWORD PointerToSymbolTable ; 
	2032:	DWORD NumberOfSymbols ; 
	2033:	WORD SizeOfOptionalHeader ; 
	2034:	WORD Characteristics ; 
	2035:	} IMAGE_FILE_HEADER , * PIMAGE_FILE_HEADER ; 
	2036:	typedef struct _IMAGE_DATA_DIRECTORY { 
	2037:	DWORD VirtualAddress ; 
	2038:	DWORD Size ; 
	2039:	} IMAGE_DATA_DIRECTORY , * PIMAGE_DATA_DIRECTORY ; 
	2040:	typedef struct _IMAGE_OPTIONAL_HEADER { 
	2041:	WORD Magic ; 
	2042:	BYTE MajorLinkerVersion ; 
	2043:	BYTE MinorLinkerVersion ; 
	2044:	DWORD SizeOfCode ; 
	2045:	DWORD SizeOfInitializedData ; 
	2046:	DWORD SizeOfUninitializedData ; 
	2047:	DWORD AddressOfEntryPoint ; 
	2048:	DWORD BaseOfCode ; 
	2049:	DWORD BaseOfData ; 
	2050:	DWORD ImageBase ; 
	2051:	DWORD SectionAlignment ; 
	2052:	DWORD FileAlignment ; 
	2053:	WORD MajorOperatingSystemVersion ; 
	2054:	WORD MinorOperatingSystemVersion ; 
	2055:	WORD MajorImageVersion ; 
	2056:	WORD MinorImageVersion ; 
	2057:	WORD MajorSubsystemVersion ; 
	2058:	WORD MinorSubsystemVersion ; 
	2059:	DWORD Reserved1 ; 
	2060:	DWORD SizeOfImage ; 
	2061:	DWORD SizeOfHeaders ; 
	2062:	DWORD CheckSum ; 
	2063:	WORD Subsystem ; 
	2064:	WORD DllCharacteristics ; 
	2065:	DWORD SizeOfStackReserve ; 
	2066:	DWORD SizeOfStackCommit ; 
	2067:	DWORD SizeOfHeapReserve ; 
	2068:	DWORD SizeOfHeapCommit ; 
	2069:	DWORD LoaderFlags ; 
	2070:	DWORD NumberOfRvaAndSizes ; 
	2071:	IMAGE_DATA_DIRECTORY DataDirectory [ 16 ] ; 
	2072:	} IMAGE_OPTIONAL_HEADER , * PIMAGE_OPTIONAL_HEADER ; 
	2073:	typedef struct _IMAGE_ROM_OPTIONAL_HEADER { 
	2074:	WORD Magic ; 
	2075:	BYTE MajorLinkerVersion ; 
	2076:	BYTE MinorLinkerVersion ; 
	2077:	DWORD SizeOfCode ; 
	2078:	DWORD SizeOfInitializedData ; 
	2079:	DWORD SizeOfUninitializedData ; 
	2080:	DWORD AddressOfEntryPoint ; 
	2081:	DWORD BaseOfCode ; 
	2082:	DWORD BaseOfData ; 
	2083:	DWORD BaseOfBss ; 
	2084:	DWORD GprMask ; 
	2085:	DWORD CprMask [ 4 ] ; 
	2086:	DWORD GpValue ; 
	2087:	} IMAGE_ROM_OPTIONAL_HEADER , * PIMAGE_ROM_OPTIONAL_HEADER ; 
	2090:	typedef struct _IMAGE_DOS_HEADER { 
	2091:	WORD e_magic ; 
	2092:	WORD e_cblp ; 
	2093:	WORD e_cp ; 
	2094:	WORD e_crlc ; 
	2095:	WORD e_cparhdr ; 
	2096:	WORD e_minalloc ; 
	2097:	WORD e_maxalloc ; 
	2098:	WORD e_ss ; 
	2099:	WORD e_sp ; 
	2100:	WORD e_csum ; 
	2101:	WORD e_ip ; 
	2102:	WORD e_cs ; 
	2103:	WORD e_lfarlc ; 
	2104:	WORD e_ovno ; 
	2105:	WORD e_res [ 4 ] ; 
	2106:	WORD e_oemid ; 
	2107:	WORD e_oeminfo ; 
	2108:	WORD e_res2 [ 10 ] ; 
	2109:	LONG e_lfanew ; 
	2110:	} IMAGE_DOS_HEADER , * PIMAGE_DOS_HEADER ; 
	2111:	typedef struct _IMAGE_OS2_HEADER { 
	2112:	WORD ne_magic ; 
	2113:	CHAR ne_ver ; 
	2114:	CHAR ne_rev ; 
	2115:	WORD ne_enttab ; 
	2116:	WORD ne_cbenttab ; 
	2117:	LONG ne_crc ; 
	2118:	WORD ne_flags ; 
	2119:	WORD ne_autodata ; 
	2120:	WORD ne_heap ; 
	2121:	WORD ne_stack ; 
	2122:	LONG ne_csip ; 
	2123:	LONG ne_sssp ; 
	2124:	WORD ne_cseg ; 
	2125:	WORD ne_cmod ; 
	2126:	WORD ne_cbnrestab ; 
	2127:	WORD ne_segtab ; 
	2128:	WORD ne_rsrctab ; 
	2129:	WORD ne_restab ; 
	2130:	WORD ne_modtab ; 
	2131:	WORD ne_imptab ; 
	2132:	LONG ne_nrestab ; 
	2133:	WORD ne_cmovent ; 
	2134:	WORD ne_align ; 
	2135:	WORD ne_cres ; 
	2136:	BYTE ne_exetyp ; 
	2137:	BYTE ne_flagsothers ; 
	2138:	WORD ne_pretthunks ; 
	2139:	WORD ne_psegrefbytes ; 
	2140:	WORD ne_swaparea ; 
	2141:	WORD ne_expver ; 
	2142:	} IMAGE_OS2_HEADER , * PIMAGE_OS2_HEADER ; 
	2145:	typedef struct _IMAGE_NT_HEADERS { 
	2146:	DWORD Signature ; 
	2147:	IMAGE_FILE_HEADER FileHeader ; 
	2148:	IMAGE_OPTIONAL_HEADER OptionalHeader ; 
	2149:	} IMAGE_NT_HEADERS , * PIMAGE_NT_HEADERS ; 
	2150:	typedef struct _IMAGE_ROM_HEADERS { 
	2151:	IMAGE_FILE_HEADER FileHeader ; 
	2152:	IMAGE_ROM_OPTIONAL_HEADER OptionalHeader ; 
	2153:	} IMAGE_ROM_HEADERS , * PIMAGE_ROM_HEADERS ; 
	2154:	typedef struct _IMAGE_SECTION_HEADER { 
	2155:	BYTE Name [ 8 ] ; 
	2156:	union { 
	2157:	DWORD PhysicalAddress ; 
	2158:	DWORD VirtualSize ; 
	2159:	} Misc ; 
	2160:	DWORD VirtualAddress ; 
	2161:	DWORD SizeOfRawData ; 
	2162:	DWORD PointerToRawData ; 
	2163:	DWORD PointerToRelocations ; 
	2164:	DWORD PointerToLinenumbers ; 
	2165:	WORD NumberOfRelocations ; 
	2166:	WORD NumberOfLinenumbers ; 
	2167:	DWORD Characteristics ; 
	2168:	} IMAGE_SECTION_HEADER , * PIMAGE_SECTION_HEADER ; 
	2171:	typedef struct _IMAGE_SYMBOL { 
	2172:	union { 
	2173:	BYTE ShortName [ 8 ] ; 
	2174:	struct { 
	2175:	DWORD Short ; 
	2176:	DWORD Long ; 
	2177:	} Name ; 
	2178:	PBYTE LongName [ 2 ] ; 
	2179:	} N ; 
	2180:	DWORD Value ; 
	2181:	SHORT SectionNumber ; 
	2182:	WORD Type ; 
	2183:	BYTE StorageClass ; 
	2184:	BYTE NumberOfAuxSymbols ; 
	2185:	} IMAGE_SYMBOL , * PIMAGE_SYMBOL ; 
	2186:	typedef union _IMAGE_AUX_SYMBOL { 
	2187:	struct { 
	2188:	DWORD TagIndex ; 
	2189:	union { 
	2190:	struct { 
	2191:	WORD Linenumber ; 
	2192:	WORD Size ; 
	2193:	} LnSz ; 
	2194:	DWORD TotalSize ; 
	2195:	} Misc ; 
	2196:	union { 
	2197:	struct { 
	2198:	DWORD PointerToLinenumber ; 
	2199:	DWORD PointerToNextFunction ; 
	2200:	} Function ; 
	2201:	struct { 
	2202:	WORD Dimension [ 4 ] ; 
	2203:	} Array ; 
	2204:	} FcnAry ; 
	2205:	WORD TvIndex ; 
	2206:	} Sym ; 
	2207:	struct { 
	2208:	BYTE Name [ 18 ] ; 
	2209:	} File ; 
	2210:	struct { 
	2211:	DWORD Length ; 
	2212:	WORD NumberOfRelocations ; 
	2213:	WORD NumberOfLinenumbers ; 
	2214:	DWORD CheckSum ; 
	2215:	SHORT Number ; 
	2216:	BYTE Selection ; 
	2217:	} Section ; 
	2218:	} IMAGE_AUX_SYMBOL , * PIMAGE_AUX_SYMBOL ; 
	2219:	typedef struct _IMAGE_COFF_SYMBOLS_HEADER { 
	2220:	DWORD NumberOfSymbols ; 
	2221:	DWORD LvaToFirstSymbol ; 
	2222:	DWORD NumberOfLinenumbers ; 
	2223:	DWORD LvaToFirstLinenumber ; 
	2224:	DWORD RvaToFirstByteOfCode ; 
	2225:	DWORD RvaToLastByteOfCode ; 
	2226:	DWORD RvaToFirstByteOfData ; 
	2227:	DWORD RvaToLastByteOfData ; 
	2228:	} IMAGE_COFF_SYMBOLS_HEADER , * PIMAGE_COFF_SYMBOLS_HEADER ; 
	2229:	typedef struct _IMAGE_RELOCATION { 
	2230:	union { 
	2231:	DWORD VirtualAddress ; 
	2232:	DWORD RelocCount ; 
	2233:	} u ; 
	2234:	DWORD SymbolTableIndex ; 
	2235:	WORD Type ; 
	2236:	} IMAGE_RELOCATION , * PIMAGE_RELOCATION ; 
	2239:	typedef struct _IMAGE_BASE_RELOCATION { 
	2240:	DWORD VirtualAddress ; 
	2241:	DWORD SizeOfBlock ; 
	2242:	} IMAGE_BASE_RELOCATION , * PIMAGE_BASE_RELOCATION ; 
	2245:	typedef struct _IMAGE_LINENUMBER { 
	2246:	union { 
	2247:	DWORD SymbolTableIndex ; 
	2248:	DWORD VirtualAddress ; 
	2249:	} Type ; 
	2250:	WORD Linenumber ; 
	2251:	} IMAGE_LINENUMBER , * PIMAGE_LINENUMBER ; 
	2254:	typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER { 
	2255:	BYTE Name [ 16 ] ; 
	2256:	BYTE Date [ 12 ] ; 
	2257:	BYTE UserID [ 6 ] ; 
	2258:	BYTE GroupID [ 6 ] ; 
	2259:	BYTE Mode [ 8 ] ; 
	2260:	BYTE Size [ 10 ] ; 
	2261:	BYTE EndHeader [ 2 ] ; 
	2262:	} IMAGE_ARCHIVE_MEMBER_HEADER , * PIMAGE_ARCHIVE_MEMBER_HEADER ; 
	2263:	typedef struct _IMAGE_EXPORT_DIRECTORY { 
	2264:	DWORD Characteristics ; 
	2265:	DWORD TimeDateStamp ; 
	2266:	WORD MajorVersion ; 
	2267:	WORD MinorVersion ; 
	2268:	DWORD Name ; 
	2269:	DWORD Base ; 
	2270:	DWORD NumberOfFunctions ; 
	2271:	DWORD NumberOfNames ; 
	2272:	PDWORD * AddressOfFunctions ; 
	2273:	PDWORD * AddressOfNames ; 
	2274:	PWORD * AddressOfNameOrdinals ; 
	2275:	} IMAGE_EXPORT_DIRECTORY , * PIMAGE_EXPORT_DIRECTORY ; 
	2276:	typedef struct _IMAGE_IMPORT_BY_NAME { 
	2277:	WORD Hint ; 
	2278:	BYTE Name [ 1 ] ; 
	2279:	} IMAGE_IMPORT_BY_NAME , * PIMAGE_IMPORT_BY_NAME ; 
	2280:	typedef struct _IMAGE_THUNK_DATA { 
	2281:	union { 
	2282:	PBYTE ForwarderString ; 
	2283:	PDWORD Function ; 
	2284:	DWORD Ordinal ; 
	2285:	PIMAGE_IMPORT_BY_NAME AddressOfData ; 
	2286:	} u1 ; 
	2287:	} IMAGE_THUNK_DATA , * PIMAGE_THUNK_DATA ; 
	2288:	typedef struct _IMAGE_IMPORT_DESCRIPTOR { 
	2289:	union { 
	2290:	DWORD Characteristics ; 
	2291:	PIMAGE_THUNK_DATA OriginalFirstThunk ; 
	2292:	} u ; 
	2293:	DWORD TimeDateStamp ; 
	2294:	DWORD ForwarderChain ; 
	2295:	DWORD Name ; 
	2296:	PIMAGE_THUNK_DATA FirstThunk ; 
	2297:	} IMAGE_IMPORT_DESCRIPTOR , * PIMAGE_IMPORT_DESCRIPTOR ; 
	2298:	typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR { 
	2299:	DWORD TimeDateStamp ; 
	2300:	WORD OffsetModuleName ; 
	2301:	WORD NumberOfModuleForwarderRefs ; 
	2302:	} IMAGE_BOUND_IMPORT_DESCRIPTOR , * PIMAGE_BOUND_IMPORT_DESCRIPTOR ; 
	2303:	typedef struct _IMAGE_BOUND_FORWARDER_REF { 
	2304:	DWORD TimeDateStamp ; 
	2305:	WORD OffsetModuleName ; 
	2306:	WORD Reserved ; 
	2307:	} IMAGE_BOUND_FORWARDER_REF , * PIMAGE_BOUND_FORWARDER_REF ; 
	2308:	typedef void ( * PIMAGE_TLS_CALLBACK ) ( PVOID , DWORD , PVOID ) ; 
	2309:	typedef struct _IMAGE_TLS_DIRECTORY { 
	2310:	DWORD StartAddressOfRawData ; 
	2311:	DWORD EndAddressOfRawData ; 
	2312:	PDWORD AddressOfIndex ; 
	2313:	PIMAGE_TLS_CALLBACK * AddressOfCallBacks ; 
	2314:	DWORD SizeOfZeroFill ; 
	2315:	DWORD Characteristics ; 
	2316:	} IMAGE_TLS_DIRECTORY , * PIMAGE_TLS_DIRECTORY ; 
	2317:	typedef struct _IMAGE_RESOURCE_DIRECTORY { 
	2318:	DWORD Characteristics ; 
	2319:	DWORD TimeDateStamp ; 
	2320:	WORD MajorVersion ; 
	2321:	WORD MinorVersion ; 
	2322:	WORD NumberOfNamedEntries ; 
	2323:	WORD NumberOfIdEntries ; 
	2324:	} IMAGE_RESOURCE_DIRECTORY , * PIMAGE_RESOURCE_DIRECTORY ; 
	2325:	typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY { 
	2326:	union { 
	2327:	struct { 
	2328:	DWORD NameOffset : 31 ; 
	2329:	DWORD NameIsString : 1 ; 
	2330:	} s ; 
	2331:	DWORD Name ; 
	2332:	WORD Id ; 
	2333:	} u ; 
	2334:	union { 
	2335:	DWORD OffsetToData ; 
	2336:	struct { 
	2337:	DWORD OffsetToDirectory : 31 ; 
	2338:	DWORD DataIsDirectory : 1 ; 
	2339:	} s2 ; 
	2340:	} u2 ; 
	2341:	} IMAGE_RESOURCE_DIRECTORY_ENTRY , * PIMAGE_RESOURCE_DIRECTORY_ENTRY ; 
	2342:	typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING { 
	2343:	WORD Length ; 
	2344:	CHAR NameString [ 1 ] ; 
	2345:	} IMAGE_RESOURCE_DIRECTORY_STRING , * PIMAGE_RESOURCE_DIRECTORY_STRING ; 
	2346:	typedef struct _IMAGE_RESOURCE_DIR_STRING_U { 
	2347:	WORD Length ; 
	2348:	WCHAR NameString [ 1 ] ; 
	2349:	} IMAGE_RESOURCE_DIR_STRING_U , * PIMAGE_RESOURCE_DIR_STRING_U ; 
	2350:	typedef struct _IMAGE_RESOURCE_DATA_ENTRY { 
	2351:	DWORD OffsetToData ; 
	2352:	DWORD Size ; 
	2353:	DWORD CodePage ; 
	2354:	DWORD Reserved ; 
	2355:	} IMAGE_RESOURCE_DATA_ENTRY , * PIMAGE_RESOURCE_DATA_ENTRY ; 
	2356:	typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY { 
	2357:	DWORD Characteristics ; 
	2358:	DWORD TimeDateStamp ; 
	2359:	WORD MajorVersion ; 
	2360:	WORD MinorVersion ; 
	2361:	DWORD GlobalFlagsClear ; 
	2362:	DWORD GlobalFlagsSet ; 
	2363:	DWORD CriticalSectionDefaultTimeout ; 
	2364:	DWORD DeCommitFreeBlockThreshold ; 
	2365:	DWORD DeCommitTotalFreeThreshold ; 
	2366:	PVOID LockPrefixTable ; 
	2367:	DWORD MaximumAllocationSize ; 
	2368:	DWORD VirtualMemoryThreshold ; 
	2369:	DWORD ProcessHeapFlags ; 
	2370:	DWORD Reserved [ 4 ] ; 
	2371:	} IMAGE_LOAD_CONFIG_DIRECTORY , * PIMAGE_LOAD_CONFIG_DIRECTORY ; 
	2372:	typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY { 
	2373:	DWORD BeginAddress ; 
	2374:	DWORD EndAddress ; 
	2375:	PVOID ExceptionHandler ; 
	2376:	PVOID HandlerData ; 
	2377:	DWORD PrologEndAddress ; 
	2378:	} IMAGE_RUNTIME_FUNCTION_ENTRY , * PIMAGE_RUNTIME_FUNCTION_ENTRY ; 
	2379:	typedef struct _IMAGE_DEBUG_DIRECTORY { 
	2380:	DWORD Characteristics ; 
	2381:	DWORD TimeDateStamp ; 
	2382:	WORD MajorVersion ; 
	2383:	WORD MinorVersion ; 
	2384:	DWORD Type ; 
	2385:	DWORD SizeOfData ; 
	2386:	DWORD AddressOfRawData ; 
	2387:	DWORD PointerToRawData ; 
	2388:	} IMAGE_DEBUG_DIRECTORY , * PIMAGE_DEBUG_DIRECTORY ; 
	2389:	typedef struct _FPO_DATA { 
	2390:	DWORD ulOffStart ; 
	2391:	DWORD cbProcSize ; 
	2392:	DWORD cdwLocals ; 
	2393:	WORD cdwParams ; 
	2394:	WORD cbProlog : 8 ; 
	2395:	WORD cbRegs : 3 ; 
	2396:	WORD fHasSEH : 1 ; 
	2397:	WORD fUseBP : 1 ; 
	2398:	WORD reserved : 1 ; 
	2399:	WORD cbFrame : 2 ; 
	2400:	} FPO_DATA , * PFPO_DATA ; 
	2401:	typedef struct _IMAGE_DEBUG_MISC { 
	2402:	DWORD DataType ; 
	2403:	DWORD Length ; 
	2404:	BOOLEAN Unicode ; 
	2405:	BYTE Reserved [ 3 ] ; 
	2406:	BYTE Data [ 1 ] ; 
	2407:	} IMAGE_DEBUG_MISC , * PIMAGE_DEBUG_MISC ; 
	2408:	typedef struct _IMAGE_FUNCTION_ENTRY { 
	2409:	DWORD StartingAddress ; 
	2410:	DWORD EndingAddress ; 
	2411:	DWORD EndOfPrologue ; 
	2412:	} IMAGE_FUNCTION_ENTRY , * PIMAGE_FUNCTION_ENTRY ; 
	2413:	typedef struct _IMAGE_SEPARATE_DEBUG_HEADER { 
	2414:	WORD Signature ; 
	2415:	WORD Flags ; 
	2416:	WORD Machine ; 
	2417:	WORD Characteristics ; 
	2418:	DWORD TimeDateStamp ; 
	2419:	DWORD CheckSum ; 
	2420:	DWORD ImageBase ; 
	2421:	DWORD SizeOfImage ; 
	2422:	DWORD NumberOfSections ; 
	2423:	DWORD ExportedNamesSize ; 
	2424:	DWORD DebugDirectorySize ; 
	2425:	DWORD Reserved [ 3 ] ; 
	2426:	} IMAGE_SEPARATE_DEBUG_HEADER , * PIMAGE_SEPARATE_DEBUG_HEADER ; 
	2428:	typedef enum _CM_SERVICE_NODE_TYPE { 
	2429:	DriverType = 1 , 
	2430:	FileSystemType = 2 , 
	2431:	Win32ServiceOwnProcess = 16 , 
	2432:	Win32ServiceShareProcess = 32 , 
	2433:	AdapterType = 4 , 
	2434:	RecognizerType = 8 
	2435:	} SERVICE_NODE_TYPE ; 
	2436:	typedef enum _CM_SERVICE_LOAD_TYPE { 
	2437:	BootLoad = 0 , 
	2438:	SystemLoad = 1 , 
	2439:	AutoLoad = 2 , 
	2440:	DemandLoad = 3 , 
	2441:	DisableLoad = 4 
	2442:	} SERVICE_LOAD_TYPE ; 
	2443:	typedef enum _CM_ERROR_CONTROL_TYPE { 
	2444:	IgnoreError = 0 , 
	2445:	NormalError = 1 , 
	2446:	SevereError = 2 , 
	2447:	CriticalError = 3 
	2448:	} SERVICE_ERROR_TYPE ; 
	2449:	typedef struct _NT_TIB { 
	2450:	struct _EXCEPTION_REGISTRATION_RECORD * ExceptionList ; 
	2451:	PVOID StackBase ; 
	2452:	PVOID StackLimit ; 
	2453:	PVOID SubSystemTib ; 
	2454:	union { 
	2455:	PVOID FiberData ; 
	2456:	DWORD Version ; 
	2457:	} u ; 
	2458:	PVOID ArbitraryUserPointer ; 
	2459:	struct _NT_TIB * Self ; 
	2460:	} NT_TIB , * PNT_TIB ; 
	2461:	typedef struct _REPARSE_DATA_BUFFER { 
	2462:	DWORD ReparseTag ; 
	2463:	WORD ReparseDataLength ; 
	2464:	WORD Reserved ; 
	2465:	union { 
	2466:	struct { 
	2467:	WORD SubstituteNameOffset ; 
	2468:	WORD SubstituteNameLength ; 
	2469:	WORD PrintNameOffset ; 
	2470:	WORD PrintNameLength ; 
	2471:	WCHAR PathBuffer [ 1 ] ; 
	2472:	} SymbolicLinkReparseBuffer ; 
	2473:	struct { 
	2474:	WORD SubstituteNameOffset ; 
	2475:	WORD SubstituteNameLength ; 
	2476:	WORD PrintNameOffset ; 
	2477:	WORD PrintNameLength ; 
	2478:	WCHAR PathBuffer [ 1 ] ; 
	2479:	} MountPointReparseBuffer ; 
	2480:	struct { 
	2481:	BYTE DataBuffer [ 1 ] ; 
	2482:	} GenericReparseBuffer ; 
	2483:	} u ; 
	2484:	} REPARSE_DATA_BUFFER , * PREPARSE_DATA_BUFFER ; 
	2485:	typedef struct _REPARSE_GUID_DATA_BUFFER { 
	2486:	DWORD ReparseTag ; 
	2487:	WORD ReparseDataLength ; 
	2488:	WORD Reserved ; 
	2489:	GUID ReparseGuid ; 
	2490:	struct { 
	2491:	BYTE DataBuffer [ 1 ] ; 
	2492:	} GenericReparseBuffer ; 
	2493:	} REPARSE_GUID_DATA_BUFFER , * PREPARSE_GUID_DATA_BUFFER ; 
	2494:	typedef struct _REPARSE_POINT_INFORMATION { 
	2495:	WORD ReparseDataLength ; 
	2496:	WORD UnparsedNameLength ; 
	2497:	} REPARSE_POINT_INFORMATION , * PREPARSE_POINT_INFORMATION ; 
	2502:	typedef OSVERSIONINFOA OSVERSIONINFO , * POSVERSIONINFO , * LPOSVERSIONINFO ; 
	2503:	typedef OSVERSIONINFOEXA OSVERSIONINFOEX , * POSVERSIONINFOEX , * LPOSVERSIONINFOEX ; 
	2506:	extern PVOID GetCurrentFiber ( void ) ; 
	2507:	extern PVOID GetFiberData ( void ) ; 
	129:	typedef UINT WPARAM ; 
	130:	typedef LONG LPARAM ; 
	131:	typedef LONG LRESULT ; 
	133:	typedef LONG HRESULT ; 
	137:	typedef WORD ATOM ; 
	139:	typedef HANDLE HGLOBAL ; 
	140:	typedef HANDLE HLOCAL ; 
	141:	typedef HANDLE GLOBALHANDLE ; 
	142:	typedef HANDLE LOCALHANDLE ; 
	143:	typedef void * HGDIOBJ ; 
	144:	typedef struct HACCEL__ { int i ; } * HACCEL ; 
	145:	typedef struct HBITMAP__ { int i ; } * HBITMAP ; 
	146:	typedef struct HBRUSH__ { int i ; } * HBRUSH ; 
	147:	typedef struct HCOLORSPACE__ { int i ; } * HCOLORSPACE ; 
	148:	typedef struct HDC__ { int i ; } * HDC ; 
	149:	typedef struct HGLRC__ { int i ; } * HGLRC ; 
	150:	typedef struct HDESK__ { int i ; } * HDESK ; 
	151:	typedef struct HENHMETAFILE__ { int i ; } * HENHMETAFILE ; 
	152:	typedef struct HFONT__ { int i ; } * HFONT ; 
	153:	typedef struct HICON__ { int i ; } * HICON ; 
	154:	typedef struct HKEY__ { int i ; } * HKEY ; 
	157:	typedef struct HMONITOR__ { int i ; } * HMONITOR ; 
	159:	typedef struct HTERMINAL__ { int i ; } * HTERMINAL ; 
	160:	typedef struct HWINEVENTHOOK__ { int i ; } * HWINEVENTHOOK ; 
	162:	typedef HKEY * PHKEY ; 
	163:	typedef struct HMENU__ { int i ; } * HMENU ; 
	164:	typedef struct HMETAFILE__ { int i ; } * HMETAFILE ; 
	165:	typedef struct HINSTANCE__ { int i ; } * HINSTANCE ; 
	166:	typedef HINSTANCE HMODULE ; 
	167:	typedef struct HPALETTE__ { int i ; } * HPALETTE ; 
	168:	typedef struct HPEN__ { int i ; } * HPEN ; 
	169:	typedef struct HRGN__ { int i ; } * HRGN ; 
	170:	typedef struct HRSRC__ { int i ; } * HRSRC ; 
	171:	typedef struct HSTR__ { int i ; } * HSTR ; 
	172:	typedef struct HTASK__ { int i ; } * HTASK ; 
	173:	typedef struct HWND__ { int i ; } * HWND ; 
	174:	typedef struct HWINSTA__ { int i ; } * HWINSTA ; 
	175:	typedef struct HKL__ { int i ; } * HKL ; 
	176:	typedef int HFILE ; 
	177:	typedef HICON HCURSOR ; 
	178:	typedef DWORD COLORREF ; 
	179:	typedef int ( * FARPROC ) ( ) ; 
	180:	typedef int ( * NEARPROC ) ( ) ; 
	181:	typedef int ( * PROC ) ( ) ; 
	182:	typedef struct tagRECT { 
	183:	LONG left ; 
	184:	LONG top ; 
	185:	LONG right ; 
	186:	LONG bottom ; 
	187:	} RECT , * PRECT , * LPRECT ; 
	188:	typedef const RECT * LPCRECT ; 
	189:	typedef struct tagRECTL { 
	190:	LONG left ; 
	191:	LONG top ; 
	192:	LONG right ; 
	193:	LONG bottom ; 
	194:	} RECTL , * PRECTL , * LPRECTL ; 
	195:	typedef const RECTL * LPCRECTL ; 
	196:	typedef struct tagPOINT { 
	197:	LONG x ; 
	198:	LONG y ; 
	199:	} POINT , POINTL , * PPOINT , * LPPOINT , * PPOINTL , * LPPOINTL ; 
	200:	typedef struct tagSIZE { 
	201:	LONG cx ; 
	202:	LONG cy ; 
	203:	} SIZE , SIZEL , * PSIZE , * LPSIZE , * PSIZEL , * LPSIZEL ; 
	204:	typedef struct tagPOINTS { 
	205:	SHORT x ; 
	206:	SHORT y ; 
	207:	} POINTS , * PPOINTS , * LPPOINTS ; 
	55:	typedef struct _CHAR_INFO { 
	56:	union { 
	57:	WCHAR UnicodeChar ; 
	58:	CHAR AsciiChar ; 
	59:	} Char ; 
	60:	WORD Attributes ; 
	61:	} CHAR_INFO , * PCHAR_INFO ; 
	62:	typedef struct _SMALL_RECT { 
	63:	SHORT Left ; 
	64:	SHORT Top ; 
	65:	SHORT Right ; 
	66:	SHORT Bottom ; 
	67:	} SMALL_RECT , * PSMALL_RECT ; 
	68:	typedef struct _CONSOLE_CURSOR_INFO { 
	69:	DWORD dwSize ; 
	70:	BOOL bVisible ; 
	71:	} CONSOLE_CURSOR_INFO , * PCONSOLE_CURSOR_INFO ; 
	72:	typedef struct _COORD { 
	73:	SHORT X ; 
	74:	SHORT Y ; 
	75:	} COORD ; 
	76:	typedef struct _CONSOLE_SCREEN_BUFFER_INFO { 
	77:	COORD dwSize ; 
	78:	COORD dwCursorPosition ; 
	79:	WORD wAttributes ; 
	80:	SMALL_RECT srWindow ; 
	81:	COORD dwMaximumWindowSize ; 
	82:	} CONSOLE_SCREEN_BUFFER_INFO , * PCONSOLE_SCREEN_BUFFER_INFO ; 
	83:	typedef BOOL ( * PHANDLER_ROUTINE ) ( DWORD ) ; 
	84:	typedef struct _KEY_EVENT_RECORD { 
	85:	BOOL bKeyDown ; 
	86:	WORD wRepeatCount ; 
	87:	WORD wVirtualKeyCode ; 
	88:	WORD wVirtualScanCode ; 
	89:	union { 
	90:	WCHAR UnicodeChar ; 
	91:	CHAR AsciiChar ; 
	92:	} uChar ; 
	93:	DWORD dwControlKeyState ; 
	94:	} 
	99:	KEY_EVENT_RECORD ; 
	101:	typedef struct _MOUSE_EVENT_RECORD { 
	102:	COORD dwMousePosition ; 
	103:	DWORD dwButtonState ; 
	104:	DWORD dwControlKeyState ; 
	105:	DWORD dwEventFlags ; 
	106:	} MOUSE_EVENT_RECORD ; 
	107:	typedef struct _WINDOW_BUFFER_SIZE_RECORD { COORD dwSize ; } WINDOW_BUFFER_SIZE_RECORD ; 
	108:	typedef struct _MENU_EVENT_RECORD { UINT dwCommandId ; } MENU_EVENT_RECORD , * PMENU_EVENT_RECORD ; 
	109:	typedef struct _FOCUS_EVENT_RECORD { BOOL bSetFocus ; } FOCUS_EVENT_RECORD ; 
	110:	typedef struct _INPUT_RECORD { 
	111:	WORD EventType ; 
	112:	union { 
	113:	KEY_EVENT_RECORD KeyEvent ; 
	114:	MOUSE_EVENT_RECORD MouseEvent ; 
	115:	WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent ; 
	116:	MENU_EVENT_RECORD MenuEvent ; 
	117:	FOCUS_EVENT_RECORD FocusEvent ; 
	118:	} Event ; 
	119:	} INPUT_RECORD , * PINPUT_RECORD ; 
	121:	BOOL AllocConsole ( void ) ; 
	122:	HANDLE CreateConsoleScreenBuffer ( DWORD , DWORD , LPSECURITY_ATTRIBUTES , DWORD , PVOID ) ; 
	123:	BOOL FillConsoleOutputAttribute ( HANDLE , WORD , DWORD , COORD , PDWORD ) ; 
	124:	BOOL FillConsoleOutputCharacterA ( HANDLE , CHAR , DWORD , COORD , PDWORD ) ; 
	125:	BOOL FillConsoleOutputCharacterW ( HANDLE , WCHAR , DWORD , COORD , PDWORD ) ; 
	126:	BOOL FlushConsoleInputBuffer ( HANDLE ) ; 
	127:	BOOL FreeConsole ( void ) ; 
	128:	BOOL GenerateConsoleCtrlEvent ( DWORD , DWORD ) ; 
	129:	UINT GetConsoleCP ( void ) ; 
	130:	BOOL GetConsoleCursorInfo ( HANDLE , PCONSOLE_CURSOR_INFO ) ; 
	131:	BOOL GetConsoleMode ( HANDLE , PDWORD ) ; 
	132:	UINT GetConsoleOutputCP ( void ) ; 
	133:	BOOL GetConsoleScreenBufferInfo ( HANDLE , PCONSOLE_SCREEN_BUFFER_INFO ) ; 
	134:	DWORD GetConsoleTitleA ( LPSTR , DWORD ) ; 
	135:	DWORD GetConsoleTitleW ( LPWSTR , DWORD ) ; 
	136:	COORD GetLargestConsoleWindowSize ( HANDLE ) ; 
	137:	BOOL GetNumberOfConsoleInputEvents ( HANDLE , PDWORD ) ; 
	138:	BOOL GetNumberOfConsoleMouseButtons ( PDWORD ) ; 
	139:	BOOL PeekConsoleInputA ( HANDLE , PINPUT_RECORD , DWORD , PDWORD ) ; 
	140:	BOOL PeekConsoleInputW ( HANDLE , PINPUT_RECORD , DWORD , PDWORD ) ; 
	141:	BOOL ReadConsoleA ( HANDLE , PVOID , DWORD , PDWORD , PVOID ) ; 
	142:	BOOL ReadConsoleW ( HANDLE , PVOID , DWORD , PDWORD , PVOID ) ; 
	143:	BOOL ReadConsoleInputA ( HANDLE , PINPUT_RECORD , DWORD , PDWORD ) ; 
	144:	BOOL ReadConsoleInputW ( HANDLE , PINPUT_RECORD , DWORD , PDWORD ) ; 
	145:	BOOL ReadConsoleOutputAttribute ( HANDLE , LPWORD , DWORD , COORD , LPDWORD ) ; 
	146:	BOOL ReadConsoleOutputCharacterA ( HANDLE , LPSTR , DWORD , COORD , PDWORD ) ; 
	147:	BOOL ReadConsoleOutputCharacterW ( HANDLE , LPWSTR , DWORD , COORD , PDWORD ) ; 
	148:	BOOL ReadConsoleOutputA ( HANDLE , PCHAR_INFO , COORD , COORD , PSMALL_RECT ) ; 
	149:	BOOL ReadConsoleOutputW ( HANDLE , PCHAR_INFO , COORD , COORD , PSMALL_RECT ) ; 
	150:	BOOL ScrollConsoleScreenBufferA ( HANDLE , const SMALL_RECT * , const SMALL_RECT * , COORD , const CHAR_INFO * ) ; 
	151:	BOOL ScrollConsoleScreenBufferW ( HANDLE , const SMALL_RECT * , const SMALL_RECT * , COORD , const CHAR_INFO * ) ; 
	152:	BOOL SetConsoleActiveScreenBuffer ( HANDLE ) ; 
	153:	BOOL SetConsoleCP ( UINT ) ; 
	154:	BOOL SetConsoleCtrlHandler ( PHANDLER_ROUTINE , BOOL ) ; 
	155:	BOOL SetConsoleCursorInfo ( HANDLE , const CONSOLE_CURSOR_INFO * ) ; 
	156:	BOOL SetConsoleCursorPosition ( HANDLE , COORD ) ; 
	157:	BOOL SetConsoleMode ( HANDLE , DWORD ) ; 
	158:	BOOL SetConsoleOutputCP ( UINT ) ; 
	159:	BOOL SetConsoleScreenBufferSize ( HANDLE , COORD ) ; 
	160:	BOOL SetConsoleTextAttribute ( HANDLE , WORD ) ; 
	161:	BOOL SetConsoleTitleA ( LPCSTR ) ; 
	162:	BOOL SetConsoleTitleW ( LPCWSTR ) ; 
	163:	BOOL SetConsoleWindowInfo ( HANDLE , BOOL , const SMALL_RECT * ) ; 
	164:	BOOL WriteConsoleA ( HANDLE , PCVOID , DWORD , PDWORD , PVOID ) ; 
	165:	BOOL WriteConsoleW ( HANDLE , PCVOID , DWORD , PDWORD , PVOID ) ; 
	166:	BOOL WriteConsoleInputA ( HANDLE , const INPUT_RECORD * , DWORD , PDWORD ) ; 
	167:	BOOL WriteConsoleInputW ( HANDLE , const INPUT_RECORD * , DWORD , PDWORD ) ; 
	168:	BOOL WriteConsoleOutputA ( HANDLE , const CHAR_INFO * , COORD , COORD , PSMALL_RECT ) ; 
	169:	BOOL WriteConsoleOutputW ( HANDLE , const CHAR_INFO * , COORD , COORD , PSMALL_RECT ) ; 
	170:	BOOL WriteConsoleOutputAttribute ( HANDLE , const WORD * , DWORD , COORD , PDWORD ) ; 
	171:	BOOL WriteConsoleOutputCharacterA ( HANDLE , LPCSTR , DWORD , COORD , PDWORD ) ; 
	172:	BOOL WriteConsoleOutputCharacterW ( HANDLE , LPCWSTR , DWORD , COORD , PDWORD ) ; 
	79:	typedef GUID UUID ; 
	81:	typedef GUID IID ; 
	82:	typedef GUID CLSID ; 
	83:	typedef CLSID * LPCLSID ; 
	84:	typedef IID * LPIID ; 
	85:	typedef IID * REFIID ; 
	86:	typedef CLSID * REFCLSID ; 
	87:	typedef GUID FMTID ; 
	88:	typedef FMTID * REFFMTID ; 
	89:	typedef unsigned long error_status_t ; 
	91:	typedef unsigned long PROPID ; 
	499:	typedef struct _FILETIME { 
	500:	DWORD dwLowDateTime ; 
	501:	DWORD dwHighDateTime ; 
	502:	} FILETIME , * PFILETIME , * LPFILETIME ; 
	503:	typedef struct _BY_HANDLE_FILE_INFORMATION { 
	504:	DWORD dwFileAttributes ; 
	505:	FILETIME ftCreationTime ; 
	506:	FILETIME ftLastAccessTime ; 
	507:	FILETIME ftLastWriteTime ; 
	508:	DWORD dwVolumeSerialNumber ; 
	509:	DWORD nFileSizeHigh ; 
	510:	DWORD nFileSizeLow ; 
	511:	DWORD nNumberOfLinks ; 
	512:	DWORD nFileIndexHigh ; 
	513:	DWORD nFileIndexLow ; 
	514:	} BY_HANDLE_FILE_INFORMATION , * LPBY_HANDLE_FILE_INFORMATION ; 
	515:	typedef struct _DCB { 
	516:	DWORD DCBlength ; 
	517:	DWORD BaudRate ; 
	518:	DWORD fBinary : 1 ; 
	519:	DWORD fParity : 1 ; 
	520:	DWORD fOutxCtsFlow : 1 ; 
	521:	DWORD fOutxDsrFlow : 1 ; 
	522:	DWORD fDtrControl : 2 ; 
	523:	DWORD fDsrSensitivity : 1 ; 
	524:	DWORD fTXContinueOnXoff : 1 ; 
	525:	DWORD fOutX : 1 ; 
	526:	DWORD fInX : 1 ; 
	527:	DWORD fErrorChar : 1 ; 
	528:	DWORD fNull : 1 ; 
	529:	DWORD fRtsControl : 2 ; 
	530:	DWORD fAbortOnError : 1 ; 
	531:	DWORD fDummy2 : 17 ; 
	532:	WORD wReserved ; 
	533:	WORD XonLim ; 
	534:	WORD XoffLim ; 
	535:	BYTE ByteSize ; 
	536:	BYTE Parity ; 
	537:	BYTE StopBits ; 
	538:	char XonChar ; 
	539:	char XoffChar ; 
	540:	char ErrorChar ; 
	541:	char EofChar ; 
	542:	char EvtChar ; 
	543:	WORD wReserved1 ; 
	544:	} DCB , * LPDCB ; 
	545:	typedef struct _COMM_CONFIG { 
	546:	DWORD dwSize ; 
	547:	WORD wVersion ; 
	548:	WORD wReserved ; 
	549:	DCB dcb ; 
	550:	DWORD dwProviderSubType ; 
	551:	DWORD dwProviderOffset ; 
	552:	DWORD dwProviderSize ; 
	553:	WCHAR wcProviderData [ 1 ] ; 
	554:	} COMMCONFIG , * LPCOMMCONFIG ; 
	555:	typedef struct _COMMPROP { 
	556:	WORD wPacketLength ; 
	557:	WORD wPacketVersion ; 
	558:	DWORD dwServiceMask ; 
	559:	DWORD dwReserved1 ; 
	560:	DWORD dwMaxTxQueue ; 
	561:	DWORD dwMaxRxQueue ; 
	562:	DWORD dwMaxBaud ; 
	563:	DWORD dwProvSubType ; 
	564:	DWORD dwProvCapabilities ; 
	565:	DWORD dwSettableParams ; 
	566:	DWORD dwSettableBaud ; 
	567:	WORD wSettableData ; 
	568:	WORD wSettableStopParity ; 
	569:	DWORD dwCurrentTxQueue ; 
	570:	DWORD dwCurrentRxQueue ; 
	571:	DWORD dwProvSpec1 ; 
	572:	DWORD dwProvSpec2 ; 
	573:	WCHAR wcProvChar [ 1 ] ; 
	574:	} COMMPROP , * LPCOMMPROP ; 
	575:	typedef struct _COMMTIMEOUTS { 
	576:	DWORD ReadIntervalTimeout ; 
	577:	DWORD ReadTotalTimeoutMultiplier ; 
	578:	DWORD ReadTotalTimeoutConstant ; 
	579:	DWORD WriteTotalTimeoutMultiplier ; 
	580:	DWORD WriteTotalTimeoutConstant ; 
	581:	} COMMTIMEOUTS , * LPCOMMTIMEOUTS ; 
	582:	typedef struct _COMSTAT { 
	583:	DWORD fCtsHold : 1 ; 
	584:	DWORD fDsrHold : 1 ; 
	585:	DWORD fRlsdHold : 1 ; 
	586:	DWORD fXoffHold : 1 ; 
	587:	DWORD fXoffSent : 1 ; 
	588:	DWORD fEof : 1 ; 
	589:	DWORD fTxim : 1 ; 
	590:	DWORD fReserved : 25 ; 
	591:	DWORD cbInQue ; 
	592:	DWORD cbOutQue ; 
	593:	} COMSTAT , * LPCOMSTAT ; 
	594:	typedef DWORD ( * LPTHREAD_START_ROUTINE ) ( LPVOID ) ; 
	595:	typedef struct _CREATE_PROCESS_DEBUG_INFO { 
	596:	HANDLE hFile ; 
	597:	HANDLE hProcess ; 
	598:	HANDLE hThread ; 
	599:	LPVOID lpBaseOfImage ; 
	600:	DWORD dwDebugInfoFileOffset ; 
	601:	DWORD nDebugInfoSize ; 
	602:	LPVOID lpThreadLocalBase ; 
	603:	LPTHREAD_START_ROUTINE lpStartAddress ; 
	604:	LPVOID lpImageName ; 
	605:	WORD fUnicode ; 
	606:	} CREATE_PROCESS_DEBUG_INFO , * LPCREATE_PROCESS_DEBUG_INFO ; 
	607:	typedef struct _CREATE_THREAD_DEBUG_INFO { 
	608:	HANDLE hThread ; 
	609:	LPVOID lpThreadLocalBase ; 
	610:	LPTHREAD_START_ROUTINE lpStartAddress ; 
	611:	} CREATE_THREAD_DEBUG_INFO , * LPCREATE_THREAD_DEBUG_INFO ; 
	612:	typedef struct _EXCEPTION_DEBUG_INFO { 
	613:	EXCEPTION_RECORD ExceptionRecord ; 
	614:	DWORD dwFirstChance ; 
	615:	} EXCEPTION_DEBUG_INFO , * LPEXCEPTION_DEBUG_INFO ; 
	616:	typedef struct _EXIT_THREAD_DEBUG_INFO { 
	617:	DWORD dwExitCode ; 
	618:	} EXIT_THREAD_DEBUG_INFO , * LPEXIT_THREAD_DEBUG_INFO ; 
	619:	typedef struct _EXIT_PROCESS_DEBUG_INFO { 
	620:	DWORD dwExitCode ; 
	621:	} EXIT_PROCESS_DEBUG_INFO , * LPEXIT_PROCESS_DEBUG_INFO ; 
	622:	typedef struct _LOAD_DLL_DEBUG_INFO { 
	623:	HANDLE hFile ; 
	624:	LPVOID lpBaseOfDll ; 
	625:	DWORD dwDebugInfoFileOffset ; 
	626:	DWORD nDebugInfoSize ; 
	627:	LPVOID lpImageName ; 
	628:	WORD fUnicode ; 
	629:	} LOAD_DLL_DEBUG_INFO , * LPLOAD_DLL_DEBUG_INFO ; 
	630:	typedef struct _UNLOAD_DLL_DEBUG_INFO { 
	631:	LPVOID lpBaseOfDll ; 
	632:	} UNLOAD_DLL_DEBUG_INFO , * LPUNLOAD_DLL_DEBUG_INFO ; 
	633:	typedef struct _OUTPUT_DEBUG_STRING_INFO { 
	634:	LPSTR lpDebugStringData ; 
	635:	WORD fUnicode ; 
	636:	WORD nDebugStringLength ; 
	637:	} OUTPUT_DEBUG_STRING_INFO , * LPOUTPUT_DEBUG_STRING_INFO ; 
	638:	typedef struct _RIP_INFO { 
	639:	DWORD dwError ; 
	640:	DWORD dwType ; 
	641:	} RIP_INFO , * LPRIP_INFO ; 
	642:	typedef struct _DEBUG_EVENT { 
	643:	DWORD dwDebugEventCode ; 
	644:	DWORD dwProcessId ; 
	645:	DWORD dwThreadId ; 
	646:	union { 
	647:	EXCEPTION_DEBUG_INFO Exception ; 
	648:	CREATE_THREAD_DEBUG_INFO CreateThread ; 
	649:	CREATE_PROCESS_DEBUG_INFO CreateProcessInfo ; 
	650:	EXIT_THREAD_DEBUG_INFO ExitThread ; 
	651:	EXIT_PROCESS_DEBUG_INFO ExitProcess ; 
	652:	LOAD_DLL_DEBUG_INFO LoadDll ; 
	653:	UNLOAD_DLL_DEBUG_INFO UnloadDll ; 
	654:	OUTPUT_DEBUG_STRING_INFO DebugString ; 
	655:	RIP_INFO RipInfo ; 
	656:	} u ; 
	657:	} DEBUG_EVENT , * LPDEBUG_EVENT ; 
	658:	typedef struct _OVERLAPPED { 
	659:	DWORD Internal ; 
	660:	DWORD InternalHigh ; 
	661:	DWORD Offset ; 
	662:	DWORD OffsetHigh ; 
	663:	HANDLE hEvent ; 
	664:	} OVERLAPPED , * POVERLAPPED , * LPOVERLAPPED ; 
	665:	typedef struct _STARTUPINFOA { 
	666:	DWORD cb ; 
	667:	LPSTR lpReserved ; 
	668:	LPSTR lpDesktop ; 
	669:	LPSTR lpTitle ; 
	670:	DWORD dwX ; 
	671:	DWORD dwY ; 
	672:	DWORD dwXSize ; 
	673:	DWORD dwYSize ; 
	674:	DWORD dwXCountChars ; 
	675:	DWORD dwYCountChars ; 
	676:	DWORD dwFillAttribute ; 
	677:	DWORD dwFlags ; 
	678:	WORD wShowWindow ; 
	679:	WORD cbReserved2 ; 
	680:	PBYTE lpReserved2 ; 
	681:	HANDLE hStdInput ; 
	682:	HANDLE hStdOutput ; 
	683:	HANDLE hStdError ; 
	684:	} STARTUPINFOA , * LPSTARTUPINFOA ; 
	685:	typedef struct _STARTUPINFOW { 
	686:	DWORD cb ; 
	687:	LPWSTR lpReserved ; 
	688:	LPWSTR lpDesktop ; 
	689:	LPWSTR lpTitle ; 
	690:	DWORD dwX ; 
	691:	DWORD dwY ; 
	692:	DWORD dwXSize ; 
	693:	DWORD dwYSize ; 
	694:	DWORD dwXCountChars ; 
	695:	DWORD dwYCountChars ; 
	696:	DWORD dwFillAttribute ; 
	697:	DWORD dwFlags ; 
	698:	WORD wShowWindow ; 
	699:	WORD cbReserved2 ; 
	700:	PBYTE lpReserved2 ; 
	701:	HANDLE hStdInput ; 
	702:	HANDLE hStdOutput ; 
	703:	HANDLE hStdError ; 
	704:	} STARTUPINFOW , * LPSTARTUPINFOW ; 
	705:	typedef struct _PROCESS_INFORMATION { 
	706:	HANDLE hProcess ; 
	707:	HANDLE hThread ; 
	708:	DWORD dwProcessId ; 
	709:	DWORD dwThreadId ; 
	710:	} PROCESS_INFORMATION , * LPPROCESS_INFORMATION ; 
	711:	typedef struct _CRITICAL_SECTION_DEBUG { 
	712:	WORD Type ; 
	713:	WORD CreatorBackTraceIndex ; 
	714:	struct _CRITICAL_SECTION * CriticalSection ; 
	715:	LIST_ENTRY ProcessLocksList ; 
	716:	DWORD EntryCount ; 
	717:	DWORD ContentionCount ; 
	718:	DWORD Spare [ 2 ] ; 
	719:	} CRITICAL_SECTION_DEBUG , * PCRITICAL_SECTION_DEBUG ; 
	720:	typedef struct _CRITICAL_SECTION { 
	721:	PCRITICAL_SECTION_DEBUG DebugInfo ; 
	722:	LONG LockCount ; 
	723:	LONG RecursionCount ; 
	724:	HANDLE OwningThread ; 
	725:	HANDLE LockSemaphore ; 
	726:	DWORD SpinCount ; 
	727:	} CRITICAL_SECTION , * PCRITICAL_SECTION , * LPCRITICAL_SECTION ; 
	728:	typedef struct _SYSTEMTIME { 
	729:	WORD wYear ; 
	730:	WORD wMonth ; 
	731:	WORD wDayOfWeek ; 
	732:	WORD wDay ; 
	733:	WORD wHour ; 
	734:	WORD wMinute ; 
	735:	WORD wSecond ; 
	736:	WORD wMilliseconds ; 
	737:	} SYSTEMTIME , * LPSYSTEMTIME ; 
	738:	typedef struct _WIN32_FILE_ATTRIBUTE_DATA { 
	739:	DWORD dwFileAttributes ; 
	740:	FILETIME ftCreationTime ; 
	741:	FILETIME ftLastAccessTime ; 
	742:	FILETIME ftLastWriteTime ; 
	743:	DWORD nFileSizeHigh ; 
	744:	DWORD nFileSizeLow ; 
	745:	} WIN32_FILE_ATTRIBUTE_DATA , * LPWIN32_FILE_ATTRIBUTE_DATA ; 
	746:	typedef struct _WIN32_FIND_DATAA { 
	747:	DWORD dwFileAttributes ; 
	748:	FILETIME ftCreationTime ; 
	749:	FILETIME ftLastAccessTime ; 
	750:	FILETIME ftLastWriteTime ; 
	751:	DWORD nFileSizeHigh ; 
	752:	DWORD nFileSizeLow ; 
	753:	DWORD dwReserved0 ; 
	754:	DWORD dwReserved1 ; 
	755:	CHAR cFileName [ 260 ] ; 
	756:	CHAR cAlternateFileName [ 14 ] ; 
	757:	} WIN32_FIND_DATAA , * LPWIN32_FIND_DATAA ; 
	758:	typedef struct _WIN32_FIND_DATAW { 
	759:	DWORD dwFileAttributes ; 
	760:	FILETIME ftCreationTime ; 
	761:	FILETIME ftLastAccessTime ; 
	762:	FILETIME ftLastWriteTime ; 
	763:	DWORD nFileSizeHigh ; 
	764:	DWORD nFileSizeLow ; 
	765:	DWORD dwReserved0 ; 
	766:	DWORD dwReserved1 ; 
	767:	WCHAR cFileName [ 260 ] ; 
	768:	WCHAR cAlternateFileName [ 14 ] ; 
	769:	} WIN32_FIND_DATAW , * LPWIN32_FIND_DATAW ; 
	770:	typedef struct _WIN32_STREAM_ID { 
	771:	DWORD dwStreamId ; 
	772:	DWORD dwStreamAttributes ; 
	773:	LARGE_INTEGER Size ; 
	774:	DWORD dwStreamNameSize ; 
	775:	WCHAR cStreamName [ 1 ] ; 
	776:	} WIN32_STREAM_ID ; 
	777:	typedef enum _FINDEX_INFO_LEVELS { 
	778:	FindExInfoStandard , 
	779:	FindExInfoMaxInfoLevel 
	780:	} FINDEX_INFO_LEVELS ; 
	781:	typedef enum _FINDEX_SEARCH_OPS { 
	782:	FindExSearchNameMatch , 
	783:	FindExSearchLimitToDirectories , 
	784:	FindExSearchLimitToDevices , 
	785:	FindExSearchMaxSearchOp 
	786:	} FINDEX_SEARCH_OPS ; 
	787:	typedef enum _ACL_INFORMATION_CLASS { 
	788:	AclRevisionInformation = 1 , 
	789:	AclSizeInformation 
	790:	} ACL_INFORMATION_CLASS ; 
	791:	typedef struct tagHW_PROFILE_INFOA { 
	792:	DWORD dwDockInfo ; 
	793:	CHAR szHwProfileGuid [ 39 ] ; 
	794:	CHAR szHwProfileName [ 80 ] ; 
	795:	} HW_PROFILE_INFOA , * LPHW_PROFILE_INFOA ; 
	796:	typedef struct tagHW_PROFILE_INFOW { 
	797:	DWORD dwDockInfo ; 
	798:	WCHAR szHwProfileGuid [ 39 ] ; 
	799:	WCHAR szHwProfileName [ 80 ] ; 
	800:	} HW_PROFILE_INFOW , * LPHW_PROFILE_INFOW ; 
	801:	typedef enum _GET_FILEEX_INFO_LEVELS { 
	802:	GetFileExInfoStandard , 
	803:	GetFileExMaxInfoLevel 
	804:	} GET_FILEEX_INFO_LEVELS ; 
	805:	typedef struct _SYSTEM_INFO { 
	806:	union { 
	807:	DWORD dwOemId ; 
	808:	struct { 
	809:	WORD wProcessorArchitecture ; 
	810:	WORD wReserved ; 
	811:	} s ; 
	812:	} u ; 
	813:	DWORD dwPageSize ; 
	814:	PVOID lpMinimumApplicationAddress ; 
	815:	PVOID lpMaximumApplicationAddress ; 
	816:	DWORD dwActiveProcessorMask ; 
	817:	DWORD dwNumberOfProcessors ; 
	818:	DWORD dwProcessorType ; 
	819:	DWORD dwAllocationGranularity ; 
	820:	WORD wProcessorLevel ; 
	821:	WORD wProcessorRevision ; 
	822:	} SYSTEM_INFO , * LPSYSTEM_INFO ; 
	823:	typedef struct _SYSTEM_POWER_STATUS { 
	824:	BYTE ACLineStatus ; 
	825:	BYTE BatteryFlag ; 
	826:	BYTE BatteryLifePercent ; 
	827:	BYTE Reserved1 ; 
	828:	DWORD BatteryLifeTime ; 
	829:	DWORD BatteryFullLifeTime ; 
	830:	} SYSTEM_POWER_STATUS , * LPSYSTEM_POWER_STATUS ; 
	831:	typedef struct _TIME_ZONE_INFORMATION { 
	832:	LONG Bias ; 
	833:	WCHAR StandardName [ 32 ] ; 
	834:	SYSTEMTIME StandardDate ; 
	835:	LONG StandardBias ; 
	836:	WCHAR DaylightName [ 32 ] ; 
	837:	SYSTEMTIME DaylightDate ; 
	838:	LONG DaylightBias ; 
	839:	} TIME_ZONE_INFORMATION , * LPTIME_ZONE_INFORMATION ; 
	840:	typedef struct _MEMORYSTATUS { 
	841:	DWORD dwLength ; 
	842:	DWORD dwMemoryLoad ; 
	843:	DWORD dwTotalPhys ; 
	844:	DWORD dwAvailPhys ; 
	845:	DWORD dwTotalPageFile ; 
	846:	DWORD dwAvailPageFile ; 
	847:	DWORD dwTotalVirtual ; 
	848:	DWORD dwAvailVirtual ; 
	849:	} MEMORYSTATUS , * LPMEMORYSTATUS ; 
	850:	typedef struct _LDT_ENTRY { 
	851:	WORD LimitLow ; 
	852:	WORD BaseLow ; 
	853:	union { 
	854:	struct { 
	855:	BYTE BaseMid ; 
	856:	BYTE Flags1 ; 
	857:	BYTE Flags2 ; 
	858:	BYTE BaseHi ; 
	859:	} Bytes ; 
	860:	struct { 
	861:	DWORD BaseMid : 8 ; 
	862:	DWORD Type : 5 ; 
	863:	DWORD Dpl : 2 ; 
	864:	DWORD Pres : 1 ; 
	865:	DWORD LimitHi : 4 ; 
	866:	DWORD Sys : 1 ; 
	867:	DWORD Reserved_0 : 1 ; 
	868:	DWORD Default_Big : 1 ; 
	869:	DWORD Granularity : 1 ; 
	870:	DWORD BaseHi : 8 ; 
	871:	} Bits ; 
	872:	} HighWord ; 
	873:	} LDT_ENTRY , * PLDT_ENTRY , * LPLDT_ENTRY ; 
	874:	typedef struct _PROCESS_HEAP_ENTRY { 
	875:	PVOID lpData ; 
	876:	DWORD cbData ; 
	877:	BYTE cbOverhead ; 
	878:	BYTE iRegionIndex ; 
	879:	WORD wFlags ; 
	880:	union { 
	881:	struct { 
	882:	HANDLE hMem ; 
	883:	DWORD dwReserved [ 3 ] ; 
	884:	} Block ; 
	885:	struct { 
	886:	DWORD dwCommittedSize ; 
	887:	DWORD dwUnCommittedSize ; 
	888:	LPVOID lpFirstBlock ; 
	889:	LPVOID lpLastBlock ; 
	890:	} Region ; 
	891:	} u ; 
	892:	} PROCESS_HEAP_ENTRY , * LPPROCESS_HEAP_ENTRY ; 
	893:	typedef struct _OFSTRUCT { 
	894:	BYTE cBytes ; 
	895:	BYTE fFixedDisk ; 
	896:	WORD nErrCode ; 
	897:	WORD Reserved1 ; 
	898:	WORD Reserved2 ; 
	899:	CHAR szPathName [ 128 ] ; 
	900:	} OFSTRUCT , * LPOFSTRUCT , * POFSTRUCT ; 
	901:	typedef struct _WIN_CERTIFICATE { 
	902:	DWORD dwLength ; 
	903:	WORD wRevision ; 
	904:	WORD wCertificateType ; 
	905:	BYTE bCertificate [ 1 ] ; 
	906:	} WIN_CERTIFICATE , * LPWIN_CERTIFICATE ; 
	907:	typedef DWORD ( * LPPROGRESS_ROUTINE ) ( LARGE_INTEGER , LARGE_INTEGER , LARGE_INTEGER , LARGE_INTEGER , DWORD , DWORD , HANDLE , HANDLE , LPVOID ) ; 
	908:	typedef void ( * LPFIBER_START_ROUTINE ) ( PVOID ) ; 
	909:	typedef BOOL ( * ENUMRESLANGPROC ) ( HMODULE , LPCTSTR , LPCTSTR , WORD , LONG ) ; 
	910:	typedef BOOL ( * ENUMRESNAMEPROC ) ( HMODULE , LPCTSTR , LPTSTR , LONG ) ; 
	911:	typedef BOOL ( * ENUMRESTYPEPROC ) ( HMODULE , LPTSTR , LONG ) ; 
	912:	typedef void ( * LPOVERLAPPED_COMPLETION_ROUTINE ) ( DWORD , DWORD , LPOVERLAPPED ) ; 
	913:	typedef LONG ( * PTOP_LEVEL_EXCEPTION_FILTER ) ( LPEXCEPTION_POINTERS ) ; 
	914:	typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER ; 
	915:	typedef void ( * PAPCFUNC ) ( DWORD ) ; 
	916:	typedef void ( * PTIMERAPCROUTINE ) ( PVOID , DWORD , DWORD ) ; 
	920:	int WinMain ( HINSTANCE , HINSTANCE , LPSTR , int ) ; 
	924:	int wWinMain ( HINSTANCE , HINSTANCE , LPWSTR , int ) ; 
	925:	long _hread ( HFILE , LPVOID , long ) ; 
	926:	long _hwrite ( HFILE , LPCSTR , long ) ; 
	927:	HFILE _lclose ( HFILE ) ; 
	928:	HFILE _lcreat ( LPCSTR , int ) ; 
	929:	LONG _llseek ( HFILE , LONG , int ) ; 
	930:	HFILE _lopen ( LPCSTR , int ) ; 
	931:	UINT _lread ( HFILE , LPVOID , UINT ) ; 
	932:	UINT _lwrite ( HFILE , LPCSTR , UINT ) ; 
	934:	BOOL AccessCheck ( PSECURITY_DESCRIPTOR , HANDLE , DWORD , PGENERIC_MAPPING , PPRIVILEGE_SET , PDWORD , PDWORD , PBOOL ) ; 
	935:	BOOL AccessCheckAndAuditAlarmA ( LPCSTR , LPVOID , LPSTR , LPSTR , PSECURITY_DESCRIPTOR , DWORD , PGENERIC_MAPPING , BOOL , PDWORD , PBOOL , PBOOL ) ; 
	936:	BOOL AccessCheckAndAuditAlarmW ( LPCWSTR , LPVOID , LPWSTR , LPWSTR , PSECURITY_DESCRIPTOR , DWORD , PGENERIC_MAPPING , BOOL , PDWORD , PBOOL , PBOOL ) ; 
	937:	BOOL AddAccessAllowedAce ( PACL , DWORD , DWORD , PSID ) ; 
	938:	BOOL AddAccessDeniedAce ( PACL , DWORD , DWORD , PSID ) ; 
	939:	BOOL AddAce ( PACL , DWORD , DWORD , PVOID , DWORD ) ; 
	940:	ATOM AddAtomA ( LPCSTR ) ; 
	941:	ATOM AddAtomW ( LPCWSTR ) ; 
	942:	BOOL AddAuditAccessAce ( PACL , DWORD , DWORD , PSID , BOOL , BOOL ) ; 
	943:	BOOL AdjustTokenGroups ( HANDLE , BOOL , PTOKEN_GROUPS , DWORD , PTOKEN_GROUPS , PDWORD ) ; 
	944:	BOOL AdjustTokenPrivileges ( HANDLE , BOOL , PTOKEN_PRIVILEGES , DWORD , PTOKEN_PRIVILEGES , PDWORD ) ; 
	945:	BOOL AllocateAndInitializeSid ( PSID_IDENTIFIER_AUTHORITY , BYTE , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , PSID * ) ; 
	946:	BOOL AllocateLocallyUniqueId ( PLUID ) ; 
	947:	BOOL AreAllAccessesGranted ( DWORD , DWORD ) ; 
	948:	BOOL AreAnyAccessesGranted ( DWORD , DWORD ) ; 
	949:	BOOL AreFileApisANSI ( void ) ; 
	950:	BOOL BackupEventLogA ( HANDLE , LPCSTR ) ; 
	951:	BOOL BackupEventLogW ( HANDLE , LPCWSTR ) ; 
	952:	BOOL BackupRead ( HANDLE , PBYTE , DWORD , PDWORD , BOOL , BOOL , PVOID ) ; 
	953:	BOOL BackupSeek ( HANDLE , DWORD , DWORD , PDWORD , PDWORD , PVOID ) ; 
	954:	BOOL BackupWrite ( HANDLE , PBYTE , DWORD , PDWORD , BOOL , BOOL , PVOID ) ; 
	955:	BOOL Beep ( DWORD , DWORD ) ; 
	956:	HANDLE BeginUpdateResourceA ( LPCSTR , BOOL ) ; 
	957:	HANDLE BeginUpdateResourceW ( LPCWSTR , BOOL ) ; 
	958:	BOOL BuildCommDCBA ( LPCSTR , LPDCB ) ; 
	959:	BOOL BuildCommDCBW ( LPCWSTR , LPDCB ) ; 
	960:	BOOL BuildCommDCBAndTimeoutsA ( LPCSTR , LPDCB , LPCOMMTIMEOUTS ) ; 
	961:	BOOL BuildCommDCBAndTimeoutsW ( LPCWSTR , LPDCB , LPCOMMTIMEOUTS ) ; 
	962:	BOOL CallNamedPipeA ( LPCSTR , PVOID , DWORD , PVOID , DWORD , PDWORD , DWORD ) ; 
	963:	BOOL CallNamedPipeW ( LPCWSTR , PVOID , DWORD , PVOID , DWORD , PDWORD , DWORD ) ; 
	964:	BOOL CancelIo ( HANDLE ) ; 
	965:	BOOL CancelWaitableTimer ( HANDLE ) ; 
	966:	BOOL ClearCommBreak ( HANDLE ) ; 
	967:	BOOL ClearCommError ( HANDLE , PDWORD , LPCOMSTAT ) ; 
	968:	BOOL ClearEventLogA ( HANDLE , LPCSTR ) ; 
	969:	BOOL ClearEventLogW ( HANDLE , LPCWSTR ) ; 
	970:	BOOL CloseEventLog ( HANDLE ) ; 
	971:	BOOL CloseHandle ( HANDLE ) ; 
	972:	BOOL CommConfigDialogA ( LPCSTR , HWND , LPCOMMCONFIG ) ; 
	973:	BOOL CommConfigDialogW ( LPCWSTR , HWND , LPCOMMCONFIG ) ; 
	974:	LONG CompareFileTime ( const FILETIME * , const FILETIME * ) ; 
	975:	BOOL ConnectNamedPipe ( HANDLE , LPOVERLAPPED ) ; 
	976:	BOOL ContinueDebugEvent ( DWORD , DWORD , DWORD ) ; 
	977:	PVOID ConvertThreadToFiber ( PVOID ) ; 
	978:	BOOL CopyFileA ( LPCSTR , LPCSTR , BOOL ) ; 
	979:	BOOL CopyFileW ( LPCWSTR , LPCWSTR , BOOL ) ; 
	980:	BOOL CopyFileExA ( LPCSTR , LPCSTR , LPPROGRESS_ROUTINE , LPVOID , LPBOOL , DWORD ) ; 
	981:	BOOL CopyFileExW ( LPCWSTR , LPCWSTR , LPPROGRESS_ROUTINE , LPVOID , LPBOOL , DWORD ) ; 
	990:	BOOL CopySid ( DWORD , PSID , PSID ) ; 
	991:	BOOL CreateDirectoryA ( LPCSTR , LPSECURITY_ATTRIBUTES ) ; 
	992:	BOOL CreateDirectoryW ( LPCWSTR , LPSECURITY_ATTRIBUTES ) ; 
	993:	BOOL CreateDirectoryExA ( LPCSTR , LPCSTR , LPSECURITY_ATTRIBUTES ) ; 
	994:	BOOL CreateDirectoryExW ( LPCWSTR , LPCWSTR , LPSECURITY_ATTRIBUTES ) ; 
	995:	HANDLE CreateEventA ( LPSECURITY_ATTRIBUTES , BOOL , BOOL , LPCSTR ) ; 
	996:	HANDLE CreateEventW ( LPSECURITY_ATTRIBUTES , BOOL , BOOL , LPCWSTR ) ; 
	997:	LPVOID CreateFiber ( DWORD , LPFIBER_START_ROUTINE , LPVOID ) ; 
	998:	HANDLE CreateFileA ( LPCSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES , DWORD , DWORD , HANDLE ) ; 
	999:	HANDLE CreateFileW ( LPCWSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES , DWORD , DWORD , HANDLE ) ; 
	1000:	HANDLE CreateFileMappingA ( HANDLE , LPSECURITY_ATTRIBUTES , DWORD , DWORD , DWORD , LPCSTR ) ; 
	1001:	HANDLE CreateFileMappingW ( HANDLE , LPSECURITY_ATTRIBUTES , DWORD , DWORD , DWORD , LPCWSTR ) ; 
	1002:	HANDLE CreateHardLinkA ( LPCSTR , LPCSTR , LPSECURITY_ATTRIBUTES ) ; 
	1003:	HANDLE CreateHardLinkW ( LPCWSTR , LPCWSTR , LPSECURITY_ATTRIBUTES ) ; 
	1004:	HANDLE CreateIoCompletionPort ( HANDLE , HANDLE , DWORD , DWORD ) ; 
	1005:	HANDLE CreateMailslotA ( LPCSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES ) ; 
	1006:	HANDLE CreateMailslotW ( LPCWSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES ) ; 
	1007:	HANDLE CreateMutexA ( LPSECURITY_ATTRIBUTES , BOOL , LPCSTR ) ; 
	1008:	HANDLE CreateMutexW ( LPSECURITY_ATTRIBUTES , BOOL , LPCWSTR ) ; 
	1009:	HANDLE CreateNamedPipeA ( LPCSTR , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , LPSECURITY_ATTRIBUTES ) ; 
	1010:	HANDLE CreateNamedPipeW ( LPCWSTR , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , LPSECURITY_ATTRIBUTES ) ; 
	1011:	BOOL CreatePipe ( PHANDLE , PHANDLE , LPSECURITY_ATTRIBUTES , DWORD ) ; 
	1012:	BOOL CreatePrivateObjectSecurity ( PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR * , BOOL , HANDLE , PGENERIC_MAPPING ) ; 
	1013:	BOOL CreateProcessA ( LPCSTR , LPSTR , LPSECURITY_ATTRIBUTES , LPSECURITY_ATTRIBUTES , BOOL , DWORD , PVOID , LPCSTR , LPSTARTUPINFOA , LPPROCESS_INFORMATION ) ; 
	1014:	BOOL CreateProcessW ( LPCWSTR , LPWSTR , LPSECURITY_ATTRIBUTES , LPSECURITY_ATTRIBUTES , BOOL , DWORD , PVOID , LPCWSTR , LPSTARTUPINFOW , LPPROCESS_INFORMATION ) ; 
	1015:	BOOL CreateProcessAsUserA ( HANDLE , LPCSTR , LPSTR , LPSECURITY_ATTRIBUTES , LPSECURITY_ATTRIBUTES , BOOL , DWORD , PVOID , LPCSTR , LPSTARTUPINFOA , LPPROCESS_INFORMATION ) ; 
	1016:	BOOL CreateProcessAsUserW ( HANDLE , LPCWSTR , LPWSTR , LPSECURITY_ATTRIBUTES , LPSECURITY_ATTRIBUTES , BOOL , DWORD , PVOID , LPCWSTR , LPSTARTUPINFOW , LPPROCESS_INFORMATION ) ; 
	1017:	HANDLE CreateRemoteThread ( HANDLE , LPSECURITY_ATTRIBUTES , DWORD , LPTHREAD_START_ROUTINE , LPVOID , DWORD , LPDWORD ) ; 
	1018:	HANDLE CreateSemaphoreA ( LPSECURITY_ATTRIBUTES , LONG , LONG , LPCSTR ) ; 
	1019:	HANDLE CreateSemaphoreW ( LPSECURITY_ATTRIBUTES , LONG , LONG , LPCWSTR ) ; 
	1020:	DWORD CreateTapePartition ( HANDLE , DWORD , DWORD , DWORD ) ; 
	1021:	HANDLE CreateThread ( LPSECURITY_ATTRIBUTES , DWORD , LPTHREAD_START_ROUTINE , PVOID , DWORD , PDWORD ) ; 
	1022:	HANDLE CreateWaitableTimerA ( LPSECURITY_ATTRIBUTES , BOOL , LPCSTR ) ; 
	1023:	HANDLE CreateWaitableTimerW ( LPSECURITY_ATTRIBUTES , BOOL , LPCWSTR ) ; 
	1024:	BOOL DebugActiveProcess ( DWORD ) ; 
	1025:	void DebugBreak ( void ) ; 
	1026:	BOOL DefineDosDeviceA ( DWORD , LPCSTR , LPCSTR ) ; 
	1027:	BOOL DefineDosDeviceW ( DWORD , LPCWSTR , LPCWSTR ) ; 
	1029:	BOOL DeleteAce ( PACL , DWORD ) ; 
	1030:	ATOM DeleteAtom ( ATOM ) ; 
	1031:	void DeleteCriticalSection ( PCRITICAL_SECTION ) ; 
	1032:	void DeleteFiber ( PVOID ) ; 
	1033:	BOOL DeleteFileA ( LPCSTR ) ; 
	1034:	BOOL DeleteFileW ( LPCWSTR ) ; 
	1035:	BOOL DeregisterEventSource ( HANDLE ) ; 
	1036:	BOOL DestroyPrivateObjectSecurity ( PSECURITY_DESCRIPTOR * ) ; 
	1037:	BOOL DeviceIoControl ( HANDLE , DWORD , PVOID , DWORD , PVOID , DWORD , PDWORD , POVERLAPPED ) ; 
	1038:	BOOL DisableThreadLibraryCalls ( HMODULE ) ; 
	1039:	BOOL DisconnectNamedPipe ( HANDLE ) ; 
	1040:	BOOL DosDateTimeToFileTime ( WORD , WORD , LPFILETIME ) ; 
	1041:	BOOL DuplicateHandle ( HANDLE , HANDLE , HANDLE , PHANDLE , DWORD , BOOL , DWORD ) ; 
	1042:	BOOL DuplicateToken ( HANDLE , SECURITY_IMPERSONATION_LEVEL , PHANDLE ) ; 
	1043:	BOOL DuplicateTokenEx ( HANDLE , DWORD , LPSECURITY_ATTRIBUTES , SECURITY_IMPERSONATION_LEVEL , TOKEN_TYPE , PHANDLE ) ; 
	1044:	BOOL EndUpdateResourceA ( HANDLE , BOOL ) ; 
	1045:	BOOL EndUpdateResourceW ( HANDLE , BOOL ) ; 
	1046:	void EnterCriticalSection ( LPCRITICAL_SECTION ) ; 
	1047:	BOOL EnumResourceLanguagesA ( HINSTANCE , LPCSTR , LPCSTR , ENUMRESLANGPROC , LONG ) ; 
	1048:	BOOL EnumResourceLanguagesW ( HINSTANCE , LPCWSTR , LPCWSTR , ENUMRESLANGPROC , LONG ) ; 
	1049:	BOOL EnumResourceNamesA ( HINSTANCE , LPCSTR , ENUMRESNAMEPROC , LONG ) ; 
	1050:	BOOL EnumResourceNamesW ( HINSTANCE , LPCWSTR , ENUMRESNAMEPROC , LONG ) ; 
	1051:	BOOL EnumResourceTypesA ( HINSTANCE , ENUMRESTYPEPROC , LONG ) ; 
	1052:	BOOL EnumResourceTypesW ( HINSTANCE , ENUMRESTYPEPROC , LONG ) ; 
	1053:	BOOL EqualPrefixSid ( PSID , PSID ) ; 
	1054:	BOOL EqualSid ( PSID , PSID ) ; 
	1055:	DWORD EraseTape ( HANDLE , DWORD , BOOL ) ; 
	1056:	BOOL EscapeCommFunction ( HANDLE , DWORD ) ; 
	1057:	void ExitProcess ( UINT ) ; 
	1058:	void ExitThread ( DWORD ) ; 
	1059:	DWORD ExpandEnvironmentStringsA ( LPCSTR , LPSTR , DWORD ) ; 
	1060:	DWORD ExpandEnvironmentStringsW ( LPCWSTR , LPWSTR , DWORD ) ; 
	1061:	void FatalAppExitA ( UINT , LPCSTR ) ; 
	1062:	void FatalAppExitW ( UINT , LPCWSTR ) ; 
	1063:	void FatalExit ( int ) ; 
	1064:	BOOL FileTimeToDosDateTime ( const FILETIME * , LPWORD , LPWORD ) ; 
	1065:	BOOL FileTimeToLocalFileTime ( FILETIME * , LPFILETIME ) ; 
	1066:	BOOL FileTimeToSystemTime ( const FILETIME * , LPSYSTEMTIME ) ; 
	1067:	ATOM FindAtomA ( LPCSTR ) ; 
	1068:	ATOM FindAtomW ( LPCWSTR ) ; 
	1069:	BOOL FindClose ( HANDLE ) ; 
	1070:	BOOL FindCloseChangeNotification ( HANDLE ) ; 
	1071:	HANDLE FindFirstChangeNotificationA ( LPCSTR , BOOL , DWORD ) ; 
	1072:	HANDLE FindFirstChangeNotificationW ( LPCWSTR , BOOL , DWORD ) ; 
	1073:	HANDLE FindFirstFileA ( LPCSTR , LPWIN32_FIND_DATAA ) ; 
	1074:	HANDLE FindFirstFileW ( LPCWSTR , LPWIN32_FIND_DATAW ) ; 
	1075:	HANDLE FindFirstFileExA ( LPCSTR , FINDEX_INFO_LEVELS , PVOID , FINDEX_SEARCH_OPS , PVOID , DWORD ) ; 
	1076:	HANDLE FindFirstFileExW ( LPCWSTR , FINDEX_INFO_LEVELS , PVOID , FINDEX_SEARCH_OPS , PVOID , DWORD ) ; 
	1077:	BOOL FindFirstFreeAce ( PACL , PVOID * ) ; 
	1078:	BOOL FindNextChangeNotification ( HANDLE ) ; 
	1079:	BOOL FindNextFileA ( HANDLE , LPWIN32_FIND_DATAA ) ; 
	1080:	BOOL FindNextFileW ( HANDLE , LPWIN32_FIND_DATAW ) ; 
	1081:	HRSRC FindResourceA ( HMODULE , LPCSTR , LPCSTR ) ; 
	1082:	HRSRC FindResourceW ( HINSTANCE , LPCWSTR , LPCWSTR ) ; 
	1083:	HRSRC FindResourceExA ( HINSTANCE , LPCSTR , LPCSTR , WORD ) ; 
	1084:	HRSRC FindResourceExW ( HINSTANCE , LPCWSTR , LPCWSTR , WORD ) ; 
	1085:	BOOL FlushFileBuffers ( HANDLE ) ; 
	1086:	BOOL FlushInstructionCache ( HANDLE , PCVOID , DWORD ) ; 
	1087:	BOOL FlushViewOfFile ( PCVOID , DWORD ) ; 
	1088:	DWORD FormatMessageA ( DWORD , PCVOID , DWORD , DWORD , LPSTR , DWORD , va_list * ) ; 
	1089:	DWORD FormatMessageW ( DWORD , PCVOID , DWORD , DWORD , LPWSTR , DWORD , va_list * ) ; 
	1090:	BOOL FreeEnvironmentStringsA ( LPSTR ) ; 
	1091:	BOOL FreeEnvironmentStringsW ( LPWSTR ) ; 
	1092:	BOOL FreeLibrary ( HMODULE ) ; 
	1093:	void FreeLibraryAndExitThread ( HMODULE , DWORD ) ; 
	1097:	BOOL FreeResource ( HGLOBAL ) ; 
	1099:	PVOID FreeSid ( PSID ) ; 
	1100:	BOOL GetAce ( PACL , DWORD , PVOID ) ; 
	1101:	BOOL GetAclInformation ( PACL , PVOID , DWORD , ACL_INFORMATION_CLASS ) ; 
	1102:	UINT GetAtomNameA ( ATOM , LPSTR , int ) ; 
	1103:	UINT GetAtomNameW ( ATOM , LPWSTR , int ) ; 
	1104:	BOOL GetBinaryTypeA ( LPCSTR , PDWORD ) ; 
	1105:	BOOL GetBinaryTypeW ( LPCWSTR , PDWORD ) ; 
	1106:	LPSTR GetCommandLineA ( void ) ; 
	1107:	LPWSTR GetCommandLineW ( void ) ; 
	1108:	BOOL GetCommConfig ( HANDLE , LPCOMMCONFIG , PDWORD ) ; 
	1109:	BOOL GetCommMask ( HANDLE , PDWORD ) ; 
	1110:	BOOL GetCommModemStatus ( HANDLE , PDWORD ) ; 
	1111:	BOOL GetCommProperties ( HANDLE , LPCOMMPROP ) ; 
	1112:	BOOL GetCommState ( HANDLE , LPDCB ) ; 
	1113:	BOOL GetCommTimeouts ( HANDLE , LPCOMMTIMEOUTS ) ; 
	1114:	DWORD GetCompressedFileSizeA ( LPCSTR , PDWORD ) ; 
	1115:	DWORD GetCompressedFileSizeW ( LPCWSTR , PDWORD ) ; 
	1116:	BOOL GetComputerNameA ( LPSTR , PDWORD ) ; 
	1117:	BOOL GetComputerNameW ( LPWSTR , PDWORD ) ; 
	1118:	DWORD GetCurrentDirectoryA ( DWORD , LPSTR ) ; 
	1119:	DWORD GetCurrentDirectoryW ( DWORD , LPWSTR ) ; 
	1120:	BOOL GetCurrentHwProfileA ( LPHW_PROFILE_INFOA ) ; 
	1121:	BOOL GetCurrentHwProfileW ( LPHW_PROFILE_INFOW ) ; 
	1122:	HANDLE GetCurrentProcess ( void ) ; 
	1123:	DWORD GetCurrentProcessId ( void ) ; 
	1124:	HANDLE GetCurrentThread ( void ) ; 
	1125:	DWORD GetCurrentThreadId ( void ) ; 
	1127:	BOOL GetDefaultCommConfigA ( LPCSTR , LPCOMMCONFIG , PDWORD ) ; 
	1128:	BOOL GetDefaultCommConfigW ( LPCWSTR , LPCOMMCONFIG , PDWORD ) ; 
	1129:	BOOL GetDiskFreeSpaceA ( LPCSTR , PDWORD , PDWORD , PDWORD , PDWORD ) ; 
	1130:	BOOL GetDiskFreeSpaceW ( LPCWSTR , PDWORD , PDWORD , PDWORD , PDWORD ) ; 
	1131:	BOOL GetDiskFreeSpaceExA ( LPCSTR , PULARGE_INTEGER , PULARGE_INTEGER , PULARGE_INTEGER ) ; 
	1132:	BOOL GetDiskFreeSpaceExW ( LPCWSTR , PULARGE_INTEGER , PULARGE_INTEGER , PULARGE_INTEGER ) ; 
	1133:	UINT GetDriveTypeA ( LPCSTR ) ; 
	1134:	UINT GetDriveTypeW ( LPCWSTR ) ; 
	1135:	LPSTR GetEnvironmentStrings ( void ) ; 
	1136:	LPSTR GetEnvironmentStringsA ( void ) ; 
	1137:	LPWSTR GetEnvironmentStringsW ( void ) ; 
	1138:	DWORD GetEnvironmentVariableA ( LPCSTR , LPSTR , DWORD ) ; 
	1139:	DWORD GetEnvironmentVariableW ( LPCWSTR , LPWSTR , DWORD ) ; 
	1140:	BOOL GetExitCodeProcess ( HANDLE , PDWORD ) ; 
	1141:	BOOL GetExitCodeThread ( HANDLE , PDWORD ) ; 
	1142:	DWORD GetFileAttributesA ( LPCSTR ) ; 
	1143:	DWORD GetFileAttributesW ( LPCWSTR ) ; 
	1144:	BOOL GetFileAttributesExA ( LPCSTR , GET_FILEEX_INFO_LEVELS , PVOID ) ; 
	1145:	BOOL GetFileAttributesExW ( LPCWSTR , GET_FILEEX_INFO_LEVELS , PVOID ) ; 
	1146:	BOOL GetFileInformationByHandle ( HANDLE , LPBY_HANDLE_FILE_INFORMATION ) ; 
	1147:	BOOL GetFileSecurityA ( LPCSTR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , PDWORD ) ; 
	1148:	BOOL GetFileSecurityW ( LPCWSTR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , PDWORD ) ; 
	1149:	DWORD GetFileSize ( HANDLE , PDWORD ) ; 
	1150:	BOOL GetFileTime ( HANDLE , LPFILETIME , LPFILETIME , LPFILETIME ) ; 
	1151:	DWORD GetFileType ( HANDLE ) ; 
	1153:	DWORD GetFullPathNameA ( LPCSTR , DWORD , LPSTR , LPSTR * ) ; 
	1154:	DWORD GetFullPathNameW ( LPCWSTR , DWORD , LPWSTR , LPWSTR * ) ; 
	1155:	BOOL GetHandleInformation ( HANDLE , PDWORD ) ; 
	1156:	BOOL GetKernelObjectSecurity ( HANDLE , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , PDWORD ) ; 
	1157:	DWORD GetLengthSid ( PSID ) ; 
	1158:	void GetLocalTime ( LPSYSTEMTIME ) ; 
	1159:	DWORD GetLogicalDrives ( void ) ; 
	1160:	DWORD GetLogicalDriveStringsA ( DWORD , LPSTR ) ; 
	1161:	DWORD GetLogicalDriveStringsW ( DWORD , LPWSTR ) ; 
	1162:	DWORD GetLongPathNameA ( LPCSTR , LPSTR , DWORD ) ; 
	1163:	DWORD GetLongPathNameW ( LPCWSTR , LPWSTR , DWORD ) ; 
	1164:	BOOL GetMailslotInfo ( HANDLE , PDWORD , PDWORD , PDWORD , PDWORD ) ; 
	1165:	DWORD GetModuleFileNameA ( HINSTANCE , LPSTR , DWORD ) ; 
	1166:	DWORD GetModuleFileNameW ( HINSTANCE , LPWSTR , DWORD ) ; 
	1167:	HMODULE GetModuleHandleA ( LPCSTR ) ; 
	1168:	HMODULE GetModuleHandleW ( LPCWSTR ) ; 
	1169:	BOOL GetNamedPipeHandleStateA ( HANDLE , PDWORD , PDWORD , PDWORD , PDWORD , LPSTR , DWORD ) ; 
	1170:	BOOL GetNamedPipeHandleStateW ( HANDLE , PDWORD , PDWORD , PDWORD , PDWORD , LPWSTR , DWORD ) ; 
	1171:	BOOL GetNamedPipeInfo ( HANDLE , PDWORD , PDWORD , PDWORD , PDWORD ) ; 
	1172:	BOOL GetNumberOfEventLogRecords ( HANDLE , PDWORD ) ; 
	1173:	BOOL GetOldestEventLogRecord ( HANDLE , PDWORD ) ; 
	1174:	BOOL GetOverlappedResult ( HANDLE , LPOVERLAPPED , PDWORD , BOOL ) ; 
	1175:	DWORD GetPriorityClass ( HANDLE ) ; 
	1176:	BOOL GetPrivateObjectSecurity ( PSECURITY_DESCRIPTOR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , PDWORD ) ; 
	1177:	UINT GetPrivateProfileIntA ( LPCSTR , LPCSTR , INT , LPCSTR ) ; 
	1178:	UINT GetPrivateProfileIntW ( LPCWSTR , LPCWSTR , INT , LPCWSTR ) ; 
	1179:	DWORD GetPrivateProfileSectionA ( LPCSTR , LPSTR , DWORD , LPCSTR ) ; 
	1180:	DWORD GetPrivateProfileSectionW ( LPCWSTR , LPWSTR , DWORD , LPCWSTR ) ; 
	1181:	DWORD GetPrivateProfileSectionNamesA ( LPSTR , DWORD , LPCSTR ) ; 
	1182:	DWORD GetPrivateProfileSectionNamesW ( LPWSTR , DWORD , LPCWSTR ) ; 
	1183:	DWORD GetPrivateProfileStringA ( LPCSTR , LPCSTR , LPCSTR , LPSTR , DWORD , LPCSTR ) ; 
	1184:	DWORD GetPrivateProfileStringW ( LPCWSTR , LPCWSTR , LPCWSTR , LPWSTR , DWORD , LPCWSTR ) ; 
	1185:	BOOL GetPrivateProfileStructA ( LPCSTR , LPCSTR , PVOID , UINT , LPCSTR ) ; 
	1186:	BOOL GetPrivateProfileStructW ( LPCWSTR , LPCWSTR , PVOID , UINT , LPCWSTR ) ; 
	1187:	FARPROC GetProcAddress ( HINSTANCE , LPCSTR ) ; 
	1188:	BOOL GetProcessAffinityMask ( HANDLE , PDWORD , PDWORD ) ; 
	1189:	HANDLE GetProcessHeap ( void ) ; 
	1190:	DWORD GetProcessHeaps ( DWORD , PHANDLE ) ; 
	1191:	BOOL GetProcessPriorityBoost ( HANDLE , PBOOL ) ; 
	1192:	BOOL GetProcessShutdownParameters ( PDWORD , PDWORD ) ; 
	1193:	BOOL GetProcessTimes ( HANDLE , LPFILETIME , LPFILETIME , LPFILETIME , LPFILETIME ) ; 
	1194:	DWORD GetProcessVersion ( DWORD ) ; 
	1195:	HWINSTA GetProcessWindowStation ( void ) ; 
	1196:	BOOL GetProcessWorkingSetSize ( HANDLE , PDWORD , PDWORD ) ; 
	1197:	UINT GetProfileIntA ( LPCSTR , LPCSTR , INT ) ; 
	1198:	UINT GetProfileIntW ( LPCWSTR , LPCWSTR , INT ) ; 
	1199:	DWORD GetProfileSectionA ( LPCSTR , LPSTR , DWORD ) ; 
	1200:	DWORD GetProfileSectionW ( LPCWSTR , LPWSTR , DWORD ) ; 
	1201:	DWORD GetProfileStringA ( LPCSTR , LPCSTR , LPCSTR , LPSTR , DWORD ) ; 
	1202:	DWORD GetProfileStringW ( LPCWSTR , LPCWSTR , LPCWSTR , LPWSTR , DWORD ) ; 
	1203:	BOOL GetQueuedCompletionStatus ( HANDLE , PDWORD , PDWORD , LPOVERLAPPED * , DWORD ) ; 
	1204:	BOOL GetSecurityDescriptorControl ( PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR_CONTROL , PDWORD ) ; 
	1205:	BOOL GetSecurityDescriptorDacl ( PSECURITY_DESCRIPTOR , LPBOOL , PACL * , LPBOOL ) ; 
	1206:	BOOL GetSecurityDescriptorGroup ( PSECURITY_DESCRIPTOR , PSID * , LPBOOL ) ; 
	1207:	DWORD GetSecurityDescriptorLength ( PSECURITY_DESCRIPTOR ) ; 
	1208:	BOOL GetSecurityDescriptorOwner ( PSECURITY_DESCRIPTOR , PSID * , LPBOOL ) ; 
	1209:	BOOL GetSecurityDescriptorSacl ( PSECURITY_DESCRIPTOR , LPBOOL , PACL * , LPBOOL ) ; 
	1210:	DWORD GetShortPathNameA ( LPCSTR , LPSTR , DWORD ) ; 
	1211:	DWORD GetShortPathNameW ( LPCWSTR , LPWSTR , DWORD ) ; 
	1212:	PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority ( PSID ) ; 
	1213:	DWORD GetSidLengthRequired ( UCHAR ) ; 
	1214:	PDWORD GetSidSubAuthority ( PSID , DWORD ) ; 
	1215:	PUCHAR GetSidSubAuthorityCount ( PSID ) ; 
	1216:	void GetStartupInfoA ( LPSTARTUPINFOA ) ; 
	1217:	void GetStartupInfoW ( LPSTARTUPINFOW ) ; 
	1218:	HANDLE GetStdHandle ( DWORD ) ; 
	1219:	UINT GetSystemDirectoryA ( LPSTR , UINT ) ; 
	1220:	UINT GetSystemDirectoryW ( LPWSTR , UINT ) ; 
	1221:	void GetSystemInfo ( LPSYSTEM_INFO ) ; 
	1222:	BOOL GetSystemPowerStatus ( LPSYSTEM_POWER_STATUS ) ; 
	1223:	void GetSystemTime ( LPSYSTEMTIME ) ; 
	1224:	BOOL GetSystemTimeAdjustment ( PDWORD , PDWORD , PBOOL ) ; 
	1225:	void GetSystemTimeAsFileTime ( LPFILETIME ) ; 
	1226:	DWORD GetTapeParameters ( HANDLE , DWORD , PDWORD , PVOID ) ; 
	1227:	DWORD GetTapePosition ( HANDLE , DWORD , PDWORD , PDWORD , PDWORD ) ; 
	1228:	DWORD GetTapeStatus ( HANDLE ) ; 
	1229:	UINT GetTempFileNameA ( LPCSTR , LPCSTR , UINT , LPSTR ) ; 
	1230:	UINT GetTempFileNameW ( LPCWSTR , LPCWSTR , UINT , LPWSTR ) ; 
	1231:	DWORD GetTempPathA ( DWORD , LPSTR ) ; 
	1232:	DWORD GetTempPathW ( DWORD , LPWSTR ) ; 
	1233:	BOOL GetThreadContext ( HANDLE , LPCONTEXT ) ; 
	1234:	int GetThreadPriority ( HANDLE ) ; 
	1235:	BOOL GetThreadPriorityBoost ( HANDLE , PBOOL ) ; 
	1236:	BOOL GetThreadSelectorEntry ( HANDLE , DWORD , LPLDT_ENTRY ) ; 
	1237:	BOOL GetThreadTimes ( HANDLE , LPFILETIME , LPFILETIME , LPFILETIME , LPFILETIME ) ; 
	1238:	DWORD GetTickCount ( void ) ; 
	1239:	DWORD GetTimeZoneInformation ( LPTIME_ZONE_INFORMATION ) ; 
	1240:	BOOL GetTokenInformation ( HANDLE , TOKEN_INFORMATION_CLASS , PVOID , DWORD , PDWORD ) ; 
	1241:	BOOL GetUserNameA ( LPSTR , PDWORD ) ; 
	1242:	BOOL GetUserNameW ( LPWSTR , PDWORD ) ; 
	1243:	DWORD GetVersion ( void ) ; 
	1244:	BOOL GetVersionExA ( LPOSVERSIONINFOA ) ; 
	1245:	BOOL GetVersionExW ( LPOSVERSIONINFOW ) ; 
	1246:	BOOL GetVolumeInformationA ( LPCSTR , LPSTR , DWORD , PDWORD , PDWORD , PDWORD , LPSTR , DWORD ) ; 
	1247:	BOOL GetVolumeInformationW ( LPCWSTR , LPWSTR , DWORD , PDWORD , PDWORD , PDWORD , LPWSTR , DWORD ) ; 
	1248:	UINT GetWindowsDirectoryA ( LPSTR , UINT ) ; 
	1249:	UINT GetWindowsDirectoryW ( LPWSTR , UINT ) ; 
	1250:	DWORD GetWindowThreadProcessId ( HWND , PDWORD ) ; 
	1251:	ATOM GlobalAddAtomA ( LPCSTR ) ; 
	1252:	ATOM GlobalAddAtomW ( LPCWSTR ) ; 
	1253:	HGLOBAL GlobalAlloc ( UINT , DWORD ) ; 
	1254:	UINT GlobalCompact ( DWORD ) ; 
	1255:	ATOM GlobalDeleteAtom ( ATOM ) ; 
	1256:	HGLOBAL GlobalDiscard ( HGLOBAL ) ; 
	1257:	ATOM GlobalFindAtomA ( LPCSTR ) ; 
	1258:	ATOM GlobalFindAtomW ( LPCWSTR ) ; 
	1259:	void GlobalFix ( HGLOBAL ) ; 
	1260:	UINT GlobalFlags ( HGLOBAL ) ; 
	1261:	HGLOBAL GlobalFree ( HGLOBAL ) ; 
	1262:	UINT GlobalGetAtomNameA ( ATOM , LPSTR , int ) ; 
	1263:	UINT GlobalGetAtomNameW ( ATOM , LPWSTR , int ) ; 
	1264:	HGLOBAL GlobalHandle ( PCVOID ) ; 
	1265:	LPVOID GlobalLock ( HGLOBAL ) ; 
	1266:	void GlobalMemoryStatus ( LPMEMORYSTATUS ) ; 
	1267:	HGLOBAL GlobalReAlloc ( HGLOBAL , DWORD , UINT ) ; 
	1268:	DWORD GlobalSize ( HGLOBAL ) ; 
	1269:	void GlobalUnfix ( HGLOBAL ) ; 
	1270:	BOOL GlobalUnlock ( HGLOBAL ) ; 
	1271:	BOOL GlobalUnWire ( HGLOBAL ) ; 
	1272:	PVOID GlobalWire ( HGLOBAL ) ; 
	1274:	PVOID HeapAlloc ( HANDLE , DWORD , DWORD ) ; 
	1275:	UINT HeapCompact ( HANDLE , DWORD ) ; 
	1276:	HANDLE HeapCreate ( DWORD , DWORD , DWORD ) ; 
	1277:	BOOL HeapDestroy ( HANDLE ) ; 
	1278:	BOOL HeapFree ( HANDLE , DWORD , PVOID ) ; 
	1279:	BOOL HeapLock ( HANDLE ) ; 
	1280:	PVOID HeapReAlloc ( HANDLE , DWORD , PVOID , DWORD ) ; 
	1281:	DWORD HeapSize ( HANDLE , DWORD , PCVOID ) ; 
	1282:	BOOL HeapUnlock ( HANDLE ) ; 
	1283:	BOOL HeapValidate ( HANDLE , DWORD , PCVOID ) ; 
	1284:	BOOL HeapWalk ( HANDLE , LPPROCESS_HEAP_ENTRY ) ; 
	1285:	BOOL ImpersonateLoggedOnUser ( HANDLE ) ; 
	1286:	BOOL ImpersonateNamedPipeClient ( HANDLE ) ; 
	1287:	BOOL ImpersonateSelf ( SECURITY_IMPERSONATION_LEVEL ) ; 
	1288:	BOOL InitAtomTable ( DWORD ) ; 
	1289:	BOOL InitializeAcl ( PACL , DWORD , DWORD ) ; 
	1290:	void InitializeCriticalSection ( LPCRITICAL_SECTION ) ; 
	1295:	BOOL InitializeSecurityDescriptor ( PSECURITY_DESCRIPTOR , DWORD ) ; 
	1296:	BOOL InitializeSid ( PSID , PSID_IDENTIFIER_AUTHORITY , BYTE ) ; 
	1297:	LONG InterlockedCompareExchange ( LPLONG , LONG , LONG ) ; 
	1300:	LONG InterlockedDecrement ( LPLONG ) ; 
	1301:	LONG InterlockedExchange ( LPLONG , LONG ) ; 
	1304:	LONG InterlockedExchangeAdd ( PLONG , LONG ) ; 
	1305:	LONG InterlockedIncrement ( LPLONG ) ; 
	1306:	BOOL IsBadCodePtr ( FARPROC ) ; 
	1307:	BOOL IsBadHugeReadPtr ( PCVOID , UINT ) ; 
	1308:	BOOL IsBadHugeWritePtr ( PVOID , UINT ) ; 
	1309:	BOOL IsBadReadPtr ( PCVOID , UINT ) ; 
	1310:	BOOL IsBadStringPtrA ( LPCSTR , UINT ) ; 
	1311:	BOOL IsBadStringPtrW ( LPCWSTR , UINT ) ; 
	1312:	BOOL IsBadWritePtr ( PVOID , UINT ) ; 
	1313:	BOOL IsDebuggerPresent ( void ) ; 
	1314:	BOOL IsProcessorFeaturePresent ( DWORD ) ; 
	1315:	BOOL IsTextUnicode ( PCVOID , int , LPINT ) ; 
	1316:	BOOL IsValidAcl ( PACL ) ; 
	1317:	BOOL IsValidSecurityDescriptor ( PSECURITY_DESCRIPTOR ) ; 
	1318:	BOOL IsValidSid ( PSID ) ; 
	1319:	void LeaveCriticalSection ( LPCRITICAL_SECTION ) ; 
	1321:	HINSTANCE LoadLibraryA ( LPCSTR ) ; 
	1322:	HINSTANCE LoadLibraryExA ( LPCSTR , HANDLE , DWORD ) ; 
	1323:	HINSTANCE LoadLibraryExW ( LPCWSTR , HANDLE , DWORD ) ; 
	1324:	HINSTANCE LoadLibraryW ( LPCWSTR ) ; 
	1325:	DWORD LoadModule ( LPCSTR , PVOID ) ; 
	1326:	HGLOBAL LoadResource ( HINSTANCE , HRSRC ) ; 
	1327:	HLOCAL LocalAlloc ( UINT , UINT ) ; 
	1328:	UINT LocalCompact ( UINT ) ; 
	1329:	HLOCAL LocalDiscard ( HLOCAL ) ; 
	1330:	BOOL LocalFileTimeToFileTime ( const FILETIME * , LPFILETIME ) ; 
	1331:	UINT LocalFlags ( HLOCAL ) ; 
	1332:	HLOCAL LocalFree ( HLOCAL ) ; 
	1333:	HLOCAL LocalHandle ( LPCVOID ) ; 
	1334:	PVOID LocalLock ( HLOCAL ) ; 
	1335:	HLOCAL LocalReAlloc ( HLOCAL , UINT , UINT ) ; 
	1336:	UINT LocalShrink ( HLOCAL , UINT ) ; 
	1337:	UINT LocalSize ( HLOCAL ) ; 
	1338:	BOOL LocalUnlock ( HLOCAL ) ; 
	1339:	BOOL LockFile ( HANDLE , DWORD , DWORD , DWORD , DWORD ) ; 
	1340:	BOOL LockFileEx ( HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ) ; 
	1341:	PVOID LockResource ( HGLOBAL ) ; 
	1343:	BOOL LogonUserA ( LPSTR , LPSTR , LPSTR , DWORD , DWORD , PHANDLE ) ; 
	1344:	BOOL LogonUserW ( LPWSTR , LPWSTR , LPWSTR , DWORD , DWORD , PHANDLE ) ; 
	1345:	BOOL LookupAccountNameA ( LPCSTR , LPCSTR , PSID , PDWORD , LPSTR , PDWORD , PSID_NAME_USE ) ; 
	1346:	BOOL LookupAccountNameW ( LPCWSTR , LPCWSTR , PSID , PDWORD , LPWSTR , PDWORD , PSID_NAME_USE ) ; 
	1347:	BOOL LookupAccountSidA ( LPCSTR , PSID , LPSTR , PDWORD , LPSTR , PDWORD , PSID_NAME_USE ) ; 
	1348:	BOOL LookupAccountSidW ( LPCWSTR , PSID , LPWSTR , PDWORD , LPWSTR , PDWORD , PSID_NAME_USE ) ; 
	1349:	BOOL LookupPrivilegeDisplayNameA ( LPCSTR , LPCSTR , LPSTR , PDWORD , PDWORD ) ; 
	1350:	BOOL LookupPrivilegeDisplayNameW ( LPCWSTR , LPCWSTR , LPWSTR , PDWORD , PDWORD ) ; 
	1351:	BOOL LookupPrivilegeNameA ( LPCSTR , PLUID , LPSTR , PDWORD ) ; 
	1352:	BOOL LookupPrivilegeNameW ( LPCWSTR , PLUID , LPWSTR , PDWORD ) ; 
	1353:	BOOL LookupPrivilegeValueA ( LPCSTR , LPCSTR , PLUID ) ; 
	1354:	BOOL LookupPrivilegeValueW ( LPCWSTR , LPCWSTR , PLUID ) ; 
	1355:	LPSTR lstrcatA ( LPSTR , LPCSTR ) ; 
	1356:	LPWSTR lstrcatW ( LPWSTR , LPCWSTR ) ; 
	1357:	int lstrcmpA ( LPCSTR , LPCSTR ) ; 
	1358:	int lstrcmpiA ( LPCSTR , LPCSTR ) ; 
	1359:	int lstrcmpiW ( LPCWSTR , LPCWSTR ) ; 
	1360:	int lstrcmpW ( LPCWSTR , LPCWSTR ) ; 
	1361:	LPSTR lstrcpyA ( LPSTR , LPCSTR ) ; 
	1362:	LPSTR lstrcpynA ( LPSTR , LPCSTR , int ) ; 
	1363:	LPWSTR lstrcpynW ( LPWSTR , LPCWSTR , int ) ; 
	1364:	LPWSTR lstrcpyW ( LPWSTR , LPCWSTR ) ; 
	1365:	int lstrlenA ( LPCSTR ) ; 
	1366:	int lstrlenW ( LPCWSTR ) ; 
	1367:	BOOL MakeAbsoluteSD ( PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR , PDWORD , PACL , PDWORD , PACL , PDWORD , PSID , PDWORD , PSID , PDWORD ) ; 
	1369:	BOOL MakeSelfRelativeSD ( PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR , PDWORD ) ; 
	1370:	void MapGenericMask ( PDWORD , PGENERIC_MAPPING ) ; 
	1371:	PVOID MapViewOfFile ( HANDLE , DWORD , DWORD , DWORD , DWORD ) ; 
	1372:	PVOID MapViewOfFileEx ( HANDLE , DWORD , DWORD , DWORD , DWORD , PVOID ) ; 
	1373:	BOOL MoveFileA ( LPCSTR , LPCSTR ) ; 
	1374:	BOOL MoveFileExA ( LPCSTR , LPCSTR , DWORD ) ; 
	1375:	BOOL MoveFileExW ( LPCWSTR , LPCWSTR , DWORD ) ; 
	1376:	BOOL MoveFileW ( LPCWSTR , LPCWSTR ) ; 
	1377:	int MulDiv ( int , int , int ) ; 
	1378:	BOOL NotifyChangeEventLog ( HANDLE , HANDLE ) ; 
	1379:	BOOL ObjectCloseAuditAlarmA ( LPCSTR , PVOID , BOOL ) ; 
	1380:	BOOL ObjectCloseAuditAlarmW ( LPCWSTR , PVOID , BOOL ) ; 
	1381:	BOOL ObjectDeleteAuditAlarmA ( LPCSTR , PVOID , BOOL ) ; 
	1382:	BOOL ObjectDeleteAuditAlarmW ( LPCWSTR , PVOID , BOOL ) ; 
	1383:	BOOL ObjectOpenAuditAlarmA ( LPCSTR , PVOID , LPSTR , LPSTR , PSECURITY_DESCRIPTOR , HANDLE , DWORD , DWORD , PPRIVILEGE_SET , BOOL , BOOL , PBOOL ) ; 
	1384:	BOOL ObjectOpenAuditAlarmW ( LPCWSTR , PVOID , LPWSTR , LPWSTR , PSECURITY_DESCRIPTOR , HANDLE , DWORD , DWORD , PPRIVILEGE_SET , BOOL , BOOL , PBOOL ) ; 
	1385:	BOOL ObjectPrivilegeAuditAlarmA ( LPCSTR , PVOID , HANDLE , DWORD , PPRIVILEGE_SET , BOOL ) ; 
	1386:	BOOL ObjectPrivilegeAuditAlarmW ( LPCWSTR , PVOID , HANDLE , DWORD , PPRIVILEGE_SET , BOOL ) ; 
	1387:	HANDLE OpenBackupEventLogA ( LPCSTR , LPCSTR ) ; 
	1388:	HANDLE OpenBackupEventLogW ( LPCWSTR , LPCWSTR ) ; 
	1389:	HANDLE OpenEventA ( DWORD , BOOL , LPCSTR ) ; 
	1390:	HANDLE OpenEventLogA ( LPCSTR , LPCSTR ) ; 
	1391:	HANDLE OpenEventLogW ( LPCWSTR , LPCWSTR ) ; 
	1392:	HANDLE OpenEventW ( DWORD , BOOL , LPCWSTR ) ; 
	1393:	HFILE OpenFile ( LPCSTR , LPOFSTRUCT , UINT ) ; 
	1394:	HANDLE OpenFileMappingA ( DWORD , BOOL , LPCSTR ) ; 
	1395:	HANDLE OpenFileMappingW ( DWORD , BOOL , LPCWSTR ) ; 
	1396:	HANDLE OpenMutexA ( DWORD , BOOL , LPCSTR ) ; 
	1397:	HANDLE OpenMutexW ( DWORD , BOOL , LPCWSTR ) ; 
	1398:	HANDLE OpenProcess ( DWORD , BOOL , DWORD ) ; 
	1399:	BOOL OpenProcessToken ( HANDLE , DWORD , PHANDLE ) ; 
	1400:	HANDLE OpenSemaphoreA ( DWORD , BOOL , LPCSTR ) ; 
	1401:	HANDLE OpenSemaphoreW ( DWORD , BOOL , LPCWSTR ) ; 
	1402:	BOOL OpenThreadToken ( HANDLE , DWORD , BOOL , PHANDLE ) ; 
	1403:	HANDLE OpenWaitableTimerA ( DWORD , BOOL , LPCSTR ) ; 
	1404:	HANDLE OpenWaitableTimerW ( DWORD , BOOL , LPCWSTR ) ; 
	1405:	void OutputDebugStringA ( LPCSTR ) ; 
	1406:	void OutputDebugStringW ( LPCWSTR ) ; 
	1407:	BOOL PeekNamedPipe ( HANDLE , PVOID , DWORD , PDWORD , PDWORD , PDWORD ) ; 
	1408:	BOOL PostQueuedCompletionStatus ( HANDLE , DWORD , DWORD , LPOVERLAPPED ) ; 
	1409:	DWORD PrepareTape ( HANDLE , DWORD , BOOL ) ; 
	1410:	BOOL PrivilegeCheck ( HANDLE , PPRIVILEGE_SET , PBOOL ) ; 
	1411:	BOOL PrivilegedServiceAuditAlarmA ( LPCSTR , LPCSTR , HANDLE , PPRIVILEGE_SET , BOOL ) ; 
	1412:	BOOL PrivilegedServiceAuditAlarmW ( LPCWSTR , LPCWSTR , HANDLE , PPRIVILEGE_SET , BOOL ) ; 
	1413:	BOOL PulseEvent ( HANDLE ) ; 
	1414:	BOOL PurgeComm ( HANDLE , DWORD ) ; 
	1415:	DWORD QueryDosDeviceA ( LPCSTR , LPSTR , DWORD ) ; 
	1416:	DWORD QueryDosDeviceW ( LPCWSTR , LPWSTR , DWORD ) ; 
	1417:	BOOL QueryPerformanceCounter ( PLARGE_INTEGER ) ; 
	1418:	BOOL QueryPerformanceFrequency ( PLARGE_INTEGER ) ; 
	1419:	DWORD QueueUserAPC ( PAPCFUNC , HANDLE , DWORD ) ; 
	1420:	void RaiseException ( DWORD , DWORD , DWORD , const DWORD * ) ; 
	1421:	BOOL ReadDirectoryChangesW ( HANDLE , PVOID , DWORD , BOOL , DWORD , PDWORD , LPOVERLAPPED , LPOVERLAPPED_COMPLETION_ROUTINE ) ; 
	1422:	BOOL ReadEventLogA ( HANDLE , DWORD , DWORD , PVOID , DWORD , DWORD * , DWORD * ) ; 
	1423:	BOOL ReadEventLogW ( HANDLE , DWORD , DWORD , PVOID , DWORD , DWORD * , DWORD * ) ; 
	1424:	BOOL ReadFile ( HANDLE , PVOID , DWORD , PDWORD , LPOVERLAPPED ) ; 
	1425:	BOOL ReadFileEx ( HANDLE , PVOID , DWORD , LPOVERLAPPED , LPOVERLAPPED_COMPLETION_ROUTINE ) ; 
	1426:	BOOL ReadProcessMemory ( HANDLE , PCVOID , PVOID , DWORD , PDWORD ) ; 
	1427:	HANDLE RegisterEventSourceA ( LPCSTR , LPCSTR ) ; 
	1428:	HANDLE RegisterEventSourceW ( LPCWSTR , LPCWSTR ) ; 
	1429:	BOOL ReleaseMutex ( HANDLE ) ; 
	1430:	BOOL ReleaseSemaphore ( HANDLE , LONG , LPLONG ) ; 
	1431:	BOOL RemoveDirectoryA ( LPCSTR ) ; 
	1432:	BOOL RemoveDirectoryW ( LPCWSTR ) ; 
	1433:	BOOL ReportEventA ( HANDLE , WORD , WORD , DWORD , PSID , WORD , DWORD , LPCSTR * , PVOID ) ; 
	1434:	BOOL ReportEventW ( HANDLE , WORD , WORD , DWORD , PSID , WORD , DWORD , LPCWSTR * , PVOID ) ; 
	1435:	BOOL ResetEvent ( HANDLE ) ; 
	1436:	DWORD ResumeThread ( HANDLE ) ; 
	1437:	BOOL RevertToSelf ( void ) ; 
	1438:	DWORD SearchPathA ( LPCSTR , LPCSTR , LPCSTR , DWORD , LPSTR , LPSTR * ) ; 
	1439:	DWORD SearchPathW ( LPCWSTR , LPCWSTR , LPCWSTR , DWORD , LPWSTR , LPWSTR * ) ; 
	1440:	BOOL SetAclInformation ( PACL , PVOID , DWORD , ACL_INFORMATION_CLASS ) ; 
	1441:	BOOL SetCommBreak ( HANDLE ) ; 
	1442:	BOOL SetCommConfig ( HANDLE , LPCOMMCONFIG , DWORD ) ; 
	1443:	BOOL SetCommMask ( HANDLE , DWORD ) ; 
	1444:	BOOL SetCommState ( HANDLE , LPDCB ) ; 
	1445:	BOOL SetCommTimeouts ( HANDLE , LPCOMMTIMEOUTS ) ; 
	1446:	BOOL SetComputerNameA ( LPCSTR ) ; 
	1447:	BOOL SetComputerNameW ( LPCWSTR ) ; 
	1448:	BOOL SetCurrentDirectoryA ( LPCSTR ) ; 
	1449:	BOOL SetCurrentDirectoryW ( LPCWSTR ) ; 
	1450:	BOOL SetDefaultCommConfigA ( LPCSTR , LPCOMMCONFIG , DWORD ) ; 
	1451:	BOOL SetDefaultCommConfigW ( LPCWSTR , LPCOMMCONFIG , DWORD ) ; 
	1452:	BOOL SetEndOfFile ( HANDLE ) ; 
	1453:	BOOL SetEnvironmentVariableA ( LPCSTR , LPCSTR ) ; 
	1454:	BOOL SetEnvironmentVariableW ( LPCWSTR , LPCWSTR ) ; 
	1455:	UINT SetErrorMode ( UINT ) ; 
	1456:	BOOL SetEvent ( HANDLE ) ; 
	1457:	void SetFileApisToANSI ( void ) ; 
	1458:	void SetFileApisToOEM ( void ) ; 
	1459:	BOOL SetFileAttributesA ( LPCSTR , DWORD ) ; 
	1460:	BOOL SetFileAttributesW ( LPCWSTR , DWORD ) ; 
	1461:	DWORD SetFilePointer ( HANDLE , LONG , PLONG , DWORD ) ; 
	1462:	BOOL SetFileSecurityA ( LPCSTR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ) ; 
	1463:	BOOL SetFileSecurityW ( LPCWSTR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ) ; 
	1464:	BOOL SetFileTime ( HANDLE , const FILETIME * , const FILETIME * , const FILETIME * ) ; 
	1465:	UINT SetHandleCount ( UINT ) ; 
	1466:	BOOL SetHandleInformation ( HANDLE , DWORD , DWORD ) ; 
	1467:	BOOL SetKernelObjectSecurity ( HANDLE , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ) ; 
	1468:	void SetLastError ( DWORD ) ; 
	1469:	void SetLastErrorEx ( DWORD , DWORD ) ; 
	1470:	BOOL SetLocalTime ( const SYSTEMTIME * ) ; 
	1471:	BOOL SetMailslotInfo ( HANDLE , DWORD ) ; 
	1472:	BOOL SetNamedPipeHandleState ( HANDLE , PDWORD , PDWORD , PDWORD ) ; 
	1473:	BOOL SetPriorityClass ( HANDLE , DWORD ) ; 
	1474:	BOOL SetPrivateObjectSecurity ( SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR * , PGENERIC_MAPPING , HANDLE ) ; 
	1475:	BOOL SetProcessAffinityMask ( HANDLE , DWORD ) ; 
	1476:	BOOL SetProcessPriorityBoost ( HANDLE , BOOL ) ; 
	1477:	BOOL SetProcessShutdownParameters ( DWORD , DWORD ) ; 
	1478:	BOOL SetProcessWorkingSetSize ( HANDLE , DWORD , DWORD ) ; 
	1479:	BOOL SetSecurityDescriptorControl ( PSECURITY_DESCRIPTOR , SECURITY_DESCRIPTOR_CONTROL , SECURITY_DESCRIPTOR_CONTROL ) ; 
	1480:	BOOL SetSecurityDescriptorDacl ( PSECURITY_DESCRIPTOR , BOOL , PACL , BOOL ) ; 
	1481:	BOOL SetSecurityDescriptorGroup ( PSECURITY_DESCRIPTOR , PSID , BOOL ) ; 
	1482:	BOOL SetSecurityDescriptorOwner ( PSECURITY_DESCRIPTOR , PSID , BOOL ) ; 
	1483:	BOOL SetSecurityDescriptorSacl ( PSECURITY_DESCRIPTOR , BOOL , PACL , BOOL ) ; 
	1484:	BOOL SetStdHandle ( DWORD , HANDLE ) ; 
	1486:	BOOL SetSystemPowerState ( BOOL , BOOL ) ; 
	1487:	BOOL SetSystemTime ( const SYSTEMTIME * ) ; 
	1488:	BOOL SetSystemTimeAdjustment ( DWORD , BOOL ) ; 
	1489:	DWORD SetTapeParameters ( HANDLE , DWORD , PVOID ) ; 
	1490:	DWORD SetTapePosition ( HANDLE , DWORD , DWORD , DWORD , DWORD , BOOL ) ; 
	1491:	DWORD SetThreadAffinityMask ( HANDLE , DWORD ) ; 
	1492:	BOOL SetThreadContext ( HANDLE , const CONTEXT * ) ; 
	1493:	DWORD SetThreadIdealProcessor ( HANDLE , DWORD ) ; 
	1494:	BOOL SetThreadPriority ( HANDLE , int ) ; 
	1495:	BOOL SetThreadPriorityBoost ( HANDLE , BOOL ) ; 
	1496:	BOOL SetThreadToken ( PHANDLE , HANDLE ) ; 
	1497:	BOOL SetTimeZoneInformation ( const TIME_ZONE_INFORMATION * ) ; 
	1498:	BOOL SetTokenInformation ( HANDLE , TOKEN_INFORMATION_CLASS , PVOID , DWORD ) ; 
	1499:	LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter ( LPTOP_LEVEL_EXCEPTION_FILTER ) ; 
	1500:	BOOL SetupComm ( HANDLE , DWORD , DWORD ) ; 
	1501:	BOOL SetVolumeLabelA ( LPCSTR , LPCSTR ) ; 
	1502:	BOOL SetVolumeLabelW ( LPCWSTR , LPCWSTR ) ; 
	1503:	BOOL SetWaitableTimer ( HANDLE , const LARGE_INTEGER * , LONG , PTIMERAPCROUTINE , PVOID , BOOL ) ; 
	1504:	BOOL SignalObjectAndWait ( HANDLE , HANDLE , DWORD , BOOL ) ; 
	1505:	DWORD SizeofResource ( HINSTANCE , HRSRC ) ; 
	1506:	void Sleep ( DWORD ) ; 
	1507:	DWORD SleepEx ( DWORD , BOOL ) ; 
	1508:	DWORD SuspendThread ( HANDLE ) ; 
	1509:	void SwitchToFiber ( PVOID ) ; 
	1510:	BOOL SwitchToThread ( void ) ; 
	1511:	BOOL SystemTimeToFileTime ( const SYSTEMTIME * , LPFILETIME ) ; 
	1512:	BOOL SystemTimeToTzSpecificLocalTime ( LPTIME_ZONE_INFORMATION , LPSYSTEMTIME , LPSYSTEMTIME ) ; 
	1513:	BOOL TerminateProcess ( HANDLE , UINT ) ; 
	1514:	BOOL TerminateThread ( HANDLE , DWORD ) ; 
	1515:	DWORD TlsAlloc ( void ) ; 
	1516:	BOOL TlsFree ( DWORD ) ; 
	1517:	PVOID TlsGetValue ( DWORD ) ; 
	1518:	BOOL TlsSetValue ( DWORD , PVOID ) ; 
	1519:	BOOL TransactNamedPipe ( HANDLE , PVOID , DWORD , PVOID , DWORD , PDWORD , LPOVERLAPPED ) ; 
	1520:	BOOL TransmitCommChar ( HANDLE , char ) ; 
	1521:	BOOL TryEnterCriticalSection ( LPCRITICAL_SECTION ) ; 
	1522:	LONG UnhandledExceptionFilter ( LPEXCEPTION_POINTERS ) ; 
	1523:	BOOL UnlockFile ( HANDLE , DWORD , DWORD , DWORD , DWORD ) ; 
	1524:	BOOL UnlockFileEx ( HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ) ; 
	1527:	BOOL UnmapViewOfFile ( PVOID ) ; 
	1528:	BOOL UpdateResourceA ( HANDLE , LPCSTR , LPCSTR , WORD , PVOID , DWORD ) ; 
	1529:	BOOL UpdateResourceW ( HANDLE , LPCWSTR , LPCWSTR , WORD , PVOID , DWORD ) ; 
	1530:	BOOL VerifyVersionInfoA ( LPOSVERSIONINFOEXA , DWORD , DWORDLONG ) ; 
	1531:	BOOL VerifyVersionInfoW ( LPOSVERSIONINFOEXW , DWORD , DWORDLONG ) ; 
	1532:	PVOID VirtualAlloc ( PVOID , DWORD , DWORD , DWORD ) ; 
	1533:	PVOID VirtualAllocEx ( HANDLE , PVOID , DWORD , DWORD , DWORD ) ; 
	1534:	BOOL VirtualFree ( PVOID , DWORD , DWORD ) ; 
	1535:	BOOL VirtualFreeEx ( HANDLE , PVOID , DWORD , DWORD ) ; 
	1536:	BOOL VirtualLock ( PVOID , DWORD ) ; 
	1537:	BOOL VirtualProtect ( PVOID , DWORD , DWORD , PDWORD ) ; 
	1538:	BOOL VirtualProtectEx ( HANDLE , PVOID , DWORD , DWORD , PDWORD ) ; 
	1539:	DWORD VirtualQuery ( LPCVOID , PMEMORY_BASIC_INFORMATION , DWORD ) ; 
	1540:	DWORD VirtualQueryEx ( HANDLE , LPCVOID , PMEMORY_BASIC_INFORMATION , DWORD ) ; 
	1541:	BOOL VirtualUnlock ( PVOID , DWORD ) ; 
	1542:	BOOL WaitCommEvent ( HANDLE , PDWORD , LPOVERLAPPED ) ; 
	1543:	BOOL WaitForDebugEvent ( LPDEBUG_EVENT , DWORD ) ; 
	1544:	DWORD WaitForMultipleObjects ( DWORD , const HANDLE * , BOOL , DWORD ) ; 
	1545:	DWORD WaitForMultipleObjectsEx ( DWORD , const HANDLE * , BOOL , DWORD , BOOL ) ; 
	1546:	DWORD WaitForSingleObject ( HANDLE , DWORD ) ; 
	1547:	DWORD WaitForSingleObjectEx ( HANDLE , DWORD , BOOL ) ; 
	1548:	BOOL WaitNamedPipeA ( LPCSTR , DWORD ) ; 
	1549:	BOOL WaitNamedPipeW ( LPCWSTR , DWORD ) ; 
	1550:	BOOL WinLoadTrustProvider ( GUID * ) ; 
	1551:	BOOL WriteFile ( HANDLE , PCVOID , DWORD , PDWORD , LPOVERLAPPED ) ; 
	1552:	BOOL WriteFileEx ( HANDLE , PCVOID , DWORD , LPOVERLAPPED , LPOVERLAPPED_COMPLETION_ROUTINE ) ; 
	1553:	BOOL WritePrivateProfileSectionA ( LPCSTR , LPCSTR , LPCSTR ) ; 
	1554:	BOOL WritePrivateProfileSectionW ( LPCWSTR , LPCWSTR , LPCWSTR ) ; 
	1555:	BOOL WritePrivateProfileStringA ( LPCSTR , LPCSTR , LPCSTR , LPCSTR ) ; 
	1556:	BOOL WritePrivateProfileStringW ( LPCWSTR , LPCWSTR , LPCWSTR , LPCWSTR ) ; 
	1557:	BOOL WritePrivateProfileStructA ( LPCSTR , LPCSTR , PVOID , UINT , LPCSTR ) ; 
	1558:	BOOL WritePrivateProfileStructW ( LPCWSTR , LPCWSTR , PVOID , UINT , LPCWSTR ) ; 
	1559:	BOOL WriteProcessMemory ( HANDLE , PVOID , PVOID , DWORD , PDWORD ) ; 
	1560:	BOOL WriteProfileSectionA ( LPCSTR , LPCSTR ) ; 
	1561:	BOOL WriteProfileSectionW ( LPCWSTR , LPCWSTR ) ; 
	1562:	BOOL WriteProfileStringA ( LPCSTR , LPCSTR , LPCSTR ) ; 
	1563:	BOOL WriteProfileStringW ( LPCWSTR , LPCWSTR , LPCWSTR ) ; 
	1564:	DWORD WriteTapemark ( HANDLE , DWORD , DWORD , BOOL ) ; 
	1703:	typedef STARTUPINFOA STARTUPINFO , * LPSTARTUPINFO ; 
	1704:	typedef WIN32_FIND_DATAA WIN32_FIND_DATA , * LPWIN32_FIND_DATA ; 
	1705:	typedef HW_PROFILE_INFOA HW_PROFILE_INFO , * LPHW_PROFILE_INFO ; 
	1165:	typedef struct _ABC { 
	1166:	int abcA ; 
	1167:	UINT abcB ; 
	1168:	int abcC ; 
	1169:	} ABC , * LPABC ; 
	1170:	typedef struct _ABCFLOAT { 
	1171:	FLOAT abcfA ; 
	1172:	FLOAT abcfB ; 
	1173:	FLOAT abcfC ; 
	1174:	} ABCFLOAT , * LPABCFLOAT ; 
	1175:	typedef struct tagBITMAP { 
	1176:	LONG bmType ; 
	1177:	LONG bmWidth ; 
	1178:	LONG bmHeight ; 
	1179:	LONG bmWidthBytes ; 
	1180:	WORD bmPlanes ; 
	1181:	WORD bmBitsPixel ; 
	1182:	LPVOID bmBits ; 
	1183:	} BITMAP , * PBITMAP , * LPBITMAP ; 
	1184:	typedef struct tagBITMAPCOREHEADER { 
	1185:	DWORD bcSize ; 
	1186:	WORD bcWidth ; 
	1187:	WORD bcHeight ; 
	1188:	WORD bcPlanes ; 
	1189:	WORD bcBitCount ; 
	1190:	} BITMAPCOREHEADER , * LPBITMAPCOREHEADER , * PBITMAPCOREHEADER ; 
	1192:	typedef struct tagRGBTRIPLE { 
	1193:	BYTE rgbtBlue ; 
	1194:	BYTE rgbtGreen ; 
	1195:	BYTE rgbtRed ; 
	1196:	} RGBTRIPLE ; 
	1199:	typedef struct tagBITMAPFILEHEADER { 
	1200:	WORD bfType ; 
	1201:	DWORD bfSize ; 
	1202:	WORD bfReserved1 ; 
	1203:	WORD bfReserved2 ; 
	1204:	DWORD bfOffBits ; 
	1205:	} BITMAPFILEHEADER , * LPBITMAPFILEHEADER , * PBITMAPFILEHEADER ; 
	1207:	typedef struct _BITMAPCOREINFO { 
	1208:	BITMAPCOREHEADER bmciHeader ; 
	1209:	RGBTRIPLE bmciColors [ 1 ] ; 
	1210:	} BITMAPCOREINFO , * LPBITMAPCOREINFO , * PBITMAPCOREINFO ; 
	1211:	typedef struct tagBITMAPINFOHEADER { 
	1212:	DWORD biSize ; 
	1213:	LONG biWidth ; 
	1214:	LONG biHeight ; 
	1215:	WORD biPlanes ; 
	1216:	WORD biBitCount ; 
	1217:	DWORD biCompression ; 
	1218:	DWORD biSizeImage ; 
	1219:	LONG biXPelsPerMeter ; 
	1220:	LONG biYPelsPerMeter ; 
	1221:	DWORD biClrUsed ; 
	1222:	DWORD biClrImportant ; 
	1223:	} BITMAPINFOHEADER , * LPBITMAPINFOHEADER , * PBITMAPINFOHEADER ; 
	1224:	typedef struct tagRGBQUAD { 
	1225:	BYTE rgbBlue ; 
	1226:	BYTE rgbGreen ; 
	1227:	BYTE rgbRed ; 
	1228:	BYTE rgbReserved ; 
	1229:	} RGBQUAD ; 
	1230:	typedef struct tagBITMAPINFO { 
	1231:	BITMAPINFOHEADER bmiHeader ; 
	1232:	RGBQUAD bmiColors [ 1 ] ; 
	1233:	} BITMAPINFO , * LPBITMAPINFO , * PBITMAPINFO ; 
	1234:	typedef long FXPT16DOT16 , * LPFXPT16DOT16 ; 
	1235:	typedef long FXPT2DOT30 , * LPFXPT2DOT30 ; 
	1236:	typedef struct tagCIEXYZ { 
	1237:	FXPT2DOT30 ciexyzX ; 
	1238:	FXPT2DOT30 ciexyzY ; 
	1239:	FXPT2DOT30 ciexyzZ ; 
	1240:	} CIEXYZ , * LPCIEXYZ ; 
	1241:	typedef struct tagCIEXYZTRIPLE { 
	1242:	CIEXYZ ciexyzRed ; 
	1243:	CIEXYZ ciexyzGreen ; 
	1244:	CIEXYZ ciexyzBlue ; 
	1245:	} CIEXYZTRIPLE , * LPCIEXYZTRIPLE ; 
	1246:	typedef struct { 
	1247:	DWORD bV4Size ; 
	1248:	LONG bV4Width ; 
	1249:	LONG bV4Height ; 
	1250:	WORD bV4Planes ; 
	1251:	WORD bV4BitCount ; 
	1252:	DWORD bV4V4Compression ; 
	1253:	DWORD bV4SizeImage ; 
	1254:	LONG bV4XPelsPerMeter ; 
	1255:	LONG bV4YPelsPerMeter ; 
	1256:	DWORD bV4ClrUsed ; 
	1257:	DWORD bV4ClrImportant ; 
	1258:	DWORD bV4RedMask ; 
	1259:	DWORD bV4GreenMask ; 
	1260:	DWORD bV4BlueMask ; 
	1261:	DWORD bV4AlphaMask ; 
	1262:	DWORD bV4CSType ; 
	1263:	CIEXYZTRIPLE bV4Endpoints ; 
	1264:	DWORD bV4GammaRed ; 
	1265:	DWORD bV4GammaGreen ; 
	1266:	DWORD bV4GammaBlue ; 
	1267:	} BITMAPV4HEADER , * LPBITMAPV4HEADER , * PBITMAPV4HEADER ; 
	1268:	typedef struct tagFONTSIGNATURE { 
	1269:	DWORD fsUsb [ 4 ] ; 
	1270:	DWORD fsCsb [ 2 ] ; 
	1271:	} FONTSIGNATURE , * LPFONTSIGNATURE ; 
	1272:	typedef struct { 
	1273:	UINT ciCharset ; 
	1274:	UINT ciACP ; 
	1275:	FONTSIGNATURE fs ; 
	1276:	} CHARSETINFO , * LPCHARSETINFO ; 
	1277:	typedef struct tagCOLORADJUSTMENT { 
	1278:	WORD caSize ; 
	1279:	WORD caFlags ; 
	1280:	WORD caIlluminantIndex ; 
	1281:	WORD caRedGamma ; 
	1282:	WORD caGreenGamma ; 
	1283:	WORD caBlueGamma ; 
	1284:	WORD caReferenceBlack ; 
	1285:	WORD caReferenceWhite ; 
	1286:	SHORT caContrast ; 
	1287:	SHORT caBrightness ; 
	1288:	SHORT caColorfulness ; 
	1289:	SHORT caRedGreenTint ; 
	1290:	} COLORADJUSTMENT , * LPCOLORADJUSTMENT ; 
	1291:	typedef struct _devicemodeA { 
	1292:	BYTE dmDeviceName [ 32 ] ; 
	1293:	WORD dmSpecVersion ; 
	1294:	WORD dmDriverVersion ; 
	1295:	WORD dmSize ; 
	1296:	WORD dmDriverExtra ; 
	1297:	DWORD dmFields ; 
	1298:	short dmOrientation ; 
	1299:	short dmPaperSize ; 
	1300:	short dmPaperLength ; 
	1301:	short dmPaperWidth ; 
	1302:	short dmScale ; 
	1303:	short dmCopies ; 
	1304:	short dmDefaultSource ; 
	1305:	short dmPrintQuality ; 
	1306:	short dmColor ; 
	1307:	short dmDuplex ; 
	1308:	short dmYResolution ; 
	1309:	short dmTTOption ; 
	1310:	short dmCollate ; 
	1311:	BYTE dmFormName [ 32 ] ; 
	1312:	WORD dmLogPixels ; 
	1313:	DWORD dmBitsPerPel ; 
	1314:	DWORD dmPelsWidth ; 
	1315:	DWORD dmPelsHeight ; 
	1316:	DWORD dmDisplayFlags ; 
	1317:	DWORD dmDisplayFrequency ; 
	1318:	DWORD dmICMMethod ; 
	1319:	DWORD dmICMIntent ; 
	1320:	DWORD dmMediaType ; 
	1321:	DWORD dmDitherType ; 
	1322:	DWORD dmICCManufacturer ; 
	1323:	DWORD dmICCModel ; 
	1324:	} DEVMODEA , * LPDEVMODEA , * PDEVMODEA ; 
	1325:	typedef struct _devicemodeW { 
	1326:	WCHAR dmDeviceName [ 32 ] ; 
	1327:	WORD dmSpecVersion ; 
	1328:	WORD dmDriverVersion ; 
	1329:	WORD dmSize ; 
	1330:	WORD dmDriverExtra ; 
	1331:	DWORD dmFields ; 
	1332:	short dmOrientation ; 
	1333:	short dmPaperSize ; 
	1334:	short dmPaperLength ; 
	1335:	short dmPaperWidth ; 
	1336:	short dmScale ; 
	1337:	short dmCopies ; 
	1338:	short dmDefaultSource ; 
	1339:	short dmPrintQuality ; 
	1340:	short dmColor ; 
	1341:	short dmDuplex ; 
	1342:	short dmYResolution ; 
	1343:	short dmTTOption ; 
	1344:	short dmCollate ; 
	1345:	WCHAR dmFormName [ 32 ] ; 
	1346:	WORD dmLogPixels ; 
	1347:	DWORD dmBitsPerPel ; 
	1348:	DWORD dmPelsWidth ; 
	1349:	DWORD dmPelsHeight ; 
	1350:	DWORD dmDisplayFlags ; 
	1351:	DWORD dmDisplayFrequency ; 
	1352:	DWORD dmICMMethod ; 
	1353:	DWORD dmICMIntent ; 
	1354:	DWORD dmMediaType ; 
	1355:	DWORD dmDitherType ; 
	1356:	DWORD dmICCManufacturer ; 
	1357:	DWORD dmICCModel ; 
	1358:	} DEVMODEW , * LPDEVMODEW , * PDEVMODEW ; 
	1359:	typedef struct tagDIBSECTION { 
	1360:	BITMAP dsBm ; 
	1361:	BITMAPINFOHEADER dsBmih ; 
	1362:	DWORD dsBitfields [ 3 ] ; 
	1363:	HANDLE dshSection ; 
	1364:	DWORD dsOffset ; 
	1365:	} DIBSECTION ; 
	1366:	typedef struct _DOCINFOA { 
	1367:	int cbSize ; 
	1368:	LPCTSTR lpszDocName ; 
	1369:	LPCTSTR lpszOutput ; 
	1370:	LPCTSTR lpszDatatype ; 
	1371:	DWORD fwType ; 
	1372:	} DOCINFOA , * LPDOCINFOA ; 
	1373:	typedef struct _DOCINFOW { 
	1374:	int cbSize ; 
	1375:	LPCWSTR lpszDocName ; 
	1376:	LPCWSTR lpszOutput ; 
	1377:	LPCWSTR lpszDatatype ; 
	1378:	DWORD fwType ; 
	1379:	} DOCINFOW , * LPDOCINFOW ; 
	1380:	typedef struct tagEMR { 
	1381:	DWORD iType ; 
	1382:	DWORD nSize ; 
	1383:	} EMR , * PEMR ; 
	1384:	typedef struct tagEMRANGLEARC { 
	1385:	EMR emr ; 
	1386:	POINTL ptlCenter ; 
	1387:	DWORD nRadius ; 
	1388:	FLOAT eStartAngle ; 
	1389:	FLOAT eSweepAngle ; 
	1390:	} EMRANGLEARC , * PEMRANGLEARC ; 
	1391:	typedef struct tagEMRARC { 
	1392:	EMR emr ; 
	1393:	RECTL rclBox ; 
	1394:	POINTL ptlStart ; 
	1395:	POINTL ptlEnd ; 
	1396:	} EMRARC , * PEMRARC , EMRARCTO , * PEMRARCTO , EMRCHORD , * PEMRCHORD , EMRPIE , * PEMRPIE ; 
	1397:	typedef struct _XFORM { 
	1398:	FLOAT eM11 ; 
	1399:	FLOAT eM12 ; 
	1400:	FLOAT eM21 ; 
	1401:	FLOAT eM22 ; 
	1402:	FLOAT eDx ; 
	1403:	FLOAT eDy ; 
	1404:	} XFORM , * LPXFORM ; 
	1405:	typedef struct tagEMRBITBLT { 
	1406:	EMR emr ; 
	1407:	RECTL rclBounds ; 
	1408:	LONG xDest ; 
	1409:	LONG yDest ; 
	1410:	LONG cxDest ; 
	1411:	LONG cyDest ; 
	1412:	DWORD dwRop ; 
	1413:	LONG xSrc ; 
	1414:	LONG ySrc ; 
	1415:	XFORM xformSrc ; 
	1416:	COLORREF crBkColorSrc ; 
	1417:	DWORD iUsageSrc ; 
	1418:	DWORD offBmiSrc ; 
	1419:	DWORD offBitsSrc ; 
	1420:	DWORD cbBitsSrc ; 
	1421:	} EMRBITBLT , * PEMRBITBLT ; 
	1422:	typedef struct tagLOGBRUSH { 
	1423:	UINT lbStyle ; 
	1424:	COLORREF lbColor ; 
	1425:	LONG lbHatch ; 
	1426:	} LOGBRUSH , * LPLOGBRUSH ; 
	1427:	typedef LOGBRUSH PATTERN , * PPATTERN , * LPPATTERN ; 
	1428:	typedef struct tagEMRCREATEBRUSHINDIRECT { 
	1429:	EMR emr ; 
	1430:	DWORD ihBrush ; 
	1431:	LOGBRUSH lb ; 
	1432:	} EMRCREATEBRUSHINDIRECT , * PEMRCREATEBRUSHINDIRECT ; 
	1433:	typedef LONG LCSCSTYPE ; 
	1434:	typedef LONG LCSGAMUTMATCH ; 
	1435:	typedef struct tagLOGCOLORSPACEA { 
	1436:	DWORD lcsSignature ; 
	1437:	DWORD lcsVersion ; 
	1438:	DWORD lcsSize ; 
	1439:	LCSCSTYPE lcsCSType ; 
	1440:	LCSGAMUTMATCH lcsIntent ; 
	1441:	CIEXYZTRIPLE lcsEndpoints ; 
	1442:	DWORD lcsGammaRed ; 
	1443:	DWORD lcsGammaGreen ; 
	1444:	DWORD lcsGammaBlue ; 
	1445:	CHAR lcsFilename [ 260 ] ; 
	1446:	} LOGCOLORSPACEA , * LPLOGCOLORSPACEA ; 
	1447:	typedef struct tagLOGCOLORSPACEW { 
	1448:	DWORD lcsSignature ; 
	1449:	DWORD lcsVersion ; 
	1450:	DWORD lcsSize ; 
	1451:	LCSCSTYPE lcsCSType ; 
	1452:	LCSGAMUTMATCH lcsIntent ; 
	1453:	CIEXYZTRIPLE lcsEndpoints ; 
	1454:	DWORD lcsGammaRed ; 
	1455:	DWORD lcsGammaGreen ; 
	1456:	DWORD lcsGammaBlue ; 
	1457:	WCHAR lcsFilename [ 260 ] ; 
	1458:	} LOGCOLORSPACEW , * LPLOGCOLORSPACEW ; 
	1459:	typedef struct tagEMRCREATECOLORSPACE { 
	1460:	EMR emr ; 
	1461:	DWORD ihCS ; 
	1462:	LOGCOLORSPACEW lcs ; 
	1463:	} EMRCREATECOLORSPACE , * PEMRCREATECOLORSPACE ; 
	1464:	typedef struct tagEMRCREATEDIBPATTERNBRUSHPT { 
	1465:	EMR emr ; 
	1466:	DWORD ihBrush ; 
	1467:	DWORD iUsage ; 
	1468:	DWORD offBmi ; 
	1469:	DWORD cbBmi ; 
	1470:	DWORD offBits ; 
	1471:	DWORD cbBits ; 
	1472:	} EMRCREATEDIBPATTERNBRUSHPT , * PEMRCREATEDIBPATTERNBRUSHPT ; 
	1473:	typedef struct tagEMRCREATEMONOBRUSH { 
	1474:	EMR emr ; 
	1475:	DWORD ihBrush ; 
	1476:	DWORD iUsage ; 
	1477:	DWORD offBmi ; 
	1478:	DWORD cbBmi ; 
	1479:	DWORD offBits ; 
	1480:	DWORD cbBits ; 
	1481:	} EMRCREATEMONOBRUSH , * PEMRCREATEMONOBRUSH ; 
	1482:	typedef struct tagPALETTEENTRY { 
	1483:	BYTE peRed ; 
	1484:	BYTE peGreen ; 
	1485:	BYTE peBlue ; 
	1486:	BYTE peFlags ; 
	1487:	} PALETTEENTRY , * LPPALETTEENTRY , * PPALETTEENTRY ; 
	1488:	typedef struct tagLOGPALETTE { 
	1489:	WORD palVersion ; 
	1490:	WORD palNumEntries ; 
	1491:	PALETTEENTRY palPalEntry [ 1 ] ; 
	1492:	} LOGPALETTE , * NPLOGPALETTE , * PLOGPALETTE , * LPLOGPALETTE ; 
	1493:	typedef struct tagEMRCREATEPALETTE { 
	1494:	EMR emr ; 
	1495:	DWORD ihPal ; 
	1496:	LOGPALETTE lgpl ; 
	1497:	} EMRCREATEPALETTE , * PEMRCREATEPALETTE ; 
	1498:	typedef struct tagLOGPEN { 
	1499:	UINT lopnStyle ; 
	1500:	POINT lopnWidth ; 
	1501:	COLORREF lopnColor ; 
	1502:	} LOGPEN , * LPLOGPEN ; 
	1503:	typedef struct tagEMRCREATEPEN { 
	1504:	EMR emr ; 
	1505:	DWORD ihPen ; 
	1506:	LOGPEN lopn ; 
	1507:	} EMRCREATEPEN , * PEMRCREATEPEN ; 
	1508:	typedef struct tagEMRELLIPSE { 
	1509:	EMR emr ; 
	1510:	RECTL rclBox ; 
	1511:	} EMRELLIPSE , * PEMRELLIPSE , EMRRECTANGLE , * PEMRRECTANGLE ; 
	1512:	typedef struct tagEMREOF { 
	1513:	EMR emr ; 
	1514:	DWORD nPalEntries ; 
	1515:	DWORD offPalEntries ; 
	1516:	DWORD nSizeLast ; 
	1517:	} EMREOF , * PEMREOF ; 
	1518:	typedef struct tagEMREXCLUDECLIPRECT { 
	1519:	EMR emr ; 
	1520:	RECTL rclClip ; 
	1521:	} EMREXCLUDECLIPRECT , * PEMREXCLUDECLIPRECT , EMRINTERSECTCLIPRECT , * PEMRINTERSECTCLIPRECT ; 
	1522:	typedef struct tagPANOSE { 
	1523:	BYTE bFamilyType ; 
	1524:	BYTE bSerifStyle ; 
	1525:	BYTE bWeight ; 
	1526:	BYTE bProportion ; 
	1527:	BYTE bContrast ; 
	1528:	BYTE bStrokeVariation ; 
	1529:	BYTE bArmStyle ; 
	1530:	BYTE bLetterform ; 
	1531:	BYTE bMidline ; 
	1532:	BYTE bXHeight ; 
	1533:	} PANOSE ; 
	1534:	typedef struct tagLOGFONTA { 
	1535:	LONG lfHeight ; 
	1536:	LONG lfWidth ; 
	1537:	LONG lfEscapement ; 
	1538:	LONG lfOrientation ; 
	1539:	LONG lfWeight ; 
	1540:	BYTE lfItalic ; 
	1541:	BYTE lfUnderline ; 
	1542:	BYTE lfStrikeOut ; 
	1543:	BYTE lfCharSet ; 
	1544:	BYTE lfOutPrecision ; 
	1545:	BYTE lfClipPrecision ; 
	1546:	BYTE lfQuality ; 
	1547:	BYTE lfPitchAndFamily ; 
	1548:	CHAR lfFaceName [ 32 ] ; 
	1549:	} LOGFONTA , * PLOGFONTA , * LPLOGFONTA ; 
	1550:	typedef struct tagLOGFONTW { 
	1551:	LONG lfHeight ; 
	1552:	LONG lfWidth ; 
	1553:	LONG lfEscapement ; 
	1554:	LONG lfOrientation ; 
	1555:	LONG lfWeight ; 
	1556:	BYTE lfItalic ; 
	1557:	BYTE lfUnderline ; 
	1558:	BYTE lfStrikeOut ; 
	1559:	BYTE lfCharSet ; 
	1560:	BYTE lfOutPrecision ; 
	1561:	BYTE lfClipPrecision ; 
	1562:	BYTE lfQuality ; 
	1563:	BYTE lfPitchAndFamily ; 
	1564:	WCHAR lfFaceName [ 32 ] ; 
	1565:	} LOGFONTW , * PLOGFONTW , * LPLOGFONTW ; 
	1566:	typedef struct tagEXTLOGFONTA { 
	1567:	LOGFONTA elfLogFont ; 
	1568:	BYTE elfFullName [ 64 ] ; 
	1569:	BYTE elfStyle [ 32 ] ; 
	1570:	DWORD elfVersion ; 
	1571:	DWORD elfStyleSize ; 
	1572:	DWORD elfMatch ; 
	1573:	DWORD elfReserved ; 
	1574:	BYTE elfVendorId [ 4 ] ; 
	1575:	DWORD elfCulture ; 
	1576:	PANOSE elfPanose ; 
	1577:	} EXTLOGFONTA , * PEXTLOGFONTA , * LPEXTLOGFONTA ; 
	1578:	typedef struct tagEXTLOGFONTW { 
	1579:	LOGFONTW elfLogFont ; 
	1580:	WCHAR elfFullName [ 64 ] ; 
	1581:	WCHAR elfStyle [ 32 ] ; 
	1582:	DWORD elfVersion ; 
	1583:	DWORD elfStyleSize ; 
	1584:	DWORD elfMatch ; 
	1585:	DWORD elfReserved ; 
	1586:	BYTE elfVendorId [ 4 ] ; 
	1587:	DWORD elfCulture ; 
	1588:	PANOSE elfPanose ; 
	1589:	} EXTLOGFONTW , * PEXTLOGFONTW , * LPEXTLOGFONTW ; 
	1590:	typedef struct tagEMREXTCREATEFONTINDIRECTW { 
	1591:	EMR emr ; 
	1592:	DWORD ihFont ; 
	1593:	EXTLOGFONTW elfw ; 
	1594:	} EMREXTCREATEFONTINDIRECTW , * PEMREXTCREATEFONTINDIRECTW ; 
	1595:	typedef struct tagEXTLOGPEN { 
	1596:	UINT elpPenStyle ; 
	1597:	UINT elpWidth ; 
	1598:	UINT elpBrushStyle ; 
	1599:	COLORREF elpColor ; 
	1600:	LONG elpHatch ; 
	1601:	DWORD elpNumEntries ; 
	1602:	DWORD elpStyleEntry [ 1 ] ; 
	1603:	} EXTLOGPEN , * PEXTLOGPEN , * LPEXTLOGPEN ; 
	1604:	typedef struct tagEMREXTCREATEPEN { 
	1605:	EMR emr ; 
	1606:	DWORD ihPen ; 
	1607:	DWORD offBmi ; 
	1608:	DWORD cbBmi ; 
	1609:	DWORD offBits ; 
	1610:	DWORD cbBits ; 
	1611:	EXTLOGPEN elp ; 
	1612:	} EMREXTCREATEPEN , * PEMREXTCREATEPEN ; 
	1613:	typedef struct tagEMREXTFLOODFILL { 
	1614:	EMR emr ; 
	1615:	POINTL ptlStart ; 
	1616:	COLORREF crColor ; 
	1617:	DWORD iMode ; 
	1618:	} EMREXTFLOODFILL , * PEMREXTFLOODFILL ; 
	1619:	typedef struct tagEMREXTSELECTCLIPRGN { 
	1620:	EMR emr ; 
	1621:	DWORD cbRgnData ; 
	1622:	DWORD iMode ; 
	1623:	BYTE RgnData [ 1 ] ; 
	1624:	} EMREXTSELECTCLIPRGN , * PEMREXTSELECTCLIPRGN ; 
	1625:	typedef struct tagEMRTEXT { 
	1626:	POINTL ptlReference ; 
	1627:	DWORD nChars ; 
	1628:	DWORD offString ; 
	1629:	DWORD fOptions ; 
	1630:	RECTL rcl ; 
	1631:	DWORD offDx ; 
	1632:	} EMRTEXT , * PEMRTEXT ; 
	1633:	typedef struct tagEMREXTTEXTOUTA { 
	1634:	EMR emr ; 
	1635:	RECTL rclBounds ; 
	1636:	DWORD iGraphicsMode ; 
	1637:	FLOAT exScale ; 
	1638:	FLOAT eyScale ; 
	1639:	EMRTEXT emrtext ; 
	1640:	} EMREXTTEXTOUTA , * PEMREXTTEXTOUTA , EMREXTTEXTOUTW , * PEMREXTTEXTOUTW ; 
	1641:	typedef struct tagEMRFILLPATH { 
	1642:	EMR emr ; 
	1643:	RECTL rclBounds ; 
	1644:	} EMRFILLPATH , * PEMRFILLPATH , EMRSTROKEANDFILLPATH , * PEMRSTROKEANDFILLPATH , EMRSTROKEPATH , * PEMRSTROKEPATH ; 
	1645:	typedef struct tagEMRFILLRGN { 
	1646:	EMR emr ; 
	1647:	RECTL rclBounds ; 
	1648:	DWORD cbRgnData ; 
	1649:	DWORD ihBrush ; 
	1650:	BYTE RgnData [ 1 ] ; 
	1651:	} EMRFILLRGN , * PEMRFILLRGN ; 
	1652:	typedef struct tagEMRFORMAT { 
	1653:	DWORD dSignature ; 
	1654:	DWORD nVersion ; 
	1655:	DWORD cbData ; 
	1656:	DWORD offData ; 
	1657:	} EMRFORMAT ; 
	1658:	typedef struct tagEMRFRAMERGN { 
	1659:	EMR emr ; 
	1660:	RECTL rclBounds ; 
	1661:	DWORD cbRgnData ; 
	1662:	DWORD ihBrush ; 
	1663:	SIZEL szlStroke ; 
	1664:	BYTE RgnData [ 1 ] ; 
	1665:	} EMRFRAMERGN , * PEMRFRAMERGN ; 
	1666:	typedef struct tagEMRGDICOMMENT { 
	1667:	EMR emr ; 
	1668:	DWORD cbData ; 
	1669:	BYTE Data [ 1 ] ; 
	1670:	} EMRGDICOMMENT , * PEMRGDICOMMENT ; 
	1671:	typedef struct tagEMRINVERTRGN { 
	1672:	EMR emr ; 
	1673:	RECTL rclBounds ; 
	1674:	DWORD cbRgnData ; 
	1675:	BYTE RgnData [ 1 ] ; 
	1676:	} EMRINVERTRGN , * PEMRINVERTRGN , EMRPAINTRGN , * PEMRPAINTRGN ; 
	1677:	typedef struct tagEMRLINETO { 
	1678:	EMR emr ; 
	1679:	POINTL ptl ; 
	1680:	} EMRLINETO , * PEMRLINETO , EMRMOVETOEX , * PEMRMOVETOEX ; 
	1681:	typedef struct tagEMRMASKBLT { 
	1682:	EMR emr ; 
	1683:	RECTL rclBounds ; 
	1684:	LONG xDest ; 
	1685:	LONG yDest ; 
	1686:	LONG cxDest ; 
	1687:	LONG cyDest ; 
	1688:	DWORD dwRop ; 
	1689:	LONG xSrc ; 
	1690:	LONG ySrc ; 
	1691:	XFORM xformSrc ; 
	1692:	COLORREF crBkColorSrc ; 
	1693:	DWORD iUsageSrc ; 
	1694:	DWORD offBmiSrc ; 
	1695:	DWORD cbBmiSrc ; 
	1696:	DWORD offBitsSrc ; 
	1697:	DWORD cbBitsSrc ; 
	1698:	LONG xMask ; 
	1699:	LONG yMask ; 
	1700:	DWORD iUsageMask ; 
	1701:	DWORD offBmiMask ; 
	1702:	DWORD cbBmiMask ; 
	1703:	DWORD offBitsMask ; 
	1704:	DWORD cbBitsMask ; 
	1705:	} EMRMASKBLT , * PEMRMASKBLT ; 
	1706:	typedef struct tagEMRMODIFYWORLDTRANSFORM { 
	1707:	EMR emr ; 
	1708:	XFORM xform ; 
	1709:	DWORD iMode ; 
	1710:	} EMRMODIFYWORLDTRANSFORM , * PEMRMODIFYWORLDTRANSFORM ; 
	1711:	typedef struct tagEMROFFSETCLIPRGN { 
	1712:	EMR emr ; 
	1713:	POINTL ptlOffset ; 
	1714:	} EMROFFSETCLIPRGN , * PEMROFFSETCLIPRGN ; 
	1715:	typedef struct tagEMRPLGBLT { 
	1716:	EMR emr ; 
	1717:	RECTL rclBounds ; 
	1718:	POINTL aptlDest [ 3 ] ; 
	1719:	LONG xSrc ; 
	1720:	LONG ySrc ; 
	1721:	LONG cxSrc ; 
	1722:	LONG cySrc ; 
	1723:	XFORM xformSrc ; 
	1724:	COLORREF crBkColorSrc ; 
	1725:	DWORD iUsageSrc ; 
	1726:	DWORD offBmiSrc ; 
	1727:	DWORD cbBmiSrc ; 
	1728:	DWORD offBitsSrc ; 
	1729:	DWORD cbBitsSrc ; 
	1730:	LONG xMask ; 
	1731:	LONG yMask ; 
	1732:	DWORD iUsageMask ; 
	1733:	DWORD offBmiMask ; 
	1734:	DWORD cbBmiMask ; 
	1735:	DWORD offBitsMask ; 
	1736:	DWORD cbBitsMask ; 
	1737:	} EMRPLGBLT , * PEMRPLGBLT ; 
	1738:	typedef struct tagEMRPOLYDRAW { 
	1739:	EMR emr ; 
	1740:	RECTL rclBounds ; 
	1741:	DWORD cptl ; 
	1742:	POINTL aptl [ 1 ] ; 
	1743:	BYTE abTypes [ 1 ] ; 
	1744:	} EMRPOLYDRAW , * PEMRPOLYDRAW ; 
	1745:	typedef struct tagEMRPOLYDRAW16 { 
	1746:	EMR emr ; 
	1747:	RECTL rclBounds ; 
	1748:	DWORD cpts ; 
	1749:	POINTS apts [ 1 ] ; 
	1750:	BYTE abTypes [ 1 ] ; 
	1751:	} EMRPOLYDRAW16 , * PEMRPOLYDRAW16 ; 
	1752:	typedef struct tagEMRPOLYLINE { 
	1753:	EMR emr ; 
	1754:	RECTL rclBounds ; 
	1755:	DWORD cptl ; 
	1756:	POINTL aptl [ 1 ] ; 
	1757:	} EMRPOLYLINE , * PEMRPOLYLINE , EMRPOLYBEZIER , * PEMRPOLYBEZIER , EMRPOLYGON , * PEMRPOLYGON , EMRPOLYBEZIERTO , * PEMRPOLYBEZIERTO , EMRPOLYLINETO , * PEMRPOLYLINETO ; 
	1758:	typedef struct tagEMRPOLYLINE16 { 
	1759:	EMR emr ; 
	1760:	RECTL rclBounds ; 
	1761:	DWORD cpts ; 
	1762:	POINTL apts [ 1 ] ; 
	1763:	} EMRPOLYLINE16 , * PEMRPOLYLINE16 , EMRPOLYBEZIER16 , * PEMRPOLYBEZIER16 , EMRPOLYGON16 , * PEMRPOLYGON16 , EMRPOLYBEZIERTO16 , * PEMRPOLYBEZIERTO16 , EMRPOLYLINETO16 , * PEMRPOLYLINETO16 ; 
	1764:	typedef struct tagEMRPOLYPOLYLINE { 
	1765:	EMR emr ; 
	1766:	RECTL rclBounds ; 
	1767:	DWORD nPolys ; 
	1768:	DWORD cptl ; 
	1769:	DWORD aPolyCounts [ 1 ] ; 
	1770:	POINTL aptl [ 1 ] ; 
	1771:	} EMRPOLYPOLYLINE , * PEMRPOLYPOLYLINE , EMRPOLYPOLYGON , * PEMRPOLYPOLYGON ; 
	1772:	typedef struct tagEMRPOLYPOLYLINE16 { 
	1773:	EMR emr ; 
	1774:	RECTL rclBounds ; 
	1775:	DWORD nPolys ; 
	1776:	DWORD cpts ; 
	1777:	DWORD aPolyCounts [ 1 ] ; 
	1778:	POINTS apts [ 1 ] ; 
	1779:	} EMRPOLYPOLYLINE16 , * PEMRPOLYPOLYLINE16 , EMRPOLYPOLYGON16 , * PEMRPOLYPOLYGON16 ; 
	1780:	typedef struct tagEMRPOLYTEXTOUTA { 
	1781:	EMR emr ; 
	1782:	RECTL rclBounds ; 
	1783:	DWORD iGraphicsMode ; 
	1784:	FLOAT exScale ; 
	1785:	FLOAT eyScale ; 
	1786:	LONG cStrings ; 
	1787:	EMRTEXT aemrtext [ 1 ] ; 
	1788:	} EMRPOLYTEXTOUTA , * PEMRPOLYTEXTOUTA , EMRPOLYTEXTOUTW , * PEMRPOLYTEXTOUTW ; 
	1789:	typedef struct tagEMRRESIZEPALETTE { 
	1790:	EMR emr ; 
	1791:	DWORD ihPal ; 
	1792:	DWORD cEntries ; 
	1793:	} EMRRESIZEPALETTE , * PEMRRESIZEPALETTE ; 
	1794:	typedef struct tagEMRRESTOREDC { 
	1795:	EMR emr ; 
	1796:	LONG iRelative ; 
	1797:	} EMRRESTOREDC , * PEMRRESTOREDC ; 
	1798:	typedef struct tagEMRROUNDRECT { 
	1799:	EMR emr ; 
	1800:	RECTL rclBox ; 
	1801:	SIZEL szlCorner ; 
	1802:	} EMRROUNDRECT , * PEMRROUNDRECT ; 
	1803:	typedef struct tagEMRSCALEVIEWPORTEXTEX { 
	1804:	EMR emr ; 
	1805:	LONG xNum ; 
	1806:	LONG xDenom ; 
	1807:	LONG yNum ; 
	1808:	LONG yDenom ; 
	1809:	} EMRSCALEVIEWPORTEXTEX , * PEMRSCALEVIEWPORTEXTEX , EMRSCALEWINDOWEXTEX , * PEMRSCALEWINDOWEXTEX ; 
	1810:	typedef struct tagEMRSELECTCOLORSPACE { 
	1811:	EMR emr ; 
	1812:	DWORD ihCS ; 
	1813:	} EMRSELECTCOLORSPACE , * PEMRSELECTCOLORSPACE , EMRDELETECOLORSPACE , * PEMRDELETECOLORSPACE ; 
	1814:	typedef struct tagEMRSELECTOBJECT { 
	1815:	EMR emr ; 
	1816:	DWORD ihObject ; 
	1817:	} EMRSELECTOBJECT , * PEMRSELECTOBJECT , EMRDELETEOBJECT , * PEMRDELETEOBJECT ; 
	1818:	typedef struct tagEMRSELECTPALETTE { 
	1819:	EMR emr ; 
	1820:	DWORD ihPal ; 
	1821:	} EMRSELECTPALETTE , * PEMRSELECTPALETTE ; 
	1822:	typedef struct tagEMRSETARCDIRECTION { 
	1823:	EMR emr ; 
	1824:	DWORD iArcDirection ; 
	1825:	} EMRSETARCDIRECTION , * PEMRSETARCDIRECTION ; 
	1826:	typedef struct tagEMRSETTEXTCOLOR { 
	1827:	EMR emr ; 
	1828:	COLORREF crColor ; 
	1829:	} EMRSETBKCOLOR , * PEMRSETBKCOLOR , EMRSETTEXTCOLOR , * PEMRSETTEXTCOLOR ; 
	1830:	typedef struct tagEMRSETCOLORADJUSTMENT { 
	1831:	EMR emr ; 
	1832:	COLORADJUSTMENT ColorAdjustment ; 
	1833:	} EMRSETCOLORADJUSTMENT , * PEMRSETCOLORADJUSTMENT ; 
	1834:	typedef struct tagEMRSETDIBITSTODEVICE { 
	1835:	EMR emr ; 
	1836:	RECTL rclBounds ; 
	1837:	LONG xDest ; 
	1838:	LONG yDest ; 
	1839:	LONG xSrc ; 
	1840:	LONG ySrc ; 
	1841:	LONG cxSrc ; 
	1842:	LONG cySrc ; 
	1843:	DWORD offBmiSrc ; 
	1844:	DWORD cbBmiSrc ; 
	1845:	DWORD offBitsSrc ; 
	1846:	DWORD cbBitsSrc ; 
	1847:	DWORD iUsageSrc ; 
	1848:	DWORD iStartScan ; 
	1849:	DWORD cScans ; 
	1850:	} EMRSETDIBITSTODEVICE , * PEMRSETDIBITSTODEVICE ; 
	1851:	typedef struct tagEMRSETMAPPERFLAGS { 
	1852:	EMR emr ; 
	1853:	DWORD dwFlags ; 
	1854:	} EMRSETMAPPERFLAGS , * PEMRSETMAPPERFLAGS ; 
	1855:	typedef struct tagEMRSETMITERLIMIT { 
	1856:	EMR emr ; 
	1857:	FLOAT eMiterLimit ; 
	1858:	} EMRSETMITERLIMIT , * PEMRSETMITERLIMIT ; 
	1859:	typedef struct tagEMRSETPALETTEENTRIES { 
	1860:	EMR emr ; 
	1861:	DWORD ihPal ; 
	1862:	DWORD iStart ; 
	1863:	DWORD cEntries ; 
	1864:	PALETTEENTRY aPalEntries [ 1 ] ; 
	1865:	} EMRSETPALETTEENTRIES , * PEMRSETPALETTEENTRIES ; 
	1866:	typedef struct tagEMRSETPIXELV { 
	1867:	EMR emr ; 
	1868:	POINTL ptlPixel ; 
	1869:	COLORREF crColor ; 
	1870:	} EMRSETPIXELV , * PEMRSETPIXELV ; 
	1871:	typedef struct tagEMRSETVIEWPORTEXTEX { 
	1872:	EMR emr ; 
	1873:	SIZEL szlExtent ; 
	1874:	} EMRSETVIEWPORTEXTEX , * PEMRSETVIEWPORTEXTEX , EMRSETWINDOWEXTEX , * PEMRSETWINDOWEXTEX ; 
	1875:	typedef struct tagEMRSETVIEWPORTORGEX { 
	1876:	EMR emr ; 
	1877:	POINTL ptlOrigin ; 
	1878:	} EMRSETVIEWPORTORGEX , * PEMRSETVIEWPORTORGEX , EMRSETWINDOWORGEX , * PEMRSETWINDOWORGEX , EMRSETBRUSHORGEX , * PEMRSETBRUSHORGEX ; 
	1879:	typedef struct tagEMRSETWORLDTRANSFORM { 
	1880:	EMR emr ; 
	1881:	XFORM xform ; 
	1882:	} EMRSETWORLDTRANSFORM , * PEMRSETWORLDTRANSFORM ; 
	1883:	typedef struct tagEMRSTRETCHBLT { 
	1884:	EMR emr ; 
	1885:	RECTL rclBounds ; 
	1886:	LONG xDest ; 
	1887:	LONG yDest ; 
	1888:	LONG cxDest ; 
	1889:	LONG cyDest ; 
	1890:	DWORD dwRop ; 
	1891:	LONG xSrc ; 
	1892:	LONG ySrc ; 
	1893:	XFORM xformSrc ; 
	1894:	COLORREF crBkColorSrc ; 
	1895:	DWORD iUsageSrc ; 
	1896:	DWORD offBmiSrc ; 
	1897:	DWORD cbBmiSrc ; 
	1898:	DWORD offBitsSrc ; 
	1899:	DWORD cbBitsSrc ; 
	1900:	LONG cxSrc ; 
	1901:	LONG cySrc ; 
	1902:	} EMRSTRETCHBLT , * PEMRSTRETCHBLT ; 
	1903:	typedef struct tagEMRSTRETCHDIBITS { 
	1904:	EMR emr ; 
	1905:	RECTL rclBounds ; 
	1906:	LONG xDest ; 
	1907:	LONG yDest ; 
	1908:	LONG xSrc ; 
	1909:	LONG ySrc ; 
	1910:	LONG cxSrc ; 
	1911:	LONG cySrc ; 
	1912:	DWORD offBmiSrc ; 
	1913:	DWORD cbBmiSrc ; 
	1914:	DWORD offBitsSrc ; 
	1915:	DWORD cbBitsSrc ; 
	1916:	DWORD iUsageSrc ; 
	1917:	DWORD dwRop ; 
	1918:	LONG cxDest ; 
	1919:	LONG cyDest ; 
	1920:	} EMRSTRETCHDIBITS , * PEMRSTRETCHDIBITS ; 
	1921:	typedef struct tagABORTPATH { 
	1922:	EMR emr ; 
	1923:	} EMRABORTPATH , * PEMRABORTPATH , EMRBEGINPATH , * PEMRBEGINPATH , EMRENDPATH , * PEMRENDPATH , EMRCLOSEFIGURE , * PEMRCLOSEFIGURE , EMRFLATTENPATH , * PEMRFLATTENPATH , EMRWIDENPATH , * PEMRWIDENPATH , EMRSETMETARGN , * PEMRSETMETARGN , EMRSAVEDC , * PEMRSAVEDC , EMRREALIZEPALETTE , * PEMRREALIZEPALETTE ; 
	1924:	typedef struct tagEMRSELECTCLIPPATH { 
	1925:	EMR emr ; 
	1926:	DWORD iMode ; 
	1927:	} EMRSELECTCLIPPATH , * PEMRSELECTCLIPPATH , EMRSETBKMODE , * PEMRSETBKMODE , EMRSETMAPMODE , * PEMRSETMAPMODE , EMRSETPOLYFILLMODE , * PEMRSETPOLYFILLMODE , EMRSETROP2 , * PEMRSETROP2 , EMRSETSTRETCHBLTMODE , * PEMRSETSTRETCHBLTMODE , EMRSETTEXTALIGN , * PEMRSETTEXTALIGN , EMRENABLEICM , * PEMRENABLEICM ; 
	1929:	typedef struct tagMETAHEADER { 
	1930:	WORD mtType ; 
	1931:	WORD mtHeaderSize ; 
	1932:	WORD mtVersion ; 
	1933:	DWORD mtSize ; 
	1934:	WORD mtNoObjects ; 
	1935:	DWORD mtMaxRecord ; 
	1936:	WORD mtNoParameters ; 
	1937:	} METAHEADER , * PMETAHEADER , * LPMETAHEADER ; 
	1939:	typedef struct tagENHMETAHEADER { 
	1940:	DWORD iType ; 
	1941:	DWORD nSize ; 
	1942:	RECTL rclBounds ; 
	1943:	RECTL rclFrame ; 
	1944:	DWORD dSignature ; 
	1945:	DWORD nVersion ; 
	1946:	DWORD nBytes ; 
	1947:	DWORD nRecords ; 
	1948:	WORD nHandles ; 
	1949:	WORD sReserved ; 
	1950:	DWORD nDescription ; 
	1951:	DWORD offDescription ; 
	1952:	DWORD nPalEntries ; 
	1953:	SIZEL szlDevice ; 
	1954:	SIZEL szlMillimeters ; 
	1955:	} ENHMETAHEADER , * LPENHMETAHEADER ; 
	1956:	typedef struct tagMETARECORD { 
	1957:	DWORD rdSize ; 
	1958:	WORD rdFunction ; 
	1959:	WORD rdParm [ 1 ] ; 
	1960:	} METARECORD , * PMETARECORD , * LPMETARECORD ; 
	1961:	typedef struct tagENHMETARECORD { 
	1962:	DWORD iType ; 
	1963:	DWORD nSize ; 
	1964:	DWORD dParm [ 1 ] ; 
	1965:	} ENHMETARECORD , * LPENHMETARECORD ; 
	1966:	typedef struct tagHANDLETABLE { 
	1967:	HGDIOBJ objectHandle [ 1 ] ; 
	1968:	} HANDLETABLE , * LPHANDLETABLE ; 
	1969:	typedef struct tagTEXTMETRICA { 
	1970:	LONG tmHeight ; 
	1971:	LONG tmAscent ; 
	1972:	LONG tmDescent ; 
	1973:	LONG tmInternalLeading ; 
	1974:	LONG tmExternalLeading ; 
	1975:	LONG tmAveCharWidth ; 
	1976:	LONG tmMaxCharWidth ; 
	1977:	LONG tmWeight ; 
	1978:	LONG tmOverhang ; 
	1979:	LONG tmDigitizedAspectX ; 
	1980:	LONG tmDigitizedAspectY ; 
	1981:	BYTE tmFirstChar ; 
	1982:	BYTE tmLastChar ; 
	1983:	BYTE tmDefaultChar ; 
	1984:	BYTE tmBreakChar ; 
	1985:	BYTE tmItalic ; 
	1986:	BYTE tmUnderlined ; 
	1987:	BYTE tmStruckOut ; 
	1988:	BYTE tmPitchAndFamily ; 
	1989:	BYTE tmCharSet ; 
	1990:	} TEXTMETRICA , * PTEXTMETRICA , * LPTEXTMETRICA ; 
	1991:	typedef struct tagTEXTMETRICW { 
	1992:	LONG tmHeight ; 
	1993:	LONG tmAscent ; 
	1994:	LONG tmDescent ; 
	1995:	LONG tmInternalLeading ; 
	1996:	LONG tmExternalLeading ; 
	1997:	LONG tmAveCharWidth ; 
	1998:	LONG tmMaxCharWidth ; 
	1999:	LONG tmWeight ; 
	2000:	LONG tmOverhang ; 
	2001:	LONG tmDigitizedAspectX ; 
	2002:	LONG tmDigitizedAspectY ; 
	2003:	WCHAR tmFirstChar ; 
	2004:	WCHAR tmLastChar ; 
	2005:	WCHAR tmDefaultChar ; 
	2006:	WCHAR tmBreakChar ; 
	2007:	BYTE tmItalic ; 
	2008:	BYTE tmUnderlined ; 
	2009:	BYTE tmStruckOut ; 
	2010:	BYTE tmPitchAndFamily ; 
	2011:	BYTE tmCharSet ; 
	2012:	} TEXTMETRICW , * PTEXTMETRICW , * LPTEXTMETRICW ; 
	2013:	typedef struct _RGNDATAHEADER { 
	2014:	DWORD dwSize ; 
	2015:	DWORD iType ; 
	2016:	DWORD nCount ; 
	2017:	DWORD nRgnSize ; 
	2018:	RECT rcBound ; 
	2019:	} RGNDATAHEADER ; 
	2020:	typedef struct _RGNDATA { 
	2021:	RGNDATAHEADER rdh ; 
	2022:	char Buffer [ 1 ] ; 
	2023:	} RGNDATA , * LPRGNDATA ; 
	2026:	typedef struct tagGCP_RESULTSA { 
	2027:	DWORD lStructSize ; 
	2028:	LPSTR lpOutString ; 
	2029:	UINT * lpOrder ; 
	2030:	INT * lpDx ; 
	2031:	INT * lpCaretPos ; 
	2032:	LPSTR lpClass ; 
	2033:	UINT * lpGlyphs ; 
	2034:	UINT nGlyphs ; 
	2035:	UINT nMaxFit ; 
	2036:	} GCP_RESULTSA , * LPGCP_RESULTSA ; 
	2037:	typedef struct tagGCP_RESULTSW { 
	2038:	DWORD lStructSize ; 
	2039:	LPWSTR lpOutString ; 
	2040:	UINT * lpOrder ; 
	2041:	INT * lpDx ; 
	2042:	INT * lpCaretPos ; 
	2043:	LPWSTR lpClass ; 
	2044:	UINT * lpGlyphs ; 
	2045:	UINT nGlyphs ; 
	2046:	UINT nMaxFit ; 
	2047:	} GCP_RESULTSW , * LPGCP_RESULTSW ; 
	2048:	typedef struct _GLYPHMETRICS { 
	2049:	UINT gmBlackBoxX ; 
	2050:	UINT gmBlackBoxY ; 
	2051:	POINT gmptGlyphOrigin ; 
	2052:	short gmCellIncX ; 
	2053:	short gmCellIncY ; 
	2054:	} GLYPHMETRICS , * LPGLYPHMETRICS ; 
	2055:	typedef struct tagKERNINGPAIR { 
	2056:	WORD wFirst ; 
	2057:	WORD wSecond ; 
	2058:	int iKernAmount ; 
	2059:	} KERNINGPAIR , * LPKERNINGPAIR ; 
	2060:	typedef struct _FIXED { 
	2061:	WORD fract ; 
	2062:	short value ; 
	2063:	} FIXED ; 
	2064:	typedef struct _MAT2 { 
	2065:	FIXED eM11 ; 
	2066:	FIXED eM12 ; 
	2067:	FIXED eM21 ; 
	2068:	FIXED eM22 ; 
	2069:	} MAT2 , * LPMAT2 ; 
	2070:	typedef struct _OUTLINETEXTMETRICA { 
	2071:	UINT otmSize ; 
	2072:	TEXTMETRICA otmTextMetrics ; 
	2073:	BYTE otmFiller ; 
	2074:	PANOSE otmPanoseNumber ; 
	2075:	UINT otmfsSelection ; 
	2076:	UINT otmfsType ; 
	2077:	int otmsCharSlopeRise ; 
	2078:	int otmsCharSlopeRun ; 
	2079:	int otmItalicAngle ; 
	2080:	UINT otmEMSquare ; 
	2081:	int otmAscent ; 
	2082:	int otmDescent ; 
	2083:	UINT otmLineGap ; 
	2084:	UINT otmsCapEmHeight ; 
	2085:	UINT otmsXHeight ; 
	2086:	RECT otmrcFontBox ; 
	2087:	int otmMacAscent ; 
	2088:	int otmMacDescent ; 
	2089:	UINT otmMacLineGap ; 
	2090:	UINT otmusMinimumPPEM ; 
	2091:	POINT otmptSubscriptSize ; 
	2092:	POINT otmptSubscriptOffset ; 
	2093:	POINT otmptSuperscriptSize ; 
	2094:	POINT otmptSuperscriptOffset ; 
	2095:	UINT otmsStrikeoutSize ; 
	2096:	int otmsStrikeoutPosition ; 
	2097:	int otmsUnderscoreSize ; 
	2098:	int otmsUnderscorePosition ; 
	2099:	PSTR otmpFamilyName ; 
	2100:	PSTR otmpFaceName ; 
	2101:	PSTR otmpStyleName ; 
	2102:	PSTR otmpFullName ; 
	2103:	} OUTLINETEXTMETRICA , * POUTLINETEXTMETRICA , * LPOUTLINETEXTMETRICA ; 
	2104:	typedef struct _OUTLINETEXTMETRICW { 
	2105:	UINT otmSize ; 
	2106:	TEXTMETRICW otmTextMetrics ; 
	2107:	BYTE otmFiller ; 
	2108:	PANOSE otmPanoseNumber ; 
	2109:	UINT otmfsSelection ; 
	2110:	UINT otmfsType ; 
	2111:	int otmsCharSlopeRise ; 
	2112:	int otmsCharSlopeRun ; 
	2113:	int otmItalicAngle ; 
	2114:	UINT otmEMSquare ; 
	2115:	int otmAscent ; 
	2116:	int otmDescent ; 
	2117:	UINT otmLineGap ; 
	2118:	UINT otmsCapEmHeight ; 
	2119:	UINT otmsXHeight ; 
	2120:	RECT otmrcFontBox ; 
	2121:	int otmMacAscent ; 
	2122:	int otmMacDescent ; 
	2123:	UINT otmMacLineGap ; 
	2124:	UINT otmusMinimumPPEM ; 
	2125:	POINT otmptSubscriptSize ; 
	2126:	POINT otmptSubscriptOffset ; 
	2127:	POINT otmptSuperscriptSize ; 
	2128:	POINT otmptSuperscriptOffset ; 
	2129:	UINT otmsStrikeoutSize ; 
	2130:	int otmsStrikeoutPosition ; 
	2131:	int otmsUnderscoreSize ; 
	2132:	int otmsUnderscorePosition ; 
	2133:	PSTR otmpFamilyName ; 
	2134:	PSTR otmpFaceName ; 
	2135:	PSTR otmpStyleName ; 
	2136:	PSTR otmpFullName ; 
	2137:	} OUTLINETEXTMETRICW , * POUTLINETEXTMETRICW , * LPOUTLINETEXTMETRICW ; 
	2138:	typedef struct _RASTERIZER_STATUS { 
	2139:	short nSize ; 
	2140:	short wFlags ; 
	2141:	short nLanguageID ; 
	2142:	} RASTERIZER_STATUS , * LPRASTERIZER_STATUS ; 
	2143:	typedef struct _POLYTEXTA { 
	2144:	int x ; 
	2145:	int y ; 
	2146:	UINT n ; 
	2147:	LPCSTR lpstr ; 
	2148:	UINT uiFlags ; 
	2149:	RECT rcl ; 
	2150:	int * pdx ; 
	2151:	} POLYTEXTA ; 
	2152:	typedef struct _POLYTEXTW { 
	2153:	int x ; 
	2154:	int y ; 
	2155:	UINT n ; 
	2156:	LPCWSTR lpstr ; 
	2157:	UINT uiFlags ; 
	2158:	RECT rcl ; 
	2159:	int * pdx ; 
	2160:	} POLYTEXTW ; 
	2161:	typedef struct tagPIXELFORMATDESCRIPTOR { 
	2162:	WORD nSize ; 
	2163:	WORD nVersion ; 
	2164:	DWORD dwFlags ; 
	2165:	BYTE iPixelType ; 
	2166:	BYTE cColorBits ; 
	2167:	BYTE cRedBits ; 
	2168:	BYTE cRedShift ; 
	2169:	BYTE cGreenBits ; 
	2170:	BYTE cGreenShift ; 
	2171:	BYTE cBlueBits ; 
	2172:	BYTE cBlueShift ; 
	2173:	BYTE cAlphaBits ; 
	2174:	BYTE cAlphaShift ; 
	2175:	BYTE cAccumBits ; 
	2176:	BYTE cAccumRedBits ; 
	2177:	BYTE cAccumGreenBits ; 
	2178:	BYTE cAccumBlueBits ; 
	2179:	BYTE cAccumAlphaBits ; 
	2180:	BYTE cDepthBits ; 
	2181:	BYTE cStencilBits ; 
	2182:	BYTE cAuxBuffers ; 
	2183:	BYTE iLayerType ; 
	2184:	BYTE bReserved ; 
	2185:	DWORD dwLayerMask ; 
	2186:	DWORD dwVisibleMask ; 
	2187:	DWORD dwDamageMask ; 
	2188:	} PIXELFORMATDESCRIPTOR , * PPIXELFORMATDESCRIPTOR , * LPPIXELFORMATDESCRIPTOR ; 
	2189:	typedef struct tagMETAFILEPICT { 
	2190:	LONG mm ; 
	2191:	LONG xExt ; 
	2192:	LONG yExt ; 
	2193:	HMETAFILE hMF ; 
	2194:	} METAFILEPICT , * LPMETAFILEPICT ; 
	2195:	typedef struct tagLOCALESIGNATURE { 
	2196:	DWORD lsUsb [ 4 ] ; 
	2197:	DWORD lsCsbDefault [ 2 ] ; 
	2198:	DWORD lsCsbSupported [ 2 ] ; 
	2199:	} LOCALESIGNATURE , * PLOCALESIGNATURE , * LPLOCALESIGNATURE ; 
	2200:	typedef LONG LCSTYPE ; 
	2202:	typedef struct tagNEWTEXTMETRICA { 
	2203:	LONG tmHeight ; 
	2204:	LONG tmAscent ; 
	2205:	LONG tmDescent ; 
	2206:	LONG tmInternalLeading ; 
	2207:	LONG tmExternalLeading ; 
	2208:	LONG tmAveCharWidth ; 
	2209:	LONG tmMaxCharWidth ; 
	2210:	LONG tmWeight ; 
	2211:	LONG tmOverhang ; 
	2212:	LONG tmDigitizedAspectX ; 
	2213:	LONG tmDigitizedAspectY ; 
	2214:	BYTE tmFirstChar ; 
	2215:	BYTE tmLastChar ; 
	2216:	BYTE tmDefaultChar ; 
	2217:	BYTE tmBreakChar ; 
	2218:	BYTE tmItalic ; 
	2219:	BYTE tmUnderlined ; 
	2220:	BYTE tmStruckOut ; 
	2221:	BYTE tmPitchAndFamily ; 
	2222:	BYTE tmCharSet ; 
	2223:	DWORD ntmFlags ; 
	2224:	UINT ntmSizeEM ; 
	2225:	UINT ntmCellHeight ; 
	2226:	UINT ntmAvgWidth ; 
	2227:	} NEWTEXTMETRICA , * PNEWTEXTMETRICA , * LPNEWTEXTMETRICA ; 
	2228:	typedef struct tagNEWTEXTMETRICW { 
	2229:	LONG tmHeight ; 
	2230:	LONG tmAscent ; 
	2231:	LONG tmDescent ; 
	2232:	LONG tmInternalLeading ; 
	2233:	LONG tmExternalLeading ; 
	2234:	LONG tmAveCharWidth ; 
	2235:	LONG tmMaxCharWidth ; 
	2236:	LONG tmWeight ; 
	2237:	LONG tmOverhang ; 
	2238:	LONG tmDigitizedAspectX ; 
	2239:	LONG tmDigitizedAspectY ; 
	2240:	WCHAR tmFirstChar ; 
	2241:	WCHAR tmLastChar ; 
	2242:	WCHAR tmDefaultChar ; 
	2243:	WCHAR tmBreakChar ; 
	2244:	BYTE tmItalic ; 
	2245:	BYTE tmUnderlined ; 
	2246:	BYTE tmStruckOut ; 
	2247:	BYTE tmPitchAndFamily ; 
	2248:	BYTE tmCharSet ; 
	2249:	DWORD ntmFlags ; 
	2250:	UINT ntmSizeEM ; 
	2251:	UINT ntmCellHeight ; 
	2252:	UINT ntmAvgWidth ; 
	2253:	} NEWTEXTMETRICW , * PNEWTEXTMETRICW , * LPNEWTEXTMETRICW ; 
	2255:	typedef struct tagNEWTEXTMETRICEXA { 
	2256:	NEWTEXTMETRICA ntmTm ; 
	2257:	FONTSIGNATURE ntmFontSig ; 
	2258:	} NEWTEXTMETRICEXA ; 
	2259:	typedef struct tagNEWTEXTMETRICEXW { 
	2260:	NEWTEXTMETRICW ntmTm ; 
	2261:	FONTSIGNATURE ntmFontSig ; 
	2262:	} NEWTEXTMETRICEXW ; 
	2263:	typedef struct tagPELARRAY { 
	2264:	LONG paXCount ; 
	2265:	LONG paYCount ; 
	2266:	LONG paXExt ; 
	2267:	LONG paYExt ; 
	2268:	BYTE paRGBs ; 
	2269:	} PELARRAY , * PPELARRAY , * LPPELARRAY ; 
	2270:	typedef struct tagENUMLOGFONTA { 
	2271:	LOGFONTA elfLogFont ; 
	2272:	BYTE elfFullName [ 64 ] ; 
	2273:	BYTE elfStyle [ 32 ] ; 
	2274:	} ENUMLOGFONTA , * LPENUMLOGFONTA ; 
	2275:	typedef struct tagENUMLOGFONTW { 
	2276:	LOGFONTW elfLogFont ; 
	2277:	WCHAR elfFullName [ 64 ] ; 
	2278:	WCHAR elfStyle [ 32 ] ; 
	2279:	} ENUMLOGFONTW , * LPENUMLOGFONTW ; 
	2280:	typedef struct tagENUMLOGFONTEXA { 
	2281:	LOGFONTA elfLogFont ; 
	2282:	BYTE elfFullName [ 64 ] ; 
	2283:	BYTE elfStyle [ 32 ] ; 
	2284:	BYTE elfScript [ 32 ] ; 
	2285:	} ENUMLOGFONTEXA , * LPENUMLOGFONTEXA ; 
	2286:	typedef struct tagENUMLOGFONTEXW { 
	2287:	LOGFONTW elfLogFont ; 
	2288:	WCHAR elfFullName [ 64 ] ; 
	2289:	BYTE elfStyle [ 32 ] ; 
	2290:	BYTE elfScript [ 32 ] ; 
	2291:	} ENUMLOGFONTEXW , * LPENUMLOGFONTEXW ; 
	2292:	typedef struct tagPOINTFX { 
	2293:	FIXED x ; 
	2294:	FIXED y ; 
	2295:	} POINTFX , * LPPOINTFX ; 
	2296:	typedef struct tagTTPOLYCURVE { 
	2297:	WORD wType ; 
	2298:	WORD cpfx ; 
	2299:	POINTFX apfx [ 1 ] ; 
	2300:	} TTPOLYCURVE , * LPTTPOLYCURVE ; 
	2301:	typedef struct tagTTPOLYGONHEADER { 
	2302:	DWORD cb ; 
	2303:	DWORD dwType ; 
	2304:	POINTFX pfxStart ; 
	2305:	} TTPOLYGONHEADER , * LPTTPOLYGONHEADER ; 
	2306:	typedef struct _POINTFLOAT { 
	2307:	FLOAT x ; 
	2308:	FLOAT y ; 
	2309:	} POINTFLOAT , * PPOINTFLOAT ; 
	2310:	typedef struct _GLYPHMETRICSFLOAT { 
	2311:	FLOAT gmfBlackBoxX ; 
	2312:	FLOAT gmfBlackBoxY ; 
	2313:	POINTFLOAT gmfptGlyphOrigin ; 
	2314:	FLOAT gmfCellIncX ; 
	2315:	FLOAT gmfCellIncY ; 
	2316:	} GLYPHMETRICSFLOAT , * PGLYPHMETRICSFLOAT , * LPGLYPHMETRICSFLOAT ; 
	2317:	typedef struct tagLAYERPLANEDESCRIPTOR { 
	2318:	WORD nSize ; 
	2319:	WORD nVersion ; 
	2320:	DWORD dwFlags ; 
	2321:	BYTE iPixelType ; 
	2322:	BYTE cColorBits ; 
	2323:	BYTE cRedBits ; 
	2324:	BYTE cRedShift ; 
	2325:	BYTE cGreenBits ; 
	2326:	BYTE cGreenShift ; 
	2327:	BYTE cBlueBits ; 
	2328:	BYTE cBlueShift ; 
	2329:	BYTE cAlphaBits ; 
	2330:	BYTE cAlphaShift ; 
	2331:	BYTE cAccumBits ; 
	2332:	BYTE cAccumRedBits ; 
	2333:	BYTE cAccumGreenBits ; 
	2334:	BYTE cAccumBlueBits ; 
	2335:	BYTE cAccumAlphaBits ; 
	2336:	BYTE cDepthBits ; 
	2337:	BYTE cStencilBits ; 
	2338:	BYTE cAuxBuffers ; 
	2339:	BYTE iLayerPlane ; 
	2340:	BYTE bReserved ; 
	2341:	COLORREF crTransparent ; 
	2342:	} LAYERPLANEDESCRIPTOR , * PLAYERPLANEDESCRIPTOR , * LPLAYERPLANEDESCRIPTOR ; 
	2343:	typedef struct _BLENDFUNCTION { 
	2344:	BYTE BlendOp ; 
	2345:	BYTE BlendFlags ; 
	2346:	BYTE SourceConstantAlpha ; 
	2347:	BYTE AlphaFormat ; 
	2348:	} BLENDFUNCTION , * PBLENDFUNCTION , * LPBLENDFUNCTION ; 
	2349:	typedef BOOL ( * ABORTPROC ) ( HDC , int ) ; 
	2350:	typedef int ( * MFENUMPROC ) ( HDC , HANDLETABLE * , METARECORD * , int , LPARAM ) ; 
	2351:	typedef int ( * ENHMFENUMPROC ) ( HDC , HANDLETABLE * , ENHMETARECORD * , int , LPARAM ) ; 
	2352:	typedef int ( * OLDFONTENUMPROCA ) ( const LOGFONTA * , const TEXTMETRICA * , DWORD , LPARAM ) ; 
	2353:	typedef int ( * OLDFONTENUMPROCW ) ( const LOGFONTW * , const TEXTMETRICW * , DWORD , LPARAM ) ; 
	2354:	typedef OLDFONTENUMPROCA FONTENUMPROCA ; 
	2355:	typedef OLDFONTENUMPROCW FONTENUMPROCW ; 
	2356:	typedef int ( * ICMENUMPROCA ) ( LPSTR , LPARAM ) ; 
	2357:	typedef int ( * ICMENUMPROCW ) ( LPWSTR , LPARAM ) ; 
	2358:	typedef void ( * GOBJENUMPROC ) ( LPVOID , LPARAM ) ; 
	2359:	typedef void ( * LINEDDAPROC ) ( int , int , LPARAM ) ; 
	2360:	typedef UINT ( * LPFNDEVMODE ) ( HWND , HMODULE , LPDEVMODEA , LPSTR , LPSTR , LPDEVMODEA , LPSTR , UINT ) ; 
	2361:	typedef DWORD ( * LPFNDEVCAPS ) ( LPSTR , LPSTR , UINT , LPSTR , LPDEVMODEA ) ; 
	2369:	int AbortDoc ( HDC ) ; 
	2370:	BOOL AbortPath ( HDC ) ; 
	2371:	int AddFontResourceA ( LPCSTR ) ; 
	2372:	int AddFontResourceW ( LPCWSTR ) ; 
	2373:	BOOL AngleArc ( HDC , int , int , DWORD , FLOAT , FLOAT ) ; 
	2374:	BOOL AnimatePalette ( HPALETTE , UINT , UINT , const PALETTEENTRY * ) ; 
	2375:	BOOL Arc ( HDC , int , int , int , int , int , int , int , int ) ; 
	2376:	BOOL ArcTo ( HDC , int , int , int , int , int , int , int , int ) ; 
	2377:	BOOL BeginPath ( HDC ) ; 
	2378:	BOOL BitBlt ( HDC , int , int , int , int , HDC , int , int , DWORD ) ; 
	2379:	BOOL CancelDC ( HDC ) ; 
	2380:	BOOL CheckColorsInGamut ( HDC , PVOID , PVOID , DWORD ) ; 
	2381:	BOOL Chord ( HDC , int , int , int , int , int , int , int , int ) ; 
	2382:	int ChoosePixelFormat ( HDC , const PIXELFORMATDESCRIPTOR * ) ; 
	2383:	HENHMETAFILE CloseEnhMetaFile ( HDC ) ; 
	2384:	BOOL CloseFigure ( HDC ) ; 
	2385:	HMETAFILE CloseMetaFile ( HDC ) ; 
	2386:	BOOL ColorMatchToTarget ( HDC , HDC , DWORD ) ; 
	2387:	int CombineRgn ( HRGN , HRGN , HRGN , int ) ; 
	2388:	BOOL CombineTransform ( LPXFORM , const XFORM * , const XFORM * ) ; 
	2389:	HENHMETAFILE CopyEnhMetaFileA ( HENHMETAFILE , LPCSTR ) ; 
	2390:	HENHMETAFILE CopyEnhMetaFileW ( HENHMETAFILE , LPCWSTR ) ; 
	2391:	HMETAFILE CopyMetaFileA ( HMETAFILE , LPCSTR ) ; 
	2392:	HMETAFILE CopyMetaFileW ( HMETAFILE , LPCWSTR ) ; 
	2393:	HBITMAP CreateBitmap ( int , int , UINT , UINT , PCVOID ) ; 
	2394:	HBITMAP CreateBitmapIndirect ( const BITMAP * ) ; 
	2395:	HBRUSH CreateBrushIndirect ( const LOGBRUSH * ) ; 
	2396:	HCOLORSPACE CreateColorSpaceA ( LPLOGCOLORSPACEA ) ; 
	2397:	HCOLORSPACE CreateColorSpaceW ( LPLOGCOLORSPACEW ) ; 
	2398:	HBITMAP CreateCompatibleBitmap ( HDC , int , int ) ; 
	2399:	HDC CreateCompatibleDC ( HDC ) ; 
	2400:	HDC CreateDCA ( LPCSTR , LPCSTR , LPCSTR , const DEVMODEA * ) ; 
	2401:	HDC CreateDCW ( LPCWSTR , LPCWSTR , LPCWSTR , const DEVMODEW * ) ; 
	2402:	HBITMAP CreateDIBitmap ( HDC , const BITMAPINFOHEADER * , DWORD , PCVOID , const BITMAPINFO * , UINT ) ; 
	2403:	HBRUSH CreateDIBPatternBrush ( HGLOBAL , UINT ) ; 
	2404:	HBRUSH CreateDIBPatternBrushPt ( PCVOID , UINT ) ; 
	2405:	HBITMAP CreateDIBSection ( HDC , const BITMAPINFO * , UINT , void * * , HANDLE , DWORD ) ; 
	2406:	HBITMAP CreateDiscardableBitmap ( HDC , int , int ) ; 
	2407:	HRGN CreateEllipticRgn ( int , int , int , int ) ; 
	2408:	HRGN CreateEllipticRgnIndirect ( LPCRECT ) ; 
	2409:	HDC CreateEnhMetaFileA ( HDC , LPCSTR , LPCRECT , LPCSTR ) ; 
	2410:	HDC CreateEnhMetaFileW ( HDC , LPCWSTR , LPCRECT , LPCWSTR ) ; 
	2411:	HFONT CreateFontA ( int , int , int , int , int , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , LPCSTR ) ; 
	2412:	HFONT CreateFontW ( int , int , int , int , int , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , LPCWSTR ) ; 
	2413:	HFONT CreateFontIndirectA ( const LOGFONTA * ) ; 
	2414:	HFONT CreateFontIndirectW ( const LOGFONTW * ) ; 
	2415:	HPALETTE CreateHalftonePalette ( HDC ) ; 
	2416:	HBRUSH CreateHatchBrush ( int , COLORREF ) ; 
	2417:	HDC CreateICA ( LPCSTR , LPCSTR , LPCSTR , const DEVMODEA * ) ; 
	2418:	HDC CreateICW ( LPCWSTR , LPCWSTR , LPCWSTR , const DEVMODEW * ) ; 
	2419:	HDC CreateMetaFileA ( LPCSTR ) ; 
	2420:	HDC CreateMetaFileW ( LPCWSTR ) ; 
	2421:	HPALETTE CreatePalette ( const LOGPALETTE * ) ; 
	2422:	HBRUSH CreatePatternBrush ( HBITMAP ) ; 
	2423:	HPEN CreatePen ( int , int , COLORREF ) ; 
	2424:	HPEN CreatePenIndirect ( const LOGPEN * ) ; 
	2425:	HRGN CreatePolygonRgn ( const POINT * , int , int ) ; 
	2426:	HRGN CreatePolyPolygonRgn ( const POINT * , const INT * , int , int ) ; 
	2427:	HRGN CreateRectRgn ( int , int , int , int ) ; 
	2428:	HRGN CreateRectRgnIndirect ( LPCRECT ) ; 
	2429:	HRGN CreateRoundRectRgn ( int , int , int , int , int , int ) ; 
	2430:	BOOL CreateScalableFontResourceA ( DWORD , LPCSTR , LPCSTR , LPCSTR ) ; 
	2431:	BOOL CreateScalableFontResourceW ( DWORD , LPCWSTR , LPCWSTR , LPCWSTR ) ; 
	2432:	HBRUSH CreateSolidBrush ( COLORREF ) ; 
	2433:	BOOL DeleteColorSpace ( HCOLORSPACE ) ; 
	2434:	BOOL DeleteDC ( HDC ) ; 
	2435:	BOOL DeleteEnhMetaFile ( HENHMETAFILE ) ; 
	2436:	BOOL DeleteMetaFile ( HMETAFILE ) ; 
	2437:	BOOL DeleteObject ( HGDIOBJ ) ; 
	2438:	int DescribePixelFormat ( HDC , int , UINT , LPPIXELFORMATDESCRIPTOR ) ; 
	2439:	DWORD DeviceCapabilitiesA ( LPCSTR , LPCSTR , WORD , LPSTR , const DEVMODEA * ) ; 
	2440:	DWORD DeviceCapabilitiesW ( LPCWSTR , LPCWSTR , WORD , LPWSTR , const DEVMODEW * ) ; 
	2441:	BOOL DPtoLP ( HDC , LPPOINT , int ) ; 
	2442:	int DrawEscape ( HDC , int , int , LPCSTR ) ; 
	2443:	BOOL Ellipse ( HDC , int , int , int , int ) ; 
	2444:	int EndDoc ( HDC ) ; 
	2445:	int EndPage ( HDC ) ; 
	2446:	BOOL EndPath ( HDC ) ; 
	2447:	BOOL EnumEnhMetaFile ( HDC , HENHMETAFILE , ENHMFENUMPROC , PVOID , LPCRECT ) ; 
	2448:	int EnumFontFamiliesA ( HDC , LPCSTR , FONTENUMPROCA , LPARAM ) ; 
	2449:	int EnumFontFamiliesW ( HDC , LPCWSTR , FONTENUMPROCW , LPARAM ) ; 
	2450:	int EnumFontFamiliesExA ( HDC , PLOGFONTA , FONTENUMPROCA , LPARAM , DWORD ) ; 
	2451:	int EnumFontFamiliesExW ( HDC , PLOGFONTW , FONTENUMPROCW , LPARAM , DWORD ) ; 
	2452:	int EnumFontsA ( HDC , LPCSTR , FONTENUMPROCA , LPARAM ) ; 
	2453:	int EnumFontsW ( HDC , LPCWSTR , FONTENUMPROCA , LPARAM ) ; 
	2454:	int EnumICMProfilesA ( HDC , ICMENUMPROCA , LPARAM ) ; 
	2455:	int EnumICMProfilesW ( HDC , ICMENUMPROCW , LPARAM ) ; 
	2456:	BOOL EnumMetaFile ( HDC , HMETAFILE , MFENUMPROC , LPARAM ) ; 
	2457:	int EnumObjects ( HDC , int , GOBJENUMPROC , LPARAM ) ; 
	2458:	BOOL EqualRgn ( HRGN , HRGN ) ; 
	2459:	int Escape ( HDC , int , int , LPCSTR , PVOID ) ; 
	2460:	int ExcludeClipRect ( HDC , int , int , int , int ) ; 
	2461:	int ExcludeUpdateRgn ( HDC , HWND ) ; 
	2462:	HPEN ExtCreatePen ( DWORD , DWORD , const LOGBRUSH * , DWORD , const DWORD * ) ; 
	2463:	HRGN ExtCreateRegion ( const XFORM * , DWORD , const RGNDATA * ) ; 
	2464:	int ExtEscape ( HDC , int , int , LPCSTR , int , LPSTR ) ; 
	2465:	BOOL ExtFloodFill ( HDC , int , int , COLORREF , UINT ) ; 
	2466:	int ExtSelectClipRgn ( HDC , HRGN , int ) ; 
	2467:	BOOL ExtTextOutA ( HDC , int , int , UINT , LPCRECT , LPCSTR , UINT , const INT * ) ; 
	2468:	BOOL ExtTextOutW ( HDC , int , int , UINT , LPCRECT , LPCWSTR , UINT , const INT * ) ; 
	2469:	BOOL FillPath ( HDC ) ; 
	2470:	int FillRect ( HDC , LPCRECT , HBRUSH ) ; 
	2471:	int FillRgn ( HDC , HRGN , HBRUSH ) ; 
	2472:	BOOL FixBrushOrgEx ( HDC , int , int , LPPOINT ) ; 
	2473:	BOOL FlattenPath ( HDC ) ; 
	2474:	BOOL FloodFill ( HDC , int , int , COLORREF ) ; 
	2475:	BOOL GdiComment ( HDC , UINT , const BYTE * ) ; 
	2476:	BOOL GdiFlush ( void ) ; 
	2477:	DWORD GdiGetBatchLimit ( void ) ; 
	2478:	DWORD GdiSetBatchLimit ( DWORD ) ; 
	2487:	int GetArcDirection ( HDC ) ; 
	2488:	BOOL GetAspectRatioFilterEx ( HDC , LPSIZE ) ; 
	2489:	LONG GetBitmapBits ( HBITMAP , LONG , PVOID ) ; 
	2490:	BOOL GetBitmapDimensionEx ( HBITMAP , LPSIZE ) ; 
	2491:	COLORREF GetBkColor ( HDC ) ; 
	2492:	int GetBkMode ( HDC ) ; 
	2493:	UINT GetBoundsRect ( HDC , LPRECT , UINT ) ; 
	2494:	BOOL GetBrushOrgEx ( HDC , LPPOINT ) ; 
	2495:	BOOL GetCharABCWidthsA ( HDC , UINT , UINT , LPABC ) ; 
	2496:	BOOL GetCharABCWidthsW ( HDC , UINT , UINT , LPABC ) ; 
	2497:	BOOL GetCharABCWidthsFloatA ( HDC , UINT , UINT , LPABCFLOAT ) ; 
	2498:	BOOL GetCharABCWidthsFloatW ( HDC , UINT , UINT , LPABCFLOAT ) ; 
	2499:	DWORD GetCharacterPlacementA ( HDC , LPCSTR , int , int , LPGCP_RESULTSA , DWORD ) ; 
	2500:	DWORD GetCharacterPlacementW ( HDC , LPCWSTR , int , int , LPGCP_RESULTSW , DWORD ) ; 
	2501:	BOOL GetCharWidth32A ( HDC , UINT , UINT , LPINT ) ; 
	2502:	BOOL GetCharWidth32W ( HDC , UINT , UINT , LPINT ) ; 
	2503:	BOOL GetCharWidthA ( HDC , UINT , UINT , LPINT ) ; 
	2504:	BOOL GetCharWidthW ( HDC , UINT , UINT , LPINT ) ; 
	2505:	BOOL GetCharWidthFloatA ( HDC , UINT , UINT , PFLOAT ) ; 
	2506:	BOOL GetCharWidthFloatW ( HDC , UINT , UINT , PFLOAT ) ; 
	2507:	int GetClipBox ( HDC , LPRECT ) ; 
	2508:	int GetClipRgn ( HDC , HRGN ) ; 
	2509:	BOOL GetColorAdjustment ( HDC , LPCOLORADJUSTMENT ) ; 
	2510:	HANDLE GetColorSpace ( HDC ) ; 
	2511:	HGDIOBJ GetCurrentObject ( HDC , UINT ) ; 
	2512:	BOOL GetCurrentPositionEx ( HDC , LPPOINT ) ; 
	2513:	HCURSOR GetCursor ( void ) ; 
	2514:	BOOL GetDCOrgEx ( HDC , LPPOINT ) ; 
	2515:	int GetDeviceCaps ( HDC , int ) ; 
	2516:	BOOL GetDeviceGammaRamp ( HDC , PVOID ) ; 
	2517:	UINT GetDIBColorTable ( HDC , UINT , UINT , RGBQUAD * ) ; 
	2518:	int GetDIBits ( HDC , HBITMAP , UINT , UINT , PVOID , LPBITMAPINFO , UINT ) ; 
	2519:	HENHMETAFILE GetEnhMetaFileA ( LPCSTR ) ; 
	2520:	HENHMETAFILE GetEnhMetaFileW ( LPCWSTR ) ; 
	2521:	UINT GetEnhMetaFileDescriptionA ( HENHMETAFILE , UINT , LPSTR ) ; 
	2522:	UINT GetEnhMetaFileDescriptionW ( HENHMETAFILE , UINT , LPWSTR ) ; 
	2523:	UINT GetEnhMetaFileHeader ( HENHMETAFILE , UINT , LPENHMETAHEADER ) ; 
	2524:	UINT GetEnhMetaFilePaletteEntries ( HENHMETAFILE , UINT , LPPALETTEENTRY ) ; 
	2525:	UINT GetEnhMetaFilePixelFormat ( HENHMETAFILE , DWORD , PIXELFORMATDESCRIPTOR * ) ; 
	2526:	DWORD GetFontData ( HDC , DWORD , DWORD , PVOID , DWORD ) ; 
	2527:	DWORD GetFontLanguageInfo ( HDC ) ; 
	2528:	DWORD GetGlyphOutlineA ( HDC , UINT , UINT , LPGLYPHMETRICS , DWORD , PVOID , const MAT2 * ) ; 
	2529:	DWORD GetGlyphOutlineW ( HDC , UINT , UINT , LPGLYPHMETRICS , DWORD , PVOID , const MAT2 * ) ; 
	2530:	int GetGraphicsMode ( HDC ) ; 
	2531:	BOOL GetICMProfileA ( HDC , DWORD , LPSTR ) ; 
	2532:	BOOL GetICMProfileW ( HDC , DWORD , LPWSTR ) ; 
	2533:	DWORD GetKerningPairsA ( HDC , DWORD , LPKERNINGPAIR ) ; 
	2534:	DWORD GetKerningPairsW ( HDC , DWORD , LPKERNINGPAIR ) ; 
	2535:	BOOL GetLogColorSpaceA ( HCOLORSPACE , LPLOGCOLORSPACEA , DWORD ) ; 
	2536:	BOOL GetLogColorSpaceW ( HCOLORSPACE , LPLOGCOLORSPACEW , DWORD ) ; 
	2537:	int GetMapMode ( HDC ) ; 
	2538:	HMETAFILE GetMetaFileA ( LPCSTR ) ; 
	2539:	HMETAFILE GetMetaFileW ( LPCWSTR ) ; 
	2540:	UINT GetMetaFileBitsEx ( HMETAFILE , UINT , PVOID ) ; 
	2541:	int GetMetaRgn ( HDC , HRGN ) ; 
	2542:	BOOL GetMiterLimit ( HDC , PFLOAT ) ; 
	2543:	COLORREF GetNearestColor ( HDC , COLORREF ) ; 
	2544:	UINT GetNearestPaletteIndex ( HPALETTE , COLORREF ) ; 
	2545:	int GetObjectA ( HGDIOBJ , int , PVOID ) ; 
	2546:	int GetObjectW ( HGDIOBJ , int , PVOID ) ; 
	2547:	DWORD GetObjectType ( HGDIOBJ ) ; 
	2548:	UINT GetOutlineTextMetricsA ( HDC , UINT , LPOUTLINETEXTMETRICA ) ; 
	2549:	UINT GetOutlineTextMetricsW ( HDC , UINT , LPOUTLINETEXTMETRICW ) ; 
	2550:	UINT GetPaletteEntries ( HPALETTE , UINT , UINT , LPPALETTEENTRY ) ; 
	2551:	int GetPath ( HDC , LPPOINT , PBYTE , int ) ; 
	2552:	COLORREF GetPixel ( HDC , int , int ) ; 
	2553:	int GetPixelFormat ( HDC ) ; 
	2554:	int GetPolyFillMode ( HDC ) ; 
	2555:	BOOL GetRasterizerCaps ( LPRASTERIZER_STATUS , UINT ) ; 
	2556:	int GetRandomRgn ( HDC , HRGN , INT ) ; 
	2557:	DWORD GetRegionData ( HRGN , DWORD , LPRGNDATA ) ; 
	2558:	int GetRgnBox ( HRGN , LPRECT ) ; 
	2559:	int GetROP2 ( HDC ) ; 
	2560:	HGDIOBJ GetStockObject ( int ) ; 
	2561:	int GetStretchBltMode ( HDC ) ; 
	2562:	UINT GetSystemPaletteEntries ( HDC , UINT , UINT , LPPALETTEENTRY ) ; 
	2563:	UINT GetSystemPaletteUse ( HDC ) ; 
	2564:	UINT GetTextAlign ( HDC ) ; 
	2565:	int GetTextCharacterExtra ( HDC ) ; 
	2566:	int GetTextCharset ( HDC ) ; 
	2567:	int GetTextCharsetInfo ( HDC , LPFONTSIGNATURE , DWORD ) ; 
	2568:	COLORREF GetTextColor ( HDC ) ; 
	2569:	BOOL GetTextExtentExPointA ( HDC , LPCSTR , int , int , LPINT , LPINT , LPSIZE ) ; 
	2570:	BOOL GetTextExtentExPointW ( HDC , LPCWSTR , int , int , LPINT , LPINT , LPSIZE ) ; 
	2571:	BOOL GetTextExtentPointA ( HDC , LPCSTR , int , LPSIZE ) ; 
	2572:	BOOL GetTextExtentPointW ( HDC , LPCWSTR , int , LPSIZE ) ; 
	2573:	BOOL GetTextExtentPoint32A ( HDC , LPCSTR , int , LPSIZE ) ; 
	2574:	BOOL GetTextExtentPoint32W ( HDC , LPCWSTR , int , LPSIZE ) ; 
	2575:	int GetTextFaceA ( HDC , int , LPSTR ) ; 
	2576:	int GetTextFaceW ( HDC , int , LPWSTR ) ; 
	2577:	BOOL GetTextMetricsA ( HDC , LPTEXTMETRICA ) ; 
	2578:	BOOL GetTextMetricsW ( HDC , LPTEXTMETRICW ) ; 
	2579:	BOOL GetViewportExtEx ( HDC , LPSIZE ) ; 
	2580:	BOOL GetViewportOrgEx ( HDC , LPPOINT ) ; 
	2581:	BOOL GetWindowExtEx ( HDC , LPSIZE ) ; 
	2582:	BOOL GetWindowOrgEx ( HDC , LPPOINT ) ; 
	2583:	UINT GetWinMetaFileBits ( HENHMETAFILE , UINT , LPBYTE , INT , HDC ) ; 
	2584:	BOOL GetWorldTransform ( HDC , LPXFORM ) ; 
	2585:	int IntersectClipRect ( HDC , int , int , int , int ) ; 
	2586:	BOOL InvertRgn ( HDC , HRGN ) ; 
	2587:	BOOL LineDDA ( int , int , int , int , LINEDDAPROC , LPARAM ) ; 
	2588:	BOOL LineTo ( HDC , int , int ) ; 
	2589:	BOOL LPtoDP ( HDC , LPPOINT , int ) ; 
	2590:	BOOL MaskBlt ( HDC , int , int , int , int , HDC , int , int , HBITMAP , int , int , DWORD ) ; 
	2591:	BOOL ModifyWorldTransform ( HDC , const XFORM * , DWORD ) ; 
	2592:	BOOL MoveToEx ( HDC , int , int , LPPOINT ) ; 
	2593:	int OffsetClipRgn ( HDC , int , int ) ; 
	2594:	int OffsetRgn ( HRGN , int , int ) ; 
	2595:	BOOL OffsetViewportOrgEx ( HDC , int , int , LPPOINT ) ; 
	2596:	BOOL OffsetWindowOrgEx ( HDC , int , int , LPPOINT ) ; 
	2597:	BOOL PaintRgn ( HDC , HRGN ) ; 
	2598:	BOOL PatBlt ( HDC , int , int , int , int , DWORD ) ; 
	2599:	HRGN PathToRegion ( HDC ) ; 
	2600:	BOOL Pie ( HDC , int , int , int , int , int , int , int , int ) ; 
	2601:	BOOL PlayEnhMetaFile ( HDC , HENHMETAFILE , LPCRECT ) ; 
	2602:	BOOL PlayEnhMetaFileRecord ( HDC , LPHANDLETABLE , const ENHMETARECORD * , UINT ) ; 
	2603:	BOOL PlayMetaFile ( HDC , HMETAFILE ) ; 
	2604:	BOOL PlayMetaFileRecord ( HDC , LPHANDLETABLE , LPMETARECORD , UINT ) ; 
	2605:	BOOL PlgBlt ( HDC , const POINT * , HDC , int , int , int , int , HBITMAP , int , int ) ; 
	2606:	BOOL PolyBezier ( HDC , const POINT * , DWORD ) ; 
	2607:	BOOL PolyBezierTo ( HDC , const POINT * , DWORD ) ; 
	2608:	BOOL PolyDraw ( HDC , const POINT * , const BYTE * , int ) ; 
	2609:	BOOL Polygon ( HDC , const POINT * , int ) ; 
	2610:	BOOL Polyline ( HDC , const POINT * , int ) ; 
	2611:	BOOL PolylineTo ( HDC , const POINT * , DWORD ) ; 
	2612:	BOOL PolyPolygon ( HDC , const POINT * , const INT * , int ) ; 
	2613:	BOOL PolyPolyline ( HDC , const POINT * , const DWORD * , DWORD ) ; 
	2614:	BOOL PolyTextOutA ( HDC , const POLYTEXTA * , int ) ; 
	2615:	BOOL PolyTextOutW ( HDC , const POLYTEXTW * , int ) ; 
	2616:	BOOL PtInRegion ( HRGN , int , int ) ; 
	2617:	BOOL PtVisible ( HDC , int , int ) ; 
	2618:	UINT RealizePalette ( HDC ) ; 
	2619:	BOOL Rectangle ( HDC , int , int , int , int ) ; 
	2620:	BOOL RectInRegion ( HRGN , LPCRECT ) ; 
	2621:	BOOL RectVisible ( HDC , LPCRECT ) ; 
	2622:	BOOL RemoveFontResourceA ( LPCSTR ) ; 
	2623:	BOOL RemoveFontResourceW ( LPCWSTR ) ; 
	2624:	HDC ResetDCA ( HDC , const DEVMODEA * ) ; 
	2625:	HDC ResetDCW ( HDC , const DEVMODEW * ) ; 
	2626:	BOOL ResizePalette ( HPALETTE , UINT ) ; 
	2627:	BOOL RestoreDC ( HDC , int ) ; 
	2628:	BOOL RoundRect ( HDC , int , int , int , int , int , int ) ; 
	2629:	int SaveDC ( HDC ) ; 
	2630:	BOOL ScaleViewportExtEx ( HDC , int , int , int , int , LPSIZE ) ; 
	2631:	BOOL ScaleWindowExtEx ( HDC , int , int , int , int , LPSIZE ) ; 
	2632:	BOOL SelectClipPath ( HDC , int ) ; 
	2633:	int SelectClipRgn ( HDC , HRGN ) ; 
	2634:	HGDIOBJ SelectObject ( HDC , HGDIOBJ ) ; 
	2635:	HPALETTE SelectPalette ( HDC , HPALETTE , BOOL ) ; 
	2636:	int SetAbortProc ( HDC , ABORTPROC ) ; 
	2637:	int SetArcDirection ( HDC , int ) ; 
	2638:	LONG SetBitmapBits ( HBITMAP , DWORD , PCVOID ) ; 
	2639:	BOOL SetBitmapDimensionEx ( HBITMAP , int , int , LPSIZE ) ; 
	2640:	COLORREF SetBkColor ( HDC , COLORREF ) ; 
	2641:	int SetBkMode ( HDC , int ) ; 
	2642:	UINT SetBoundsRect ( HDC , LPCRECT , UINT ) ; 
	2643:	BOOL SetBrushOrgEx ( HDC , int , int , LPPOINT ) ; 
	2644:	BOOL SetColorAdjustment ( HDC , const COLORADJUSTMENT * ) ; 
	2645:	BOOL SetColorSpace ( HDC , HCOLORSPACE ) ; 
	2646:	BOOL SetDeviceGammaRamp ( HDC , PVOID ) ; 
	2647:	UINT SetDIBColorTable ( HDC , UINT , UINT , const RGBQUAD * ) ; 
	2648:	int SetDIBits ( HDC , HBITMAP , UINT , UINT , PCVOID , const BITMAPINFO * , UINT ) ; 
	2649:	int SetDIBitsToDevice ( HDC , int , int , DWORD , DWORD , int , int , UINT , UINT , PCVOID , const BITMAPINFO * , UINT ) ; 
	2650:	HENHMETAFILE SetEnhMetaFileBits ( UINT , const BYTE * ) ; 
	2651:	int SetGraphicsMode ( HDC , int ) ; 
	2652:	int SetICMMode ( HDC , int ) ; 
	2653:	BOOL SetICMProfileA ( HDC , LPSTR ) ; 
	2654:	BOOL SetICMProfileW ( HDC , LPWSTR ) ; 
	2655:	int SetMapMode ( HDC , int ) ; 
	2656:	DWORD SetMapperFlags ( HDC , DWORD ) ; 
	2657:	HMETAFILE SetMetaFileBitsEx ( UINT , const BYTE * ) ; 
	2658:	int SetMetaRgn ( HDC ) ; 
	2659:	BOOL SetMiterLimit ( HDC , FLOAT , PFLOAT ) ; 
	2660:	UINT SetPaletteEntries ( HPALETTE , UINT , UINT , const PALETTEENTRY * ) ; 
	2661:	COLORREF SetPixel ( HDC , int , int , COLORREF ) ; 
	2662:	BOOL SetPixelFormat ( HDC , int , const PIXELFORMATDESCRIPTOR * ) ; 
	2663:	BOOL SetPixelV ( HDC , int , int , COLORREF ) ; 
	2664:	int SetPolyFillMode ( HDC , int ) ; 
	2665:	BOOL SetRectRgn ( HRGN , int , int , int , int ) ; 
	2666:	int SetROP2 ( HDC , int ) ; 
	2667:	int SetStretchBltMode ( HDC , int ) ; 
	2668:	UINT SetSystemPaletteUse ( HDC , UINT ) ; 
	2669:	UINT SetTextAlign ( HDC , UINT ) ; 
	2670:	int SetTextCharacterExtra ( HDC , int ) ; 
	2671:	COLORREF SetTextColor ( HDC , COLORREF ) ; 
	2672:	BOOL SetTextJustification ( HDC , int , int ) ; 
	2673:	BOOL SetViewportExtEx ( HDC , int , int , LPSIZE ) ; 
	2674:	BOOL SetViewportOrgEx ( HDC , int , int , LPPOINT ) ; 
	2675:	BOOL SetWindowExtEx ( HDC , int , int , LPSIZE ) ; 
	2676:	BOOL SetWindowOrgEx ( HDC , int , int , LPPOINT ) ; 
	2677:	HENHMETAFILE SetWinMetaFileBits ( UINT , const BYTE * , HDC , const METAFILEPICT * ) ; 
	2678:	BOOL SetWorldTransform ( HDC , const XFORM * ) ; 
	2679:	int StartDocA ( HDC , const DOCINFOA * ) ; 
	2680:	int StartDocW ( HDC , const DOCINFOW * ) ; 
	2681:	int StartPage ( HDC ) ; 
	2682:	BOOL StretchBlt ( HDC , int , int , int , int , HDC , int , int , int , int , DWORD ) ; 
	2683:	int StretchDIBits ( HDC , int , int , int , int , int , int , int , int , const void * , const BITMAPINFO * , UINT , DWORD ) ; 
	2684:	BOOL StrokeAndFillPath ( HDC ) ; 
	2685:	BOOL StrokePath ( HDC ) ; 
	2686:	BOOL SwapBuffers ( HDC ) ; 
	2687:	BOOL TextOutA ( HDC , int , int , LPCSTR , int ) ; 
	2688:	BOOL TextOutW ( HDC , int , int , LPCWSTR , int ) ; 
	2689:	BOOL TranslateCharsetInfo ( PDWORD , LPCHARSETINFO , DWORD ) ; 
	2690:	BOOL UnrealizeObject ( HGDIOBJ ) ; 
	2691:	BOOL UpdateColors ( HDC ) ; 
	2692:	BOOL UpdateICMRegKeyA ( DWORD , DWORD , LPSTR , UINT ) ; 
	2693:	BOOL UpdateICMRegKeyW ( DWORD , DWORD , LPWSTR , UINT ) ; 
	2694:	BOOL WidenPath ( HDC ) ; 
	2695:	BOOL wglCopyContext ( HGLRC , HGLRC , UINT ) ; 
	2696:	HGLRC wglCreateContext ( HDC ) ; 
	2697:	HGLRC wglCreateLayerContext ( HDC , int ) ; 
	2698:	BOOL wglDeleteContext ( HGLRC ) ; 
	2699:	BOOL wglDescribeLayerPlane ( HDC , int , int , UINT , LPLAYERPLANEDESCRIPTOR ) ; 
	2700:	HGLRC wglGetCurrentContext ( void ) ; 
	2701:	HDC wglGetCurrentDC ( void ) ; 
	2702:	int wglGetLayerPaletteEntries ( HDC , int , int , int , COLORREF * ) ; 
	2703:	PROC wglGetProcAddress ( LPCSTR ) ; 
	2704:	BOOL wglMakeCurrent ( HDC , HGLRC ) ; 
	2705:	BOOL wglRealizeLayerPalette ( HDC , int , BOOL ) ; 
	2706:	int wglSetLayerPaletteEntries ( HDC , int , int , int , const COLORREF * ) ; 
	2707:	BOOL wglShareLists ( HGLRC , HGLRC ) ; 
	2708:	BOOL wglSwapLayerBuffers ( HDC , UINT ) ; 
	2709:	BOOL wglUseFontBitmapsA ( HDC , DWORD , DWORD , DWORD ) ; 
	2710:	BOOL wglUseFontBitmapsW ( HDC , DWORD , DWORD , DWORD ) ; 
	2711:	BOOL wglUseFontOutlinesA ( HDC , DWORD , DWORD , DWORD , FLOAT , FLOAT , int , LPGLYPHMETRICSFLOAT ) ; 
	2712:	BOOL wglUseFontOutlinesW ( HDC , DWORD , DWORD , DWORD , FLOAT , FLOAT , int , LPGLYPHMETRICSFLOAT ) ; 
	2777:	typedef BYTE BCHAR ; 
	2778:	typedef DOCINFOA DOCINFO , * LPDOCINFO ; 
	2779:	typedef LOGFONTA LOGFONT , * PLOGFONT , * LPLOGFONT ; 
	2780:	typedef TEXTMETRICA TEXTMETRIC , * PTEXTMETRIC , * LPTEXTMETRIC ; 
	2783:	typedef DEVMODEA DEVMODE , * PDEVMODE , * LPDEVMODE ; 
	2784:	typedef EXTLOGFONTA EXTLOGFONT , * PEXTLOGFONT , * LPEXTLOGFONT ; 
	2785:	typedef GCP_RESULTSA GCP_RESULTS , * LPGCP_RESULTS ; 
	2786:	typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC , * POUTLINETEXTMETRIC , * LPOUTLINETEXTMETRIC ; 
	2787:	typedef POLYTEXTA POLYTEXT ; 
	2788:	typedef LOGCOLORSPACEA LOGCOLORSPACE , * LPLOGCOLORSPACE ; 
	2789:	typedef NEWTEXTMETRICA NEWTEXTMETRIC , * PNEWTEXTMETRIC , * LPNEWTEXTMETRIC ; 
	2790:	typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX ; 
	2791:	typedef ENUMLOGFONTA ENUMLOGFONT , * LPENUMLOGFONT ; 
	2792:	typedef ENUMLOGFONTEXA ENUMLOGFONTEX , * LPENUMLOGFONTEX ; 
	1899:	typedef BOOL ( * DLGPROC ) ( HWND , UINT , WPARAM , LPARAM ) ; 
	1900:	typedef void ( * TIMERPROC ) ( HWND , UINT , UINT , DWORD ) ; 
	1901:	typedef BOOL ( * GRAYSTRINGPROC ) ( HDC , LPARAM , int ) ; 
	1902:	typedef LRESULT ( * HOOKPROC ) ( int , WPARAM , LPARAM ) ; 
	1903:	typedef BOOL ( * PROPENUMPROCA ) ( HWND , LPCSTR , HANDLE ) ; 
	1904:	typedef BOOL ( * PROPENUMPROCW ) ( HWND , LPCWSTR , HANDLE ) ; 
	1905:	typedef BOOL ( * PROPENUMPROCEXA ) ( HWND , LPSTR , HANDLE , DWORD ) ; 
	1906:	typedef BOOL ( * PROPENUMPROCEXW ) ( HWND , LPWSTR , HANDLE , DWORD ) ; 
	1907:	typedef int ( * EDITWORDBREAKPROCA ) ( LPSTR , int , int , int ) ; 
	1908:	typedef int ( * EDITWORDBREAKPROCW ) ( LPWSTR , int , int , int ) ; 
	1909:	typedef LRESULT ( * WNDPROC ) ( HWND , UINT , WPARAM , LPARAM ) ; 
	1910:	typedef BOOL ( * DRAWSTATEPROC ) ( HDC , LPARAM , WPARAM , int , int ) ; 
	1911:	typedef BOOL ( * WNDENUMPROC ) ( HWND , LPARAM ) ; 
	1912:	typedef BOOL ( * ENUMWINDOWSPROC ) ( HWND , LPARAM ) ; 
	1913:	typedef BOOL ( * MONITORENUMPROC ) ( HMONITOR , HDC , LPRECT , LPARAM ) ; 
	1914:	typedef BOOL ( * NAMEENUMPROCA ) ( LPSTR , LPARAM ) ; 
	1915:	typedef BOOL ( * NAMEENUMPROCW ) ( LPWSTR , LPARAM ) ; 
	1916:	typedef NAMEENUMPROCA DESKTOPENUMPROCA ; 
	1917:	typedef NAMEENUMPROCW DESKTOPENUMPROCW ; 
	1918:	typedef NAMEENUMPROCA WINSTAENUMPROCA ; 
	1919:	typedef NAMEENUMPROCW WINSTAENUMPROCW ; 
	1920:	typedef void ( * SENDASYNCPROC ) ( HWND , UINT , DWORD , LRESULT ) ; 
	1921:	typedef struct HHOOK__ { int i ; } * HHOOK ; 
	1922:	typedef struct HDWP__ { int i ; } * HDWP ; 
	1923:	typedef struct tagACCEL { 
	1924:	BYTE fVirt ; 
	1925:	WORD key ; 
	1926:	WORD cmd ; 
	1927:	} ACCEL , * LPACCEL ; 
	1928:	typedef struct tagACCESSTIMEOUT { 
	1929:	UINT cbSize ; 
	1930:	DWORD dwFlags ; 
	1931:	DWORD iTimeOutMSec ; 
	1932:	} ACCESSTIMEOUT , * LPACCESSTIMEOUT ; 
	1933:	typedef struct tagANIMATIONINFO { 
	1934:	UINT cbSize ; 
	1935:	int iMinAnimate ; 
	1936:	} ANIMATIONINFO , * LPANIMATIONINFO ; 
	1937:	typedef struct tagCREATESTRUCTA { 
	1938:	LPVOID lpCreateParams ; 
	1939:	HINSTANCE hInstance ; 
	1940:	HMENU hMenu ; 
	1941:	HWND hwndParent ; 
	1942:	int cy ; 
	1943:	int cx ; 
	1944:	int y ; 
	1945:	int x ; 
	1946:	LONG style ; 
	1947:	LPCSTR lpszName ; 
	1948:	LPCSTR lpszClass ; 
	1949:	DWORD dwExStyle ; 
	1950:	} CREATESTRUCTA , * LPCREATESTRUCTA ; 
	1951:	typedef struct tagCREATESTRUCTW { 
	1952:	LPVOID lpCreateParams ; 
	1953:	HINSTANCE hInstance ; 
	1954:	HMENU hMenu ; 
	1955:	HWND hwndParent ; 
	1956:	int cy ; 
	1957:	int cx ; 
	1958:	int y ; 
	1959:	int x ; 
	1960:	LONG style ; 
	1961:	LPCWSTR lpszName ; 
	1962:	LPCWSTR lpszClass ; 
	1963:	DWORD dwExStyle ; 
	1964:	} CREATESTRUCTW , * LPCREATESTRUCTW ; 
	1965:	typedef struct tagCBT_CREATEWNDA { 
	1966:	LPCREATESTRUCTA lpcs ; 
	1967:	HWND hwndInsertAfter ; 
	1968:	} CBT_CREATEWNDA , * LPCBT_CREATEWNDA ; 
	1969:	typedef struct tagCBT_CREATEWNDW { 
	1970:	LPCREATESTRUCTW lpcs ; 
	1971:	HWND hwndInsertAfter ; 
	1972:	} CBT_CREATEWNDW , * LPCBT_CREATEWNDW ; 
	1973:	typedef struct tagCBTACTIVATESTRUCT { 
	1974:	BOOL fMouse ; 
	1975:	HWND hWndActive ; 
	1976:	} CBTACTIVATESTRUCT , * LPCBTACTIVATESTRUCT ; 
	1977:	typedef struct tagCLIENTCREATESTRUCT { 
	1978:	HANDLE hWindowMenu ; 
	1979:	UINT idFirstChild ; 
	1980:	} CLIENTCREATESTRUCT , * LPCLIENTCREATESTRUCT ; 
	1981:	typedef struct tagCOMPAREITEMSTRUCT { 
	1982:	UINT CtlType ; 
	1983:	UINT CtlID ; 
	1984:	HWND hwndItem ; 
	1985:	UINT itemID1 ; 
	1986:	DWORD itemData1 ; 
	1987:	UINT itemID2 ; 
	1988:	DWORD itemData2 ; 
	1989:	DWORD dwLocaleId ; 
	1990:	} COMPAREITEMSTRUCT , * LPCOMPAREITEMSTRUCT ; 
	1991:	typedef struct tagCOPYDATASTRUCT { 
	1992:	DWORD dwData ; 
	1993:	DWORD cbData ; 
	1994:	PVOID lpData ; 
	1995:	} COPYDATASTRUCT , * PCOPYDATASTRUCT ; 
	1996:	typedef struct tagCURSORSHAPE { 
	1997:	int xHotSpot ; 
	1998:	int yHotSpot ; 
	1999:	int cx ; 
	2000:	int cy ; 
	2001:	int cbWidth ; 
	2002:	BYTE Planes ; 
	2003:	BYTE BitsPixel ; 
	2004:	} CURSORSHAPE , * LPCURSORSHAPE ; 
	2005:	typedef struct tagCWPRETSTRUCT { 
	2006:	LRESULT lResult ; 
	2007:	LPARAM lParam ; 
	2008:	WPARAM wParam ; 
	2009:	DWORD message ; 
	2010:	HWND hwnd ; 
	2011:	} CWPRETSTRUCT ; 
	2012:	typedef struct tagCWPSTRUCT { 
	2013:	LPARAM lParam ; 
	2014:	WPARAM wParam ; 
	2015:	UINT message ; 
	2016:	HWND hwnd ; 
	2017:	} CWPSTRUCT , * PCWPSTRUCT ; 
	2018:	typedef struct tagDEBUGHOOKINFO { 
	2019:	DWORD idThread ; 
	2020:	DWORD idThreadInstaller ; 
	2021:	LPARAM lParam ; 
	2022:	WPARAM wParam ; 
	2023:	int code ; 
	2024:	} DEBUGHOOKINFO , * PDEBUGHOOKINFO , * LPDEBUGHOOKINFO ; 
	2025:	typedef struct tagDELETEITEMSTRUCT { 
	2026:	UINT CtlType ; 
	2027:	UINT CtlID ; 
	2028:	UINT itemID ; 
	2029:	HWND hwndItem ; 
	2030:	UINT itemData ; 
	2031:	} DELETEITEMSTRUCT , * PDELETEITEMSTRUCT , * LPDELETEITEMSTRUCT ; 
	2033:	typedef struct { 
	2034:	DWORD style ; 
	2035:	DWORD dwExtendedStyle ; 
	2036:	short x ; 
	2037:	short y ; 
	2038:	short cx ; 
	2039:	short cy ; 
	2040:	WORD id ; 
	2041:	} DLGITEMTEMPLATE , * LPDLGITEMTEMPLATE ; 
	2042:	typedef struct { 
	2043:	DWORD style ; 
	2044:	DWORD dwExtendedStyle ; 
	2045:	WORD cdit ; 
	2046:	short x ; 
	2047:	short y ; 
	2048:	short cx ; 
	2049:	short cy ; 
	2050:	} DLGTEMPLATE , * LPDLGTEMPLATE ; 
	2051:	typedef const DLGTEMPLATE * LPCDLGTEMPLATE ; 
	2053:	typedef struct tagDRAWITEMSTRUCT { 
	2054:	UINT CtlType ; 
	2055:	UINT CtlID ; 
	2056:	UINT itemID ; 
	2057:	UINT itemAction ; 
	2058:	UINT itemState ; 
	2059:	HWND hwndItem ; 
	2060:	HDC hDC ; 
	2061:	RECT rcItem ; 
	2062:	DWORD itemData ; 
	2063:	} DRAWITEMSTRUCT , * LPDRAWITEMSTRUCT , * PDRAWITEMSTRUCT ; 
	2064:	typedef struct { 
	2065:	UINT cbSize ; 
	2066:	int iTabLength ; 
	2067:	int iLeftMargin ; 
	2068:	int iRightMargin ; 
	2069:	UINT uiLengthDrawn ; 
	2070:	} DRAWTEXTPARAMS , * LPDRAWTEXTPARAMS ; 
	2071:	typedef struct tagPAINTSTRUCT { 
	2072:	HDC hdc ; 
	2073:	BOOL fErase ; 
	2074:	RECT rcPaint ; 
	2075:	BOOL fRestore ; 
	2076:	BOOL fIncUpdate ; 
	2077:	BYTE rgbReserved [ 32 ] ; 
	2078:	} PAINTSTRUCT , * LPPAINTSTRUCT ; 
	2079:	typedef struct tagMSG { 
	2080:	HWND hwnd ; 
	2081:	UINT message ; 
	2082:	WPARAM wParam ; 
	2083:	LPARAM lParam ; 
	2084:	DWORD time ; 
	2085:	POINT pt ; 
	2086:	} MSG , * LPMSG , * PMSG ; 
	2087:	typedef struct _ICONINFO { 
	2088:	BOOL fIcon ; 
	2089:	DWORD xHotspot ; 
	2090:	DWORD yHotspot ; 
	2091:	HBITMAP hbmMask ; 
	2092:	HBITMAP hbmColor ; 
	2093:	} ICONINFO , * PICONINFO ; 
	2094:	typedef struct tagNMHDR { 
	2095:	HWND hwndFrom ; 
	2096:	UINT idFrom ; 
	2097:	UINT code ; 
	2098:	} NMHDR , * LPNMHDR ; 
	2099:	typedef struct _WNDCLASSA { 
	2100:	UINT style ; 
	2101:	WNDPROC lpfnWndProc ; 
	2102:	int cbClsExtra ; 
	2103:	int cbWndExtra ; 
	2104:	HANDLE hInstance ; 
	2105:	HICON hIcon ; 
	2106:	HCURSOR hCursor ; 
	2107:	HBRUSH hbrBackground ; 
	2108:	LPCSTR lpszMenuName ; 
	2109:	LPCSTR lpszClassName ; 
	2110:	} WNDCLASSA , * LPWNDCLASSA , * PWNDCLASSA ; 
	2111:	typedef struct _WNDCLASSW { 
	2112:	UINT style ; 
	2113:	WNDPROC lpfnWndProc ; 
	2114:	int cbClsExtra ; 
	2115:	int cbWndExtra ; 
	2116:	HANDLE hInstance ; 
	2117:	HICON hIcon ; 
	2118:	HCURSOR hCursor ; 
	2119:	HBRUSH hbrBackground ; 
	2120:	LPCWSTR lpszMenuName ; 
	2121:	LPCWSTR lpszClassName ; 
	2122:	} WNDCLASSW , * LPWNDCLASSW , * PWNDCLASSW ; 
	2123:	typedef struct _WNDCLASSEXA { 
	2124:	UINT cbSize ; 
	2125:	UINT style ; 
	2126:	WNDPROC lpfnWndProc ; 
	2127:	int cbClsExtra ; 
	2128:	int cbWndExtra ; 
	2129:	HANDLE hInstance ; 
	2130:	HICON hIcon ; 
	2131:	HCURSOR hCursor ; 
	2132:	HBRUSH hbrBackground ; 
	2133:	LPCSTR lpszMenuName ; 
	2134:	LPCSTR lpszClassName ; 
	2135:	HICON hIconSm ; 
	2136:	} WNDCLASSEXA , * LPWNDCLASSEXA , * PWNDCLASSEXA ; 
	2137:	typedef struct _WNDCLASSEXW { 
	2138:	UINT cbSize ; 
	2139:	UINT style ; 
	2140:	WNDPROC lpfnWndProc ; 
	2141:	int cbClsExtra ; 
	2142:	int cbWndExtra ; 
	2143:	HANDLE hInstance ; 
	2144:	HICON hIcon ; 
	2145:	HCURSOR hCursor ; 
	2146:	HBRUSH hbrBackground ; 
	2147:	LPCWSTR lpszMenuName ; 
	2148:	LPCWSTR lpszClassName ; 
	2149:	HICON hIconSm ; 
	2150:	} WNDCLASSEXW , * LPWNDCLASSEXW , * PWNDCLASSEXW ; 
	2151:	typedef struct tagMENUITEMINFOA { 
	2152:	UINT cbSize ; 
	2153:	UINT fMask ; 
	2154:	UINT fType ; 
	2155:	UINT fState ; 
	2156:	UINT wID ; 
	2157:	HMENU hSubMenu ; 
	2158:	HBITMAP hbmpChecked ; 
	2159:	HBITMAP hbmpUnchecked ; 
	2160:	DWORD dwItemData ; 
	2161:	LPSTR dwTypeData ; 
	2162:	UINT cch ; 
	2166:	} MENUITEMINFOA , * LPMENUITEMINFOA ; 
	2167:	typedef const MENUITEMINFOA * LPCMENUITEMINFOA ; 
	2168:	typedef struct tagMENUITEMINFOW { 
	2169:	UINT cbSize ; 
	2170:	UINT fMask ; 
	2171:	UINT fType ; 
	2172:	UINT fState ; 
	2173:	UINT wID ; 
	2174:	HMENU hSubMenu ; 
	2175:	HBITMAP hbmpChecked ; 
	2176:	HBITMAP hbmpUnchecked ; 
	2177:	DWORD dwItemData ; 
	2178:	LPWSTR dwTypeData ; 
	2179:	UINT cch ; 
	2183:	} MENUITEMINFOW , * LPMENUITEMINFOW ; 
	2184:	typedef const MENUITEMINFOW * LPCMENUITEMINFOW ; 
	2185:	typedef struct tagSCROLLINFO { 
	2186:	UINT cbSize ; 
	2187:	UINT fMask ; 
	2188:	int nMin ; 
	2189:	int nMax ; 
	2190:	UINT nPage ; 
	2191:	int nPos ; 
	2192:	int nTrackPos ; 
	2193:	} SCROLLINFO , * LPSCROLLINFO ; 
	2194:	typedef const SCROLLINFO * LPCSCROLLINFO ; 
	2195:	typedef struct _WINDOWPLACEMENT { 
	2196:	UINT length ; 
	2197:	UINT flags ; 
	2198:	UINT showCmd ; 
	2199:	POINT ptMinPosition ; 
	2200:	POINT ptMaxPosition ; 
	2201:	RECT rcNormalPosition ; 
	2202:	} WINDOWPLACEMENT , * LPWINDOWPLACEMENT , * PWINDOWPLACEMENT ; 
	2203:	typedef struct { 
	2204:	WORD versionNumber ; 
	2205:	WORD offset ; 
	2206:	} MENUITEMTEMPLATEHEADER ; 
	2207:	typedef struct { 
	2208:	WORD mtOption ; 
	2209:	WORD mtID ; 
	2210:	WCHAR mtString [ 1 ] ; 
	2211:	} MENUITEMTEMPLATE ; 
	2212:	typedef void MENUTEMPLATE , MENUTEMPLATEA , MENUTEMPLATEW , * LPMENUTEMPLATEA , * LPMENUTEMPLATEW , * LPMENUTEMPLATE ; 
	2213:	typedef struct tagHELPINFO { 
	2214:	UINT cbSize ; 
	2215:	int iContextType ; 
	2216:	int iCtrlId ; 
	2217:	HANDLE hItemHandle ; 
	2218:	DWORD dwContextId ; 
	2219:	POINT MousePos ; 
	2220:	} HELPINFO , * LPHELPINFO ; 
	2221:	typedef void ( * MSGBOXCALLBACK ) ( LPHELPINFO ) ; 
	2222:	typedef struct { 
	2223:	UINT cbSize ; 
	2224:	HWND hwndOwner ; 
	2225:	HINSTANCE hInstance ; 
	2226:	LPCSTR lpszText ; 
	2227:	LPCSTR lpszCaption ; 
	2228:	DWORD dwStyle ; 
	2229:	LPCSTR lpszIcon ; 
	2230:	DWORD dwContextHelpId ; 
	2231:	MSGBOXCALLBACK lpfnMsgBoxCallback ; 
	2232:	DWORD dwLanguageId ; 
	2233:	} MSGBOXPARAMSA , * PMSGBOXPARAMSA , * LPMSGBOXPARAMSA ; 
	2234:	typedef struct { 
	2235:	UINT cbSize ; 
	2236:	HWND hwndOwner ; 
	2237:	HINSTANCE hInstance ; 
	2238:	LPCWSTR lpszText ; 
	2239:	LPCWSTR lpszCaption ; 
	2240:	DWORD dwStyle ; 
	2241:	LPCWSTR lpszIcon ; 
	2242:	DWORD dwContextHelpId ; 
	2243:	MSGBOXCALLBACK lpfnMsgBoxCallback ; 
	2244:	DWORD dwLanguageId ; 
	2245:	} MSGBOXPARAMSW , * PMSGBOXPARAMSW , * LPMSGBOXPARAMSW ; 
	2246:	typedef struct tagUSEROBJECTFLAGS { 
	2247:	BOOL fInherit ; 
	2248:	BOOL fReserved ; 
	2249:	DWORD dwFlags ; 
	2250:	} USEROBJECTFLAGS ; 
	2251:	typedef struct tagFILTERKEYS { 
	2252:	UINT cbSize ; 
	2253:	DWORD dwFlags ; 
	2254:	DWORD iWaitMSec ; 
	2255:	DWORD iDelayMSec ; 
	2256:	DWORD iRepeatMSec ; 
	2257:	DWORD iBounceMSec ; 
	2258:	} FILTERKEYS ; 
	2259:	typedef struct tagHIGHCONTRASTA { 
	2260:	UINT cbSize ; 
	2261:	DWORD dwFlags ; 
	2262:	LPSTR lpszDefaultScheme ; 
	2263:	} HIGHCONTRASTA , * LPHIGHCONTRASTA ; 
	2264:	typedef struct tagHIGHCONTRASTW { 
	2265:	UINT cbSize ; 
	2266:	DWORD dwFlags ; 
	2267:	LPWSTR lpszDefaultScheme ; 
	2268:	} HIGHCONTRASTW , * LPHIGHCONTRASTW ; 
	2269:	typedef struct tagICONMETRICSA { 
	2270:	UINT cbSize ; 
	2271:	int iHorzSpacing ; 
	2272:	int iVertSpacing ; 
	2273:	int iTitleWrap ; 
	2274:	LOGFONTA lfFont ; 
	2275:	} ICONMETRICSA , * LPICONMETRICSA ; 
	2276:	typedef struct tagICONMETRICSW { 
	2277:	UINT cbSize ; 
	2278:	int iHorzSpacing ; 
	2279:	int iVertSpacing ; 
	2280:	int iTitleWrap ; 
	2281:	LOGFONTW lfFont ; 
	2282:	} ICONMETRICSW , * LPICONMETRICSW ; 
	2283:	typedef struct tagMINIMIZEDMETRICS { 
	2284:	UINT cbSize ; 
	2285:	int iWidth ; 
	2286:	int iHorzGap ; 
	2287:	int iVertGap ; 
	2288:	int iArrange ; 
	2289:	} MINIMIZEDMETRICS , * LPMINIMIZEDMETRICS ; 
	2290:	typedef struct tagMOUSEKEYS { 
	2291:	UINT cbSize ; 
	2292:	DWORD dwFlags ; 
	2293:	DWORD iMaxSpeed ; 
	2294:	DWORD iTimeToMaxSpeed ; 
	2295:	DWORD iCtrlSpeed ; 
	2296:	DWORD dwReserved1 ; 
	2297:	DWORD dwReserved2 ; 
	2298:	} MOUSEKEYS , * LPMOUSEKEYS ; 
	2299:	typedef struct tagNONCLIENTMETRICSA { 
	2300:	UINT cbSize ; 
	2301:	int iBorderWidth ; 
	2302:	int iScrollWidth ; 
	2303:	int iScrollHeight ; 
	2304:	int iCaptionWidth ; 
	2305:	int iCaptionHeight ; 
	2306:	LOGFONTA lfCaptionFont ; 
	2307:	int iSmCaptionWidth ; 
	2308:	int iSmCaptionHeight ; 
	2309:	LOGFONTA lfSmCaptionFont ; 
	2310:	int iMenuWidth ; 
	2311:	int iMenuHeight ; 
	2312:	LOGFONTA lfMenuFont ; 
	2313:	LOGFONTA lfStatusFont ; 
	2314:	LOGFONTA lfMessageFont ; 
	2315:	} NONCLIENTMETRICSA , * LPNONCLIENTMETRICSA ; 
	2316:	typedef struct tagNONCLIENTMETRICSW { 
	2317:	UINT cbSize ; 
	2318:	int iBorderWidth ; 
	2319:	int iScrollWidth ; 
	2320:	int iScrollHeight ; 
	2321:	int iCaptionWidth ; 
	2322:	int iCaptionHeight ; 
	2323:	LOGFONTW lfCaptionFont ; 
	2324:	int iSmCaptionWidth ; 
	2325:	int iSmCaptionHeight ; 
	2326:	LOGFONTW lfSmCaptionFont ; 
	2327:	int iMenuWidth ; 
	2328:	int iMenuHeight ; 
	2329:	LOGFONTW lfMenuFont ; 
	2330:	LOGFONTW lfStatusFont ; 
	2331:	LOGFONTW lfMessageFont ; 
	2332:	} NONCLIENTMETRICSW , * LPNONCLIENTMETRICSW ; 
	2333:	typedef struct tagSERIALKEYSA { 
	2334:	UINT cbSize ; 
	2335:	DWORD dwFlags ; 
	2336:	LPSTR lpszActivePort ; 
	2337:	LPSTR lpszPort ; 
	2338:	UINT iBaudRate ; 
	2339:	UINT iPortState ; 
	2340:	UINT iActive ; 
	2341:	} SERIALKEYSA , * LPSERIALKEYSA ; 
	2342:	typedef struct tagSERIALKEYSW { 
	2343:	UINT cbSize ; 
	2344:	DWORD dwFlags ; 
	2345:	LPWSTR lpszActivePort ; 
	2346:	LPWSTR lpszPort ; 
	2347:	UINT iBaudRate ; 
	2348:	UINT iPortState ; 
	2349:	UINT iActive ; 
	2350:	} SERIALKEYSW , * LPSERIALKEYSW ; 
	2351:	typedef struct tagSOUNDSENTRYA { 
	2352:	UINT cbSize ; 
	2353:	DWORD dwFlags ; 
	2354:	DWORD iFSTextEffect ; 
	2355:	DWORD iFSTextEffectMSec ; 
	2356:	DWORD iFSTextEffectColorBits ; 
	2357:	DWORD iFSGrafEffect ; 
	2358:	DWORD iFSGrafEffectMSec ; 
	2359:	DWORD iFSGrafEffectColor ; 
	2360:	DWORD iWindowsEffect ; 
	2361:	DWORD iWindowsEffectMSec ; 
	2362:	LPSTR lpszWindowsEffectDLL ; 
	2363:	DWORD iWindowsEffectOrdinal ; 
	2364:	} SOUNDSENTRYA , * LPSOUNDSENTRYA ; 
	2365:	typedef struct tagSOUNDSENTRYW { 
	2366:	UINT cbSize ; 
	2367:	DWORD dwFlags ; 
	2368:	DWORD iFSTextEffect ; 
	2369:	DWORD iFSTextEffectMSec ; 
	2370:	DWORD iFSTextEffectColorBits ; 
	2371:	DWORD iFSGrafEffect ; 
	2372:	DWORD iFSGrafEffectMSec ; 
	2373:	DWORD iFSGrafEffectColor ; 
	2374:	DWORD iWindowsEffect ; 
	2375:	DWORD iWindowsEffectMSec ; 
	2376:	LPWSTR lpszWindowsEffectDLL ; 
	2377:	DWORD iWindowsEffectOrdinal ; 
	2378:	} SOUNDSENTRYW , * LPSOUNDSENTRYW ; 
	2379:	typedef struct tagSTICKYKEYS { 
	2380:	DWORD cbSize ; 
	2381:	DWORD dwFlags ; 
	2382:	} STICKYKEYS , * LPSTICKYKEYS ; 
	2383:	typedef struct tagTOGGLEKEYS { 
	2384:	DWORD cbSize ; 
	2385:	DWORD dwFlags ; 
	2386:	} TOGGLEKEYS ; 
	2387:	typedef struct tagTRACKMOUSEEVENT { 
	2388:	DWORD cbSize ; 
	2389:	DWORD dwFlags ; 
	2390:	HWND hwndTrack ; 
	2391:	DWORD dwHoverTime ; 
	2392:	} TRACKMOUSEEVENT , * LPTRACKMOUSEEVENT ; 
	2393:	typedef struct tagTPMPARAMS { 
	2394:	UINT cbSize ; 
	2395:	RECT rcExclude ; 
	2396:	} TPMPARAMS , * LPTPMPARAMS ; 
	2397:	typedef struct tagEVENTMSG { 
	2398:	UINT message ; 
	2399:	UINT paramL ; 
	2400:	UINT paramH ; 
	2401:	DWORD time ; 
	2402:	HWND hwnd ; 
	2403:	} EVENTMSG , * PEVENTMSGMSG , * LPEVENTMSGMSG , * PEVENTMSG , * LPEVENTMSG ; 
	2404:	typedef struct _WINDOWPOS { 
	2405:	HWND hwnd ; 
	2406:	HWND hwndInsertAfter ; 
	2407:	int x ; 
	2408:	int y ; 
	2409:	int cx ; 
	2410:	int cy ; 
	2411:	UINT flags ; 
	2412:	} WINDOWPOS , * PWINDOWPOS , * LPWINDOWPOS ; 
	2413:	typedef struct tagMDICREATESTRUCTA { 
	2414:	LPCSTR szClass ; 
	2415:	LPCSTR szTitle ; 
	2416:	HANDLE hOwner ; 
	2417:	int x ; 
	2418:	int y ; 
	2419:	int cx ; 
	2420:	int cy ; 
	2421:	DWORD style ; 
	2422:	LPARAM lParam ; 
	2423:	} MDICREATESTRUCTA , * LPMDICREATESTRUCTA ; 
	2424:	typedef struct tagMDICREATESTRUCTW { 
	2425:	LPCWSTR szClass ; 
	2426:	LPCWSTR szTitle ; 
	2427:	HANDLE hOwner ; 
	2428:	int x ; 
	2429:	int y ; 
	2430:	int cx ; 
	2431:	int cy ; 
	2432:	DWORD style ; 
	2433:	LPARAM lParam ; 
	2434:	} MDICREATESTRUCTW , * LPMDICREATESTRUCTW ; 
	2435:	typedef struct tagMINMAXINFO { 
	2436:	POINT ptReserved ; 
	2437:	POINT ptMaxSize ; 
	2438:	POINT ptMaxPosition ; 
	2439:	POINT ptMinTrackSize ; 
	2440:	POINT ptMaxTrackSize ; 
	2441:	} MINMAXINFO , * PMINMAXINFO , * LPMINMAXINFO ; 
	2442:	typedef struct tagMDINEXTMENU { 
	2443:	HMENU hmenuIn ; 
	2444:	HMENU hmenuNext ; 
	2445:	HWND hwndNext ; 
	2446:	} MDINEXTMENU , * PMDINEXTMENU , * LPMDINEXTMENU ; 
	2447:	typedef struct tagMEASUREITEMSTRUCT { 
	2448:	UINT CtlType ; 
	2449:	UINT CtlID ; 
	2450:	UINT itemID ; 
	2451:	UINT itemWidth ; 
	2452:	UINT itemHeight ; 
	2453:	DWORD itemData ; 
	2454:	} MEASUREITEMSTRUCT , * PMEASUREITEMSTRUCT , * LPMEASUREITEMSTRUCT ; 
	2455:	typedef struct tagDROPSTRUCT { 
	2456:	HWND hwndSource ; 
	2457:	HWND hwndSink ; 
	2458:	DWORD wFmt ; 
	2459:	DWORD dwData ; 
	2460:	POINT ptDrop ; 
	2461:	DWORD dwControlData ; 
	2462:	} DROPSTRUCT , * PDROPSTRUCT , * LPDROPSTRUCT ; 
	2463:	typedef DWORD HELPPOLY ; 
	2464:	typedef struct tagMULTIKEYHELPA { 
	2465:	DWORD mkSize ; 
	2466:	CHAR mkKeylist ; 
	2467:	CHAR szKeyphrase [ 1 ] ; 
	2468:	} MULTIKEYHELPA , * PMULTIKEYHELPA , * LPMULTIKEYHELPA ; 
	2469:	typedef struct tagMULTIKEYHELPW { 
	2470:	DWORD mkSize ; 
	2471:	WCHAR mkKeylist ; 
	2472:	WCHAR szKeyphrase [ 1 ] ; 
	2473:	} MULTIKEYHELPW , * PMULTIKEYHELPW , * LPMULTIKEYHELPW ; 
	2474:	typedef struct tagHELPWININFOA { 
	2475:	int wStructSize ; 
	2476:	int x ; 
	2477:	int y ; 
	2478:	int dx ; 
	2479:	int dy ; 
	2480:	int wMax ; 
	2481:	CHAR rgchMember [ 2 ] ; 
	2482:	} HELPWININFOA , * PHELPWININFOA , * LPHELPWININFOA ; 
	2483:	typedef struct tagHELPWININFOW { 
	2484:	int wStructSize ; 
	2485:	int x ; 
	2486:	int y ; 
	2487:	int dx ; 
	2488:	int dy ; 
	2489:	int wMax ; 
	2490:	WCHAR rgchMember [ 2 ] ; 
	2491:	} HELPWININFOW , * PHELPWININFOW , * LPHELPWININFOW ; 
	2492:	typedef struct tagSTYLESTRUCT { DWORD styleOld ; 
	2493:	DWORD styleNew ; 
	2494:	} STYLESTRUCT , * LPSTYLESTRUCT ; 
	2495:	typedef struct tagALTTABINFO { 
	2496:	DWORD cbSize ; 
	2497:	int cItems ; 
	2498:	int cColumns ; 
	2499:	int cRows ; 
	2500:	int iColFocus ; 
	2501:	int iRowFocus ; 
	2502:	int cxItem ; 
	2503:	int cyItem ; 
	2504:	POINT ptStart ; 
	2505:	} ALTTABINFO , * PALTTABINFO , * LPALTTABINFO ; 
	2506:	typedef struct tagCOMBOBOXINFO { 
	2507:	DWORD cbSize ; 
	2508:	RECT rcItem ; 
	2509:	RECT rcButton ; 
	2510:	DWORD stateButton ; 
	2511:	HWND hwndCombo ; 
	2512:	HWND hwndItem ; 
	2513:	HWND hwndList ; 
	2514:	} COMBOBOXINFO , * PCOMBOBOXINFO , * LPCOMBOBOXINFO ; 
	2515:	typedef struct tagCURSORINFO { 
	2516:	DWORD cbSize ; 
	2517:	DWORD flags ; 
	2518:	HCURSOR hCursor ; 
	2519:	POINT ptScreenPos ; 
	2520:	} CURSORINFO , * PCURSORINFO , * LPCURSORINFO ; 
	2521:	typedef struct tagMENUBARINFO { 
	2522:	DWORD cbSize ; 
	2523:	RECT rcBar ; 
	2524:	HMENU hMenu ; 
	2525:	HWND hwndMenu ; 
	2526:	BOOL fBarFocused : 1 ; 
	2527:	BOOL fFocused : 1 ; 
	2528:	} MENUBARINFO , * PMENUBARINFO ; 
	2529:	typedef struct tagMENUINFO { 
	2530:	DWORD cbSize ; 
	2531:	DWORD fMask ; 
	2532:	DWORD dwStyle ; 
	2533:	UINT cyMax ; 
	2534:	HBRUSH hbrBack ; 
	2535:	DWORD dwContextHelpID ; 
	2536:	ULONG_PTR dwMenuData ; 
	2537:	} MENUINFO , * LPMENUINFO ; 
	2538:	typedef MENUINFO const * LPCMENUINFO ; 
	2540:	typedef struct tagSCROLLBARINFO { 
	2541:	DWORD cbSize ; 
	2542:	RECT rcScrollBar ; 
	2543:	int dxyLineButton ; 
	2544:	int xyThumbTop ; 
	2545:	int xyThumbBottom ; 
	2546:	int reserved ; 
	2547:	DWORD rgstate [ 5 + 1 ] ; 
	2548:	} SCROLLBARINFO , * PSCROLLBARINFO , * LPSCROLLBARINFO ; 
	2550:	typedef struct tagTITLEBARINFO { 
	2551:	DWORD cbSize ; 
	2552:	RECT rcTitleBar ; 
	2553:	DWORD rgstate [ 5 + 1 ] ; 
	2554:	} TITLEBARINFO , * PTITLEBARINFO , * LPTITLEBARINFO ; 
	2555:	typedef struct tagWINDOWINFO { 
	2556:	DWORD cbSize ; 
	2557:	RECT rcWindow ; 
	2558:	RECT rcClient ; 
	2559:	DWORD dwStyle ; 
	2560:	DWORD dwExStyle ; 
	2561:	DWORD dwWindowStatus ; 
	2562:	UINT cxWindowBorders ; 
	2563:	UINT cyWindowBorders ; 
	2564:	ATOM atomWindowType ; 
	2565:	WORD wCreatorVersion ; 
	2566:	} WINDOWINFO , * PWINDOWINFO , * LPWINDOWINFO ; 
	2567:	typedef struct tagLASTINPUTINFO { 
	2568:	UINT cbSize ; 
	2569:	DWORD dwTime ; 
	2570:	} LASTINPUTINFO , * PLASTINPUTINFO ; 
	2571:	typedef struct tagMONITORINFO { 
	2572:	DWORD cbSize ; 
	2573:	RECT rcMonitor ; 
	2574:	RECT rcWork ; 
	2575:	DWORD dwFlags ; 
	2576:	} MONITORINFO , * LPMONITORINFO ; 
	2577:	typedef struct tagKBDLLHOOKSTRUCT { 
	2578:	DWORD vkCode ; 
	2579:	DWORD scanCode ; 
	2580:	DWORD flags ; 
	2581:	DWORD time ; 
	2582:	DWORD dwExtraInfo ; 
	2583:	} KBDLLHOOKSTRUCT , * LPKBDLLHOOKSTRUCT , * PKBDLLHOOKSTRUCT ; 
	2602:	HKL ActivateKeyboardLayout ( HKL , UINT ) ; 
	2603:	BOOL AdjustWindowRect ( LPRECT , DWORD , BOOL ) ; 
	2604:	BOOL AdjustWindowRectEx ( LPRECT , DWORD , BOOL , DWORD ) ; 
	2605:	BOOL AnyPopup ( void ) ; 
	2606:	BOOL AppendMenuA ( HMENU , UINT , UINT , LPCSTR ) ; 
	2607:	BOOL AppendMenuW ( HMENU , UINT , UINT , LPCWSTR ) ; 
	2608:	UINT ArrangeIconicWindows ( HWND ) ; 
	2609:	BOOL AttachThreadInput ( DWORD , DWORD , BOOL ) ; 
	2610:	HDWP BeginDeferWindowPos ( int ) ; 
	2611:	HDC BeginPaint ( HWND , LPPAINTSTRUCT ) ; 
	2612:	BOOL BringWindowToTop ( HWND ) ; 
	2613:	long BroadcastSystemMessage ( DWORD , LPDWORD , UINT , WPARAM , LPARAM ) ; 
	2614:	BOOL CallMsgFilter ( PMSG , int ) ; 
	2615:	LRESULT CallNextHookEx ( HHOOK , int , WPARAM , LPARAM ) ; 
	2616:	LRESULT CallWindowProcA ( WNDPROC , HWND , UINT , WPARAM , LPARAM ) ; 
	2617:	LRESULT CallWindowProcW ( WNDPROC , HWND , UINT , WPARAM , LPARAM ) ; 
	2618:	WORD CascadeWindows ( HWND , UINT , LPCRECT , UINT , const HWND * ) ; 
	2619:	BOOL ChangeClipboardChain ( HWND , HWND ) ; 
	2620:	LONG ChangeDisplaySettingsA ( PDEVMODEA , DWORD ) ; 
	2621:	LONG ChangeDisplaySettingsW ( PDEVMODEW , DWORD ) ; 
	2622:	BOOL ChangeMenuA ( HMENU , UINT , LPCSTR , UINT , UINT ) ; 
	2623:	BOOL ChangeMenuW ( HMENU , UINT , LPCWSTR , UINT , UINT ) ; 
	2624:	LPSTR CharLowerA ( LPSTR ) ; 
	2625:	LPWSTR CharLowerW ( LPWSTR ) ; 
	2626:	DWORD CharLowerBuffA ( LPSTR , DWORD ) ; 
	2627:	DWORD CharLowerBuffW ( LPWSTR , DWORD ) ; 
	2628:	LPSTR CharNextA ( LPCSTR ) ; 
	2629:	LPWSTR CharNextW ( LPCWSTR ) ; 
	2630:	LPSTR CharNextExA ( WORD , LPCSTR , DWORD ) ; 
	2631:	LPWSTR CharNextExW ( WORD , LPCWSTR , DWORD ) ; 
	2632:	LPSTR CharPrevA ( LPCSTR , LPCSTR ) ; 
	2633:	LPWSTR CharPrevW ( LPCWSTR , LPCWSTR ) ; 
	2634:	LPSTR CharPrevExA ( WORD , LPCSTR , LPCSTR , DWORD ) ; 
	2635:	LPWSTR CharPrevExW ( WORD , LPCWSTR , LPCWSTR , DWORD ) ; 
	2636:	BOOL CharToOemA ( LPCSTR , LPSTR ) ; 
	2637:	BOOL CharToOemW ( LPCWSTR , LPSTR ) ; 
	2638:	BOOL CharToOemBuffA ( LPCSTR , LPSTR , DWORD ) ; 
	2639:	BOOL CharToOemBuffW ( LPCWSTR , LPSTR , DWORD ) ; 
	2640:	LPSTR CharUpperA ( LPSTR ) ; 
	2641:	LPWSTR CharUpperW ( LPWSTR ) ; 
	2642:	DWORD CharUpperBuffA ( LPSTR , DWORD ) ; 
	2643:	DWORD CharUpperBuffW ( LPWSTR , DWORD ) ; 
	2644:	BOOL CheckDlgButton ( HWND , int , UINT ) ; 
	2645:	DWORD CheckMenuItem ( HMENU , UINT , UINT ) ; 
	2646:	BOOL CheckMenuRadioItem ( HMENU , UINT , UINT , UINT , UINT ) ; 
	2647:	BOOL CheckRadioButton ( HWND , int , int , int ) ; 
	2648:	HWND ChildWindowFromPoint ( HWND , POINT ) ; 
	2649:	HWND ChildWindowFromPointEx ( HWND , POINT , UINT ) ; 
	2650:	BOOL ClientToScreen ( HWND , LPPOINT ) ; 
	2651:	BOOL ClipCursor ( LPCRECT ) ; 
	2652:	BOOL CloseClipboard ( void ) ; 
	2653:	BOOL CloseDesktop ( HDESK ) ; 
	2654:	BOOL CloseWindow ( HWND ) ; 
	2655:	BOOL CloseWindowStation ( HWINSTA ) ; 
	2656:	int CopyAcceleratorTableA ( HACCEL , LPACCEL , int ) ; 
	2657:	int CopyAcceleratorTableW ( HACCEL , LPACCEL , int ) ; 
	2658:	HCURSOR CopyCursor ( HCURSOR ) ; 
	2659:	HICON CopyIcon ( HICON ) ; 
	2660:	HANDLE CopyImage ( HANDLE , UINT , int , int , UINT ) ; 
	2661:	BOOL CopyRect ( LPRECT , LPCRECT ) ; 
	2662:	int CountClipboardFormats ( void ) ; 
	2663:	HACCEL CreateAcceleratorTableA ( LPACCEL , int ) ; 
	2664:	HACCEL CreateAcceleratorTableW ( LPACCEL , int ) ; 
	2665:	BOOL CreateCaret ( HWND , HBITMAP , int , int ) ; 
	2666:	HCURSOR CreateCursor ( HINSTANCE , int , int , int , int , PCVOID , PCVOID ) ; 
	2667:	HDESK CreateDesktopA ( LPSTR , LPSTR , LPDEVMODEA , DWORD , DWORD , LPSECURITY_ATTRIBUTES ) ; 
	2668:	HDESK CreateDesktopW ( LPWSTR , LPWSTR , LPDEVMODEW , DWORD , DWORD , LPSECURITY_ATTRIBUTES ) ; 
	2673:	HWND CreateDialogIndirectParamA ( HINSTANCE , LPCDLGTEMPLATE , HWND , DLGPROC , LPARAM ) ; 
	2674:	HWND CreateDialogIndirectParamW ( HINSTANCE , LPCDLGTEMPLATE , HWND , DLGPROC , LPARAM ) ; 
	2675:	HWND CreateDialogParamA ( HINSTANCE , LPCSTR , HWND , DLGPROC , LPARAM ) ; 
	2676:	HWND CreateDialogParamW ( HINSTANCE , LPCWSTR , HWND , DLGPROC , LPARAM ) ; 
	2677:	HICON CreateIcon ( HINSTANCE , int , int , BYTE , BYTE , const BYTE * , const BYTE * ) ; 
	2678:	HICON CreateIconFromResource ( PBYTE , DWORD , BOOL , DWORD ) ; 
	2679:	HICON CreateIconFromResourceEx ( PBYTE , DWORD , BOOL , DWORD , int , int , UINT ) ; 
	2680:	HICON CreateIconIndirect ( PICONINFO ) ; 
	2681:	HWND CreateMDIWindowA ( LPSTR , LPSTR , DWORD , int , int , int , int , HWND , HINSTANCE , LPARAM ) ; 
	2682:	HWND CreateMDIWindowW ( LPWSTR , LPWSTR , DWORD , int , int , int , int , HWND , HINSTANCE , LPARAM ) ; 
	2683:	HMENU CreateMenu ( void ) ; 
	2684:	HMENU CreatePopupMenu ( void ) ; 
	2687:	HWND CreateWindowExA ( DWORD , LPCSTR , LPCSTR , DWORD , int , int , int , int , HWND , HMENU , HINSTANCE , LPVOID ) ; 
	2688:	HWND CreateWindowExW ( DWORD , LPCWSTR , LPCWSTR , DWORD , int , int , int , int , HWND , HMENU , HINSTANCE , LPVOID ) ; 
	2689:	HWINSTA CreateWindowStationA ( LPSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES ) ; 
	2690:	HWINSTA CreateWindowStationW ( LPWSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES ) ; 
	2691:	LRESULT DefDlgProcA ( HWND , UINT , WPARAM , LPARAM ) ; 
	2692:	LRESULT DefDlgProcW ( HWND , UINT , WPARAM , LPARAM ) ; 
	2693:	HDWP DeferWindowPos ( HDWP , HWND , HWND , int , int , int , int , UINT ) ; 
	2694:	LRESULT DefFrameProcA ( HWND , HWND , UINT , WPARAM , LPARAM ) ; 
	2695:	LRESULT DefFrameProcW ( HWND , HWND , UINT , WPARAM , LPARAM ) ; 
	2697:	LRESULT DefMDIChildProcA ( HWND , UINT , WPARAM , LPARAM ) ; 
	2698:	LRESULT DefMDIChildProcW ( HWND , UINT , WPARAM , LPARAM ) ; 
	2699:	LRESULT DefWindowProcA ( HWND , UINT , WPARAM , LPARAM ) ; 
	2700:	LRESULT DefWindowProcW ( HWND , UINT , WPARAM , LPARAM ) ; 
	2701:	BOOL DeleteMenu ( HMENU , UINT , UINT ) ; 
	2702:	BOOL DestroyAcceleratorTable ( HACCEL ) ; 
	2703:	BOOL DestroyCaret ( void ) ; 
	2704:	BOOL DestroyCursor ( HCURSOR ) ; 
	2705:	BOOL DestroyIcon ( HICON ) ; 
	2706:	BOOL DestroyMenu ( HMENU ) ; 
	2707:	BOOL DestroyWindow ( HWND ) ; 
	2712:	int DialogBoxIndirectParamA ( HINSTANCE , LPCDLGTEMPLATE , HWND , DLGPROC , LPARAM ) ; 
	2713:	int DialogBoxIndirectParamW ( HINSTANCE , LPCDLGTEMPLATE , HWND , DLGPROC , LPARAM ) ; 
	2714:	int DialogBoxParamA ( HINSTANCE , LPCSTR , HWND , DLGPROC , LPARAM ) ; 
	2715:	int DialogBoxParamW ( HINSTANCE , LPCWSTR , HWND , DLGPROC , LPARAM ) ; 
	2716:	LONG DispatchMessageA ( const MSG * ) ; 
	2717:	LONG DispatchMessageW ( const MSG * ) ; 
	2718:	int DlgDirListA ( HWND , LPSTR , int , int , UINT ) ; 
	2719:	int DlgDirListW ( HWND , LPWSTR , int , int , UINT ) ; 
	2720:	int DlgDirListComboBoxA ( HWND , LPSTR , int , int , UINT ) ; 
	2721:	int DlgDirListComboBoxW ( HWND , LPWSTR , int , int , UINT ) ; 
	2722:	BOOL DlgDirSelectComboBoxExA ( HWND , LPSTR , int , int ) ; 
	2723:	BOOL DlgDirSelectComboBoxExW ( HWND , LPWSTR , int , int ) ; 
	2724:	BOOL DlgDirSelectExA ( HWND , LPSTR , int , int ) ; 
	2725:	BOOL DlgDirSelectExW ( HWND , LPWSTR , int , int ) ; 
	2726:	BOOL DragDetect ( HWND , POINT ) ; 
	2727:	DWORD DragObject ( HWND , HWND , UINT , DWORD , HCURSOR ) ; 
	2728:	BOOL DrawAnimatedRects ( HWND , int , LPCRECT , LPCRECT ) ; 
	2729:	BOOL DrawCaption ( HWND , HDC , LPCRECT , UINT ) ; 
	2730:	BOOL DrawEdge ( HDC , LPRECT , UINT , UINT ) ; 
	2731:	BOOL DrawFocusRect ( HDC , LPCRECT ) ; 
	2732:	BOOL DrawFrameControl ( HDC , LPRECT , UINT , UINT ) ; 
	2733:	BOOL DrawIcon ( HDC , int , int , HICON ) ; 
	2734:	BOOL DrawIconEx ( HDC , int , int , HICON , int , int , UINT , HBRUSH , UINT ) ; 
	2735:	BOOL DrawMenuBar ( HWND ) ; 
	2736:	BOOL DrawStateA ( HDC , HBRUSH , DRAWSTATEPROC , LPARAM , WPARAM , int , int , int , int , UINT ) ; 
	2737:	BOOL DrawStateW ( HDC , HBRUSH , DRAWSTATEPROC , LPARAM , WPARAM , int , int , int , int , UINT ) ; 
	2738:	int DrawTextA ( HDC , LPCSTR , int , LPRECT , UINT ) ; 
	2739:	int DrawTextW ( HDC , LPCWSTR , int , LPRECT , UINT ) ; 
	2740:	int DrawTextExA ( HDC , LPSTR , int , LPRECT , UINT , LPDRAWTEXTPARAMS ) ; 
	2741:	int DrawTextExW ( HDC , LPWSTR , int , LPRECT , UINT , LPDRAWTEXTPARAMS ) ; 
	2742:	BOOL EmptyClipboard ( void ) ; 
	2743:	BOOL EnableMenuItem ( HMENU , UINT , UINT ) ; 
	2744:	BOOL EnableScrollBar ( HWND , UINT , UINT ) ; 
	2745:	BOOL EnableWindow ( HWND , BOOL ) ; 
	2746:	BOOL EndDeferWindowPos ( HDWP ) ; 
	2747:	BOOL EndDialog ( HWND , int ) ; 
	2748:	BOOL EndMenu ( void ) ; 
	2749:	BOOL EndPaint ( HWND , const PAINTSTRUCT * ) ; 
	2750:	BOOL EnumChildWindows ( HWND , ENUMWINDOWSPROC , LPARAM ) ; 
	2751:	UINT EnumClipboardFormats ( UINT ) ; 
	2752:	BOOL EnumDesktopsA ( HWINSTA , DESKTOPENUMPROCA , LPARAM ) ; 
	2753:	BOOL EnumDesktopsW ( HWINSTA , DESKTOPENUMPROCW , LPARAM ) ; 
	2754:	BOOL EnumDesktopWindows ( HDESK , ENUMWINDOWSPROC , LPARAM ) ; 
	2755:	BOOL EnumDisplayMonitors ( HDC , LPCRECT , MONITORENUMPROC , LPARAM ) ; 
	2756:	BOOL EnumDisplaySettingsA ( LPCSTR , DWORD , PDEVMODEA ) ; 
	2757:	BOOL EnumDisplaySettingsW ( LPCWSTR , DWORD , PDEVMODEW ) ; 
	2758:	int EnumPropsA ( HWND , PROPENUMPROCA ) ; 
	2759:	int EnumPropsW ( HWND , PROPENUMPROCW ) ; 
	2760:	int EnumPropsExA ( HWND , PROPENUMPROCEXA , LPARAM ) ; 
	2761:	int EnumPropsExW ( HWND , PROPENUMPROCEXW , LPARAM ) ; 
	2763:	BOOL EnumThreadWindows ( DWORD , WNDENUMPROC , LPARAM ) ; 
	2764:	BOOL EnumWindows ( WNDENUMPROC , LPARAM ) ; 
	2765:	BOOL EnumWindowStationsA ( WINSTAENUMPROCA , LPARAM ) ; 
	2766:	BOOL EnumWindowStationsW ( WINSTAENUMPROCW , LPARAM ) ; 
	2767:	BOOL EqualRect ( LPCRECT , LPCRECT ) ; 
	2769:	BOOL ExitWindowsEx ( UINT , DWORD ) ; 
	2770:	HWND FindWindowA ( LPCSTR , LPCSTR ) ; 
	2771:	HWND FindWindowExA ( HWND , HWND , LPCSTR , LPCSTR ) ; 
	2772:	HWND FindWindowExW ( HWND , HWND , LPCWSTR , LPCWSTR ) ; 
	2773:	HWND FindWindowW ( LPCWSTR , LPCWSTR ) ; 
	2774:	BOOL FlashWindow ( HWND , BOOL ) ; 
	2775:	int FrameRect ( HDC , LPCRECT , HBRUSH ) ; 
	2776:	BOOL FrameRgn ( HDC , HRGN , HBRUSH , int , int ) ; 
	2777:	HWND GetActiveWindow ( void ) ; 
	2778:	SHORT GetAsyncKeyState ( int ) ; 
	2779:	HWND GetCapture ( void ) ; 
	2780:	UINT GetCaretBlinkTime ( void ) ; 
	2781:	BOOL GetCaretPos ( LPPOINT ) ; 
	2782:	BOOL GetClassInfoA ( HINSTANCE , LPCSTR , PWNDCLASSA ) ; 
	2783:	BOOL GetClassInfoExA ( HINSTANCE , LPCSTR , PWNDCLASSEXA ) ; 
	2784:	BOOL GetClassInfoW ( HINSTANCE , LPCWSTR , PWNDCLASSW ) ; 
	2785:	BOOL GetClassInfoExW ( HINSTANCE , LPCWSTR , PWNDCLASSEXW ) ; 
	2786:	DWORD GetClassLongA ( HWND , int ) ; 
	2787:	DWORD GetClassLongW ( HWND , int ) ; 
	2788:	int GetClassNameA ( HWND , LPSTR , int ) ; 
	2789:	int GetClassNameW ( HWND , LPWSTR , int ) ; 
	2790:	WORD GetClassWord ( HWND , int ) ; 
	2791:	BOOL GetClientRect ( HWND , LPRECT ) ; 
	2792:	HANDLE GetClipboardData ( UINT ) ; 
	2793:	int GetClipboardFormatNameA ( UINT , LPSTR , int ) ; 
	2794:	int GetClipboardFormatNameW ( UINT , LPWSTR , int ) ; 
	2795:	HWND GetClipboardOwner ( void ) ; 
	2796:	HWND GetClipboardViewer ( void ) ; 
	2797:	BOOL GetClipCursor ( LPRECT ) ; 
	2798:	BOOL GetCursorPos ( LPPOINT ) ; 
	2799:	HDC GetDC ( HWND ) ; 
	2800:	HDC GetDCEx ( HWND , HRGN , DWORD ) ; 
	2801:	HWND GetDesktopWindow ( void ) ; 
	2802:	long GetDialogBaseUnits ( void ) ; 
	2803:	int GetDlgCtrlID ( HWND ) ; 
	2804:	HWND GetDlgItem ( HWND , int ) ; 
	2805:	UINT GetDlgItemInt ( HWND , int , PBOOL , BOOL ) ; 
	2806:	UINT GetDlgItemTextA ( HWND , int , LPSTR , int ) ; 
	2807:	UINT GetDlgItemTextW ( HWND , int , LPWSTR , int ) ; 
	2808:	UINT GetDoubleClickTime ( void ) ; 
	2809:	HWND GetFocus ( void ) ; 
	2810:	HWND GetForegroundWindow ( void ) ; 
	2811:	BOOL GetIconInfo ( HICON , PICONINFO ) ; 
	2812:	BOOL GetInputState ( void ) ; 
	2813:	UINT GetKBCodePage ( void ) ; 
	2814:	HKL GetKeyboardLayout ( DWORD ) ; 
	2815:	int GetKeyboardLayoutList ( int , HKL * ) ; 
	2816:	BOOL GetKeyboardLayoutNameA ( LPSTR ) ; 
	2817:	BOOL GetKeyboardLayoutNameW ( LPWSTR ) ; 
	2818:	BOOL GetKeyboardState ( PBYTE ) ; 
	2819:	int GetKeyboardType ( int ) ; 
	2820:	int GetKeyNameTextA ( LONG , LPSTR , int ) ; 
	2821:	int GetKeyNameTextW ( LONG , LPWSTR , int ) ; 
	2822:	SHORT GetKeyState ( int ) ; 
	2823:	HWND GetLastActivePopup ( HWND ) ; 
	2824:	DWORD GetLastError ( void ) ; 
	2825:	HMENU GetMenu ( HWND ) ; 
	2826:	LONG GetMenuCheckMarkDimensions ( void ) ; 
	2827:	DWORD GetMenuContextHelpId ( HMENU ) ; 
	2828:	UINT GetMenuDefaultItem ( HMENU , UINT , UINT ) ; 
	2829:	int GetMenuItemCount ( HMENU ) ; 
	2830:	UINT GetMenuItemID ( HMENU , int ) ; 
	2831:	BOOL GetMenuItemInfoA ( HMENU , UINT , BOOL , LPMENUITEMINFOA ) ; 
	2832:	BOOL GetMenuItemInfoW ( HMENU , UINT , BOOL , LPMENUITEMINFOW ) ; 
	2833:	BOOL GetMenuItemRect ( HWND , HMENU , UINT , LPRECT ) ; 
	2834:	UINT GetMenuState ( HMENU , UINT , UINT ) ; 
	2835:	int GetMenuStringA ( HMENU , UINT , LPSTR , int , UINT ) ; 
	2836:	int GetMenuStringW ( HMENU , UINT , LPWSTR , int , UINT ) ; 
	2837:	BOOL GetMessageA ( LPMSG , HWND , UINT , UINT ) ; 
	2838:	BOOL GetMessageW ( LPMSG , HWND , UINT , UINT ) ; 
	2839:	LONG GetMessageExtraInfo ( void ) ; 
	2840:	DWORD GetMessagePos ( void ) ; 
	2841:	LONG GetMessageTime ( void ) ; 
	2842:	HWND GetNextDlgGroupItem ( HWND , HWND , BOOL ) ; 
	2843:	HWND GetNextDlgTabItem ( HWND , HWND , BOOL ) ; 
	2845:	HWND GetOpenClipboardWindow ( void ) ; 
	2846:	HWND GetParent ( HWND ) ; 
	2847:	int GetPriorityClipboardFormat ( UINT * , int ) ; 
	2848:	HANDLE GetPropA ( HWND , LPCSTR ) ; 
	2849:	HANDLE GetPropW ( HWND , LPCWSTR ) ; 
	2850:	DWORD GetQueueStatus ( UINT ) ; 
	2851:	BOOL GetScrollInfo ( HWND , int , LPSCROLLINFO ) ; 
	2852:	int GetScrollPos ( HWND , int ) ; 
	2853:	BOOL GetScrollRange ( HWND , int , LPINT , LPINT ) ; 
	2854:	HMENU GetSubMenu ( HMENU , int ) ; 
	2855:	DWORD GetSysColor ( int ) ; 
	2856:	HBRUSH GetSysColorBrush ( int ) ; 
	2858:	HMENU GetSystemMenu ( HWND , BOOL ) ; 
	2859:	int GetSystemMetrics ( int ) ; 
	2860:	DWORD GetTabbedTextExtentA ( HDC , LPCSTR , int , int , LPINT ) ; 
	2861:	DWORD GetTabbedTextExtentW ( HDC , LPCWSTR , int , int , LPINT ) ; 
	2862:	LONG GetWindowLongA ( HWND , int ) ; 
	2863:	LONG GetWindowLongW ( HWND , int ) ; 
	2865:	LONG_PTR GetWindowLongPtrA ( HWND , int ) ; 
	2866:	LONG_PTR GetWindowLongPtrW ( HWND , int ) ; 
	2871:	HDESK GetThreadDesktop ( DWORD ) ; 
	2872:	HWND GetTopWindow ( HWND ) ; 
	2873:	BOOL GetUpdateRect ( HWND , LPRECT , BOOL ) ; 
	2874:	int GetUpdateRgn ( HWND , HRGN , BOOL ) ; 
	2875:	BOOL GetUserObjectInformationA ( HANDLE , int , PVOID , DWORD , PDWORD ) ; 
	2876:	BOOL GetUserObjectInformationW ( HANDLE , int , PVOID , DWORD , PDWORD ) ; 
	2877:	BOOL GetUserObjectSecurity ( HANDLE , PSECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , PDWORD ) ; 
	2878:	HWND GetWindow ( HWND , UINT ) ; 
	2879:	DWORD GetWindowContextHelpId ( HWND ) ; 
	2880:	HDC GetWindowDC ( HWND ) ; 
	2881:	BOOL GetWindowExtEx ( HDC , LPSIZE ) ; 
	2882:	BOOL GetWindowPlacement ( HWND , WINDOWPLACEMENT * ) ; 
	2883:	BOOL GetWindowRect ( HWND , LPRECT ) ; 
	2884:	int GetWindowRgn ( HWND , HRGN ) ; 
	2886:	int GetWindowTextA ( HWND , LPSTR , int ) ; 
	2887:	int GetWindowTextLengthA ( HWND ) ; 
	2888:	int GetWindowTextLengthW ( HWND ) ; 
	2889:	int GetWindowTextW ( HWND , LPWSTR , int ) ; 
	2890:	WORD GetWindowWord ( HWND , int ) ; 
	2891:	BOOL GetAltTabInfoA ( HWND , int , PALTTABINFO , LPSTR , UINT ) ; 
	2892:	BOOL GetAltTabInfoW ( HWND , int , PALTTABINFO , LPWSTR , UINT ) ; 
	2893:	BOOL GetComboBoxInfo ( HWND , PCOMBOBOXINFO ) ; 
	2894:	BOOL GetCursorInfo ( PCURSORINFO ) ; 
	2895:	BOOL GetLastInputInfo ( PLASTINPUTINFO ) ; 
	2896:	DWORD GetListBoxInfo ( HWND ) ; 
	2897:	BOOL GetMenuBarInfo ( HWND , LONG , LONG , PMENUBARINFO ) ; 
	2898:	BOOL GetMenuInfo ( HMENU , LPMENUINFO ) ; 
	2899:	BOOL GetScrollBarInfo ( HWND , LONG , PSCROLLBARINFO ) ; 
	2900:	BOOL GetTitleBarInfo ( HWND , PTITLEBARINFO ) ; 
	2901:	BOOL GetWindowInfo ( HWND , PWINDOWINFO ) ; 
	2902:	BOOL GetMonitorInfoA ( HMONITOR , LPMONITORINFO ) ; 
	2903:	BOOL GetMonitorInfoW ( HMONITOR , LPMONITORINFO ) ; 
	2904:	UINT GetWindowModuleFileNameA ( HWND , LPSTR , UINT ) ; 
	2905:	UINT GetWindowModuleFileNameW ( HWND , LPWSTR , UINT ) ; 
	2906:	BOOL GrayStringA ( HDC , HBRUSH , GRAYSTRINGPROC , LPARAM , int , int , int , int , int ) ; 
	2907:	BOOL GrayStringW ( HDC , HBRUSH , GRAYSTRINGPROC , LPARAM , int , int , int , int , int ) ; 
	2908:	BOOL HideCaret ( HWND ) ; 
	2909:	BOOL HiliteMenuItem ( HWND , HMENU , UINT , UINT ) ; 
	2910:	BOOL InflateRect ( LPRECT , int , int ) ; 
	2911:	BOOL InSendMessage ( void ) ; 
	2912:	BOOL InsertMenuA ( HMENU , UINT , UINT , UINT , LPCSTR ) ; 
	2913:	BOOL InsertMenuW ( HMENU , UINT , UINT , UINT , LPCWSTR ) ; 
	2914:	BOOL InsertMenuItemA ( HMENU , UINT , BOOL , LPCMENUITEMINFOA ) ; 
	2915:	BOOL InsertMenuItemW ( HMENU , UINT , BOOL , LPCMENUITEMINFOW ) ; 
	2916:	BOOL IntersectRect ( LPRECT , LPCRECT , LPCRECT ) ; 
	2917:	BOOL InvalidateRect ( HWND , LPCRECT , BOOL ) ; 
	2918:	BOOL InvalidateRgn ( HWND , HRGN , BOOL ) ; 
	2919:	BOOL InvertRect ( HDC , LPCRECT ) ; 
	2920:	BOOL IsCharAlphaA ( CHAR ch ) ; 
	2921:	BOOL IsCharAlphaNumericA ( CHAR ) ; 
	2922:	BOOL IsCharAlphaNumericW ( WCHAR ) ; 
	2923:	BOOL IsCharAlphaW ( WCHAR ) ; 
	2924:	BOOL IsCharLowerA ( CHAR ) ; 
	2925:	BOOL IsCharLowerW ( WCHAR ) ; 
	2926:	BOOL IsCharUpperA ( CHAR ) ; 
	2927:	BOOL IsCharUpperW ( WCHAR ) ; 
	2928:	BOOL IsChild ( HWND , HWND ) ; 
	2929:	BOOL IsClipboardFormatAvailable ( UINT ) ; 
	2930:	BOOL IsDialogMessageA ( HWND , LPMSG ) ; 
	2931:	BOOL IsDialogMessageW ( HWND , LPMSG ) ; 
	2932:	UINT IsDlgButtonChecked ( HWND , int ) ; 
	2933:	BOOL IsIconic ( HWND ) ; 
	2934:	BOOL IsMenu ( HMENU ) ; 
	2935:	BOOL IsRectEmpty ( LPCRECT ) ; 
	2936:	BOOL IsWindow ( HWND ) ; 
	2937:	BOOL IsWindowEnabled ( HWND ) ; 
	2938:	BOOL IsWindowUnicode ( HWND ) ; 
	2939:	BOOL IsWindowVisible ( HWND ) ; 
	2940:	BOOL IsZoomed ( HWND ) ; 
	2941:	void keybd_event ( BYTE , BYTE , DWORD , DWORD ) ; 
	2942:	BOOL KillTimer ( HWND , UINT ) ; 
	2943:	HACCEL LoadAcceleratorsA ( HINSTANCE , LPCSTR ) ; 
	2944:	HACCEL LoadAcceleratorsW ( HINSTANCE , LPCWSTR ) ; 
	2945:	HBITMAP LoadBitmapA ( HINSTANCE , LPCSTR ) ; 
	2946:	HBITMAP LoadBitmapW ( HINSTANCE , LPCWSTR ) ; 
	2947:	HCURSOR LoadCursorA ( HINSTANCE , LPCSTR ) ; 
	2948:	HCURSOR LoadCursorFromFileA ( LPCSTR ) ; 
	2949:	HCURSOR LoadCursorFromFileW ( LPCWSTR ) ; 
	2950:	HCURSOR LoadCursorW ( HINSTANCE , LPCWSTR ) ; 
	2951:	HICON LoadIconA ( HINSTANCE , LPCSTR ) ; 
	2952:	HICON LoadIconW ( HINSTANCE , LPCWSTR ) ; 
	2953:	HANDLE LoadImageA ( HINSTANCE , LPCSTR , UINT , int , int , UINT ) ; 
	2954:	HANDLE LoadImageW ( HINSTANCE , LPCWSTR , UINT , int , int , UINT ) ; 
	2955:	HKL LoadKeyboardLayoutA ( LPCSTR , UINT ) ; 
	2956:	HKL LoadKeyboardLayoutW ( LPCWSTR , UINT ) ; 
	2957:	HMENU LoadMenuA ( HINSTANCE , LPCSTR ) ; 
	2958:	HMENU LoadMenuIndirectA ( const MENUTEMPLATE * ) ; 
	2959:	HMENU LoadMenuIndirectW ( const MENUTEMPLATE * ) ; 
	2960:	HMENU LoadMenuW ( HINSTANCE , LPCWSTR ) ; 
	2961:	int LoadStringA ( HINSTANCE , UINT , LPSTR , int ) ; 
	2962:	int LoadStringW ( HINSTANCE , UINT , LPWSTR , int ) ; 
	2963:	BOOL LockWindowUpdate ( HWND ) ; 
	2964:	int LookupIconIdFromDirectory ( PBYTE , BOOL ) ; 
	2965:	int LookupIconIdFromDirectoryEx ( PBYTE , BOOL , int , int , UINT ) ; 
	2966:	BOOL MapDialogRect ( HWND , LPRECT ) ; 
	2967:	UINT MapVirtualKeyA ( UINT , UINT ) ; 
	2968:	UINT MapVirtualKeyExA ( UINT , UINT , HKL ) ; 
	2969:	UINT MapVirtualKeyExW ( UINT , UINT , HKL ) ; 
	2970:	UINT MapVirtualKeyW ( UINT , UINT ) ; 
	2971:	int MapWindowPoints ( HWND , HWND , LPPOINT , UINT ) ; 
	2972:	int MenuItemFromPoint ( HWND , HMENU , POINT ) ; 
	2973:	BOOL MessageBeep ( UINT ) ; 
	2974:	int MessageBoxA ( HWND , LPCSTR , LPCSTR , UINT ) ; 
	2975:	int MessageBoxW ( HWND , LPCWSTR , LPCWSTR , UINT ) ; 
	2976:	int MessageBoxExA ( HWND , LPCSTR , LPCSTR , UINT , WORD ) ; 
	2977:	int MessageBoxExW ( HWND , LPCWSTR , LPCWSTR , UINT , WORD ) ; 
	2978:	int MessageBoxIndirectA ( LPMSGBOXPARAMSA ) ; 
	2979:	int MessageBoxIndirectW ( LPMSGBOXPARAMSW ) ; 
	2980:	BOOL ModifyMenuA ( HMENU , UINT , UINT , UINT , LPCSTR ) ; 
	2981:	BOOL ModifyMenuW ( HMENU , UINT , UINT , UINT , LPCWSTR ) ; 
	2982:	void mouse_event ( DWORD , DWORD , DWORD , DWORD , DWORD ) ; 
	2983:	BOOL MoveWindow ( HWND , int , int , int , int , BOOL ) ; 
	2984:	DWORD MsgWaitForMultipleObjects ( DWORD , LPHANDLE , BOOL , DWORD , DWORD ) ; 
	2985:	DWORD MsgWaitForMultipleObjectsEx ( DWORD , LPHANDLE , DWORD , DWORD , DWORD ) ; 
	2986:	DWORD OemKeyScan ( WORD ) ; 
	2987:	BOOL OemToCharA ( LPCSTR , LPSTR ) ; 
	2988:	BOOL OemToCharBuffA ( LPCSTR , LPSTR , DWORD ) ; 
	2989:	BOOL OemToCharBuffW ( LPCSTR , LPWSTR , DWORD ) ; 
	2990:	BOOL OemToCharW ( LPCSTR , LPWSTR ) ; 
	2991:	BOOL OffsetRect ( LPRECT , int , int ) ; 
	2992:	BOOL OpenClipboard ( HWND ) ; 
	2993:	HDESK OpenDesktopA ( LPSTR , DWORD , BOOL , DWORD ) ; 
	2994:	HDESK OpenDesktopW ( LPWSTR , DWORD , BOOL , DWORD ) ; 
	2995:	BOOL OpenIcon ( HWND ) ; 
	2996:	HDESK OpenInputDesktop ( DWORD , BOOL , DWORD ) ; 
	2997:	HWINSTA OpenWindowStationA ( LPSTR , BOOL , DWORD ) ; 
	2998:	HWINSTA OpenWindowStationW ( LPWSTR , BOOL , DWORD ) ; 
	2999:	BOOL PaintDesktop ( HDC ) ; 
	3000:	BOOL PeekMessageA ( LPMSG , HWND , UINT , UINT , UINT ) ; 
	3001:	BOOL PeekMessageW ( LPMSG , HWND , UINT , UINT , UINT ) ; 
	3004:	BOOL PostMessageA ( HWND , UINT , WPARAM , LPARAM ) ; 
	3005:	BOOL PostMessageW ( HWND , UINT , WPARAM , LPARAM ) ; 
	3006:	void PostQuitMessage ( int ) ; 
	3007:	BOOL PostThreadMessageA ( DWORD , UINT , WPARAM , LPARAM ) ; 
	3008:	BOOL PostThreadMessageW ( DWORD , UINT , WPARAM , LPARAM ) ; 
	3009:	BOOL PtInRect ( LPCRECT , POINT ) ; 
	3010:	BOOL RedrawWindow ( HWND , LPCRECT , HRGN , UINT ) ; 
	3011:	ATOM RegisterClassA ( const WNDCLASSA * ) ; 
	3012:	ATOM RegisterClassW ( const WNDCLASSW * ) ; 
	3013:	ATOM RegisterClassExA ( const WNDCLASSEXA * ) ; 
	3014:	ATOM RegisterClassExW ( const WNDCLASSEXW * ) ; 
	3015:	UINT RegisterClipboardFormatA ( LPCSTR ) ; 
	3016:	UINT RegisterClipboardFormatW ( LPCWSTR ) ; 
	3017:	BOOL RegisterHotKey ( HWND , int , UINT , UINT ) ; 
	3018:	UINT RegisterWindowMessageA ( LPCSTR ) ; 
	3019:	UINT RegisterWindowMessageW ( LPCWSTR ) ; 
	3020:	BOOL ReleaseCapture ( void ) ; 
	3021:	int ReleaseDC ( HWND , HDC ) ; 
	3022:	BOOL RemoveMenu ( HMENU , UINT , UINT ) ; 
	3023:	HANDLE RemovePropA ( HWND , LPCSTR ) ; 
	3024:	HANDLE RemovePropW ( HWND , LPCWSTR ) ; 
	3025:	BOOL ReplyMessage ( LRESULT ) ; 
	3026:	BOOL ScreenToClient ( HWND , LPPOINT ) ; 
	3027:	BOOL ScrollDC ( HDC , int , int , LPCRECT , LPCRECT , HRGN , LPRECT ) ; 
	3028:	BOOL ScrollWindow ( HWND , int , int , LPCRECT , LPCRECT ) ; 
	3029:	int ScrollWindowEx ( HWND , int , int , LPCRECT , LPCRECT , HRGN , LPRECT , UINT ) ; 
	3030:	LONG SendDlgItemMessageA ( HWND , int , UINT , WPARAM , LPARAM ) ; 
	3031:	LONG SendDlgItemMessageW ( HWND , int , UINT , WPARAM , LPARAM ) ; 
	3032:	LRESULT SendMessageA ( HWND , UINT , WPARAM , LPARAM ) ; 
	3033:	BOOL SendMessageCallbackA ( HWND , UINT , WPARAM , LPARAM , SENDASYNCPROC , DWORD ) ; 
	3034:	BOOL SendMessageCallbackW ( HWND , UINT , WPARAM , LPARAM , SENDASYNCPROC , DWORD ) ; 
	3035:	LRESULT SendMessageTimeoutA ( HWND , UINT , WPARAM , LPARAM , UINT , UINT , PDWORD ) ; 
	3036:	LRESULT SendMessageTimeoutW ( HWND , UINT , WPARAM , LPARAM , UINT , UINT , PDWORD ) ; 
	3037:	LRESULT SendMessageW ( HWND , UINT , WPARAM , LPARAM ) ; 
	3038:	BOOL SendNotifyMessageA ( HWND , UINT , WPARAM , LPARAM ) ; 
	3039:	BOOL SendNotifyMessageW ( HWND , UINT , WPARAM , LPARAM ) ; 
	3040:	HWND SetActiveWindow ( HWND ) ; 
	3041:	HWND SetCapture ( HWND hWnd ) ; 
	3042:	BOOL SetCaretBlinkTime ( UINT ) ; 
	3043:	BOOL SetCaretPos ( int , int ) ; 
	3044:	DWORD SetClassLongA ( HWND , int , LONG ) ; 
	3045:	DWORD SetClassLongW ( HWND , int , LONG ) ; 
	3046:	WORD SetClassWord ( HWND , int , WORD ) ; 
	3047:	HANDLE SetClipboardData ( UINT , HANDLE ) ; 
	3048:	HWND SetClipboardViewer ( HWND ) ; 
	3049:	HCURSOR SetCursor ( HCURSOR ) ; 
	3050:	BOOL SetCursorPos ( int , int ) ; 
	3051:	void SetDebugErrorLevel ( DWORD ) ; 
	3052:	BOOL SetDlgItemInt ( HWND , int , UINT , BOOL ) ; 
	3053:	BOOL SetDlgItemTextA ( HWND , int , LPCSTR ) ; 
	3054:	BOOL SetDlgItemTextW ( HWND , int , LPCWSTR ) ; 
	3055:	BOOL SetDoubleClickTime ( UINT ) ; 
	3056:	HWND SetFocus ( HWND ) ; 
	3057:	BOOL SetForegroundWindow ( HWND ) ; 
	3058:	BOOL SetKeyboardState ( PBYTE ) ; 
	3059:	BOOL SetMenu ( HWND , HMENU ) ; 
	3060:	BOOL SetMenuContextHelpId ( HMENU , DWORD ) ; 
	3061:	BOOL SetMenuDefaultItem ( HMENU , UINT , UINT ) ; 
	3062:	BOOL SetMenuInfo ( HMENU , LPCMENUINFO ) ; 
	3063:	BOOL SetMenuItemBitmaps ( HMENU , UINT , UINT , HBITMAP , HBITMAP ) ; 
	3064:	BOOL SetMenuItemInfoA ( HMENU , UINT , BOOL , LPCMENUITEMINFOA ) ; 
	3065:	BOOL SetMenuItemInfoW ( HMENU , UINT , BOOL , LPCMENUITEMINFOW ) ; 
	3066:	LPARAM SetMessageExtraInfo ( LPARAM ) ; 
	3067:	BOOL SetMessageQueue ( int ) ; 
	3068:	HWND SetParent ( HWND , HWND ) ; 
	3069:	BOOL SetProcessWindowStation ( HWINSTA ) ; 
	3070:	BOOL SetPropA ( HWND , LPCSTR , HANDLE ) ; 
	3071:	BOOL SetPropW ( HWND , LPCWSTR , HANDLE ) ; 
	3072:	BOOL SetRect ( LPRECT , int , int , int , int ) ; 
	3073:	BOOL SetRectEmpty ( LPRECT ) ; 
	3074:	int SetScrollInfo ( HWND , int , LPCSCROLLINFO , BOOL ) ; 
	3075:	int SetScrollPos ( HWND , int , int , BOOL ) ; 
	3076:	BOOL SetScrollRange ( HWND , int , int , int , BOOL ) ; 
	3077:	BOOL SetSysColors ( int , const INT * , const COLORREF * ) ; 
	3079:	BOOL SetSystemCursor ( HCURSOR , DWORD ) ; 
	3080:	BOOL SetThreadDesktop ( HDESK ) ; 
	3081:	UINT SetTimer ( HWND , UINT , UINT , TIMERPROC ) ; 
	3082:	BOOL SetUserObjectInformationA ( HANDLE , int , PVOID , DWORD ) ; 
	3083:	BOOL SetUserObjectInformationW ( HANDLE , int , PVOID , DWORD ) ; 
	3084:	BOOL SetUserObjectSecurity ( HANDLE , PSECURITY_INFORMATION , PSECURITY_DESCRIPTOR ) ; 
	3085:	BOOL SetWindowContextHelpId ( HWND , DWORD ) ; 
	3086:	LONG SetWindowLongA ( HWND , int , LONG ) ; 
	3087:	LONG SetWindowLongW ( HWND , int , LONG ) ; 
	3089:	LONG_PTR SetWindowLongPtrA ( HWND , int , LONG_PTR ) ; 
	3090:	LONG_PTR SetWindowLongPtrW ( HWND , int , LONG_PTR ) ; 
	3095:	BOOL SetWindowPlacement ( HWND hWnd , const WINDOWPLACEMENT * ) ; 
	3096:	BOOL SetWindowPos ( HWND , HWND , int , int , int , int , UINT ) ; 
	3097:	int SetWindowRgn ( HWND , HRGN , BOOL ) ; 
	3098:	HOOKPROC SetWindowsHookA ( int , HOOKPROC ) ; 
	3099:	HHOOK SetWindowsHookExA ( int , HOOKPROC , HINSTANCE , DWORD ) ; 
	3100:	HHOOK SetWindowsHookExW ( int , HOOKPROC , HINSTANCE , DWORD ) ; 
	3101:	BOOL SetWindowTextA ( HWND , LPCSTR ) ; 
	3102:	BOOL SetWindowTextW ( HWND , LPCWSTR ) ; 
	3103:	WORD SetWindowWord ( HWND , int , WORD ) ; 
	3104:	BOOL ShowCaret ( HWND ) ; 
	3105:	int ShowCursor ( BOOL ) ; 
	3106:	BOOL ShowOwnedPopups ( HWND , BOOL ) ; 
	3107:	BOOL ShowScrollBar ( HWND , int , BOOL ) ; 
	3108:	BOOL ShowWindow ( HWND , int ) ; 
	3109:	BOOL ShowWindowAsync ( HWND , int ) ; 
	3110:	BOOL SubtractRect ( LPRECT , LPCRECT , LPCRECT ) ; 
	3111:	BOOL SwapMouseButton ( BOOL ) ; 
	3112:	BOOL SwitchDesktop ( HDESK ) ; 
	3113:	BOOL SystemParametersInfoA ( UINT , UINT , PVOID , UINT ) ; 
	3114:	BOOL SystemParametersInfoW ( UINT , UINT , PVOID , UINT ) ; 
	3115:	LONG TabbedTextOutA ( HDC , int , int , LPCSTR , int , int , LPINT , int ) ; 
	3116:	LONG TabbedTextOutW ( HDC , int , int , LPCWSTR , int , int , LPINT , int ) ; 
	3117:	WORD TileWindows ( HWND , UINT , LPCRECT , UINT , const HWND * ) ; 
	3118:	int ToAscii ( UINT , UINT , PBYTE , LPWORD , UINT ) ; 
	3119:	int ToAsciiEx ( UINT , UINT , PBYTE , LPWORD , UINT , HKL ) ; 
	3120:	int ToUnicode ( UINT , UINT , PBYTE , LPWSTR , int , UINT ) ; 
	3121:	int ToUnicodeEx ( UINT , UINT , PBYTE , LPWSTR , int , UINT , HKL ) ; 
	3122:	BOOL TrackMouseEvent ( LPTRACKMOUSEEVENT ) ; 
	3123:	BOOL TrackPopupMenu ( HMENU , UINT , int , int , int , HWND , LPCRECT ) ; 
	3124:	BOOL TrackPopupMenuEx ( HMENU , UINT , int , int , HWND , LPTPMPARAMS ) ; 
	3125:	int TranslateAcceleratorA ( HWND , HACCEL , LPMSG ) ; 
	3126:	int TranslateAcceleratorW ( HWND , HACCEL , LPMSG ) ; 
	3127:	BOOL TranslateMDISysAccel ( HWND , LPMSG ) ; 
	3128:	BOOL TranslateMessage ( const MSG * ) ; 
	3129:	BOOL UnhookWindowsHook ( int , HOOKPROC ) ; 
	3130:	BOOL UnhookWindowsHookEx ( HHOOK ) ; 
	3131:	BOOL UnionRect ( LPRECT , LPCRECT , LPCRECT ) ; 
	3132:	BOOL UnloadKeyboardLayout ( HKL ) ; 
	3133:	BOOL UnregisterClassA ( LPCSTR , HINSTANCE ) ; 
	3134:	BOOL UnregisterClassW ( LPCWSTR , HINSTANCE ) ; 
	3135:	BOOL UnregisterHotKey ( HWND , int ) ; 
	3136:	BOOL UpdateWindow ( HWND ) ; 
	3137:	BOOL ValidateRect ( HWND , LPCRECT ) ; 
	3138:	BOOL ValidateRgn ( HWND , HRGN ) ; 
	3139:	SHORT VkKeyScanA ( CHAR ) ; 
	3140:	SHORT VkKeyScanExA ( CHAR , HKL ) ; 
	3141:	SHORT VkKeyScanExW ( WCHAR , HKL ) ; 
	3142:	SHORT VkKeyScanW ( WCHAR ) ; 
	3143:	DWORD WaitForInputIdle ( HANDLE , DWORD ) ; 
	3144:	BOOL WaitMessage ( void ) ; 
	3145:	HWND WindowFromDC ( HDC hDC ) ; 
	3146:	HWND WindowFromPoint ( POINT ) ; 
	3147:	UINT WinExec ( LPCSTR , UINT ) ; 
	3148:	BOOL WinHelpA ( HWND , LPCSTR , UINT , DWORD ) ; 
	3149:	BOOL WinHelpW ( HWND , LPCWSTR , UINT , DWORD ) ; 
	3150:	int wsprintfA ( LPSTR , LPCSTR , ... ) ; 
	3151:	int wsprintfW ( LPWSTR , LPCWSTR , ... ) ; 
	3152:	int wvsprintfA ( LPSTR , LPCSTR , va_list arglist ) ; 
	3153:	int wvsprintfW ( LPWSTR , LPCWSTR , va_list arglist ) ; 
	3317:	typedef WNDCLASSA WNDCLASS , * LPWNDCLASS , * PWNDCLASS ; 
	3318:	typedef WNDCLASSEXA WNDCLASSEX , * LPWNDCLASSEX , * PWNDCLASSEX ; 
	3319:	typedef MENUITEMINFOA MENUITEMINFO , * LPMENUITEMINFO ; 
	3320:	typedef LPCMENUITEMINFOA LPCMENUITEMINFO ; 
	3321:	typedef MSGBOXPARAMSA MSGBOXPARAMS , * PMSGBOXPARAMS , * LPMSGBOXPARAMS ; 
	3322:	typedef HIGHCONTRASTA HIGHCONTRAST , * LPHIGHCONTRAST ; 
	3323:	typedef ICONMETRICSA ICONMETRICS , * LPICONMETRICS ; 
	3324:	typedef NONCLIENTMETRICSA NONCLIENTMETRICS , * LPNONCLIENTMETRICS ; 
	3325:	typedef SERIALKEYSA SERIALKEYS , * LPSERIALKEYS ; 
	3326:	typedef SOUNDSENTRYA SOUNDSENTRY , * LPSOUNDSENTRY ; 
	3327:	typedef CREATESTRUCTA CREATESTRUCT , * LPCREATESTRUCT ; 
	3328:	typedef CBT_CREATEWNDA CBT_CREATEWND , * LPCBT_CREATEWND ; 
	3329:	typedef MDICREATESTRUCTA MDICREATESTRUCT , * LPMDICREATESTRUCT ; 
	3330:	typedef MULTIKEYHELPA MULTIKEYHELP , * PMULTIKEYHELP , * LPMULTIKEYHELP ; 
	419:	typedef DWORD LCTYPE ; 
	420:	typedef DWORD CALTYPE ; 
	421:	typedef DWORD CALID ; 
	422:	typedef DWORD LGRPID ; 
	423:	typedef BOOL ( * CALINFO_ENUMPROCA ) ( LPSTR ) ; 
	424:	typedef BOOL ( * CALINFO_ENUMPROCW ) ( LPWSTR ) ; 
	425:	typedef BOOL ( * CALINFO_ENUMPROCEXA ) ( LPSTR , CALID ) ; 
	426:	typedef BOOL ( * CALINFO_ENUMPROCEXW ) ( LPWSTR , CALID ) ; 
	427:	typedef BOOL ( * LANGUAGEGROUP_ENUMPROCA ) ( LGRPID , LPSTR , LPSTR , DWORD , LONG_PTR ) ; 
	428:	typedef BOOL ( * LANGUAGEGROUP_ENUMPROCW ) ( LGRPID , LPWSTR , LPWSTR , DWORD , LONG_PTR ) ; 
	429:	typedef BOOL ( * LANGGROUPLOCALE_ENUMPROCA ) ( LGRPID , LCID , LPSTR , LONG_PTR ) ; 
	430:	typedef BOOL ( * LANGGROUPLOCALE_ENUMPROCW ) ( LGRPID , LCID , LPWSTR , LONG_PTR ) ; 
	431:	typedef BOOL ( * UILANGUAGE_ENUMPROCW ) ( LPWSTR , LONG_PTR ) ; 
	432:	typedef BOOL ( * UILANGUAGE_ENUMPROCA ) ( LPSTR , LONG_PTR ) ; 
	433:	typedef BOOL ( * LOCALE_ENUMPROCA ) ( LPSTR ) ; 
	434:	typedef BOOL ( * LOCALE_ENUMPROCW ) ( LPWSTR ) ; 
	435:	typedef BOOL ( * CODEPAGE_ENUMPROCA ) ( LPSTR ) ; 
	436:	typedef BOOL ( * CODEPAGE_ENUMPROCW ) ( LPWSTR ) ; 
	437:	typedef BOOL ( * DATEFMT_ENUMPROCA ) ( LPSTR ) ; 
	438:	typedef BOOL ( * DATEFMT_ENUMPROCW ) ( LPWSTR ) ; 
	439:	typedef BOOL ( * DATEFMT_ENUMPROCEXA ) ( LPSTR , CALID ) ; 
	440:	typedef BOOL ( * DATEFMT_ENUMPROCEXW ) ( LPWSTR , CALID ) ; 
	441:	typedef BOOL ( * TIMEFMT_ENUMPROCA ) ( LPSTR ) ; 
	442:	typedef BOOL ( * TIMEFMT_ENUMPROCW ) ( LPWSTR ) ; 
	444:	typedef struct _cpinfo { 
	445:	UINT MaxCharSize ; 
	446:	BYTE DefaultChar [ 2 ] ; 
	447:	BYTE LeadByte [ 12 ] ; 
	448:	} CPINFO , * LPCPINFO ; 
	449:	typedef struct _cpinfoexA { 
	450:	UINT MaxCharSize ; 
	451:	BYTE DefaultChar [ 2 ] ; 
	452:	BYTE LeadByte [ 12 ] ; 
	453:	WCHAR UnicodeDefaultChar ; 
	454:	UINT CodePage ; 
	455:	CHAR CodePageName [ 260 ] ; 
	456:	} CPINFOEXA , * LPCPINFOEXA ; 
	457:	typedef struct _cpinfoexW { 
	458:	UINT MaxCharSize ; 
	459:	BYTE DefaultChar [ 2 ] ; 
	460:	BYTE LeadByte [ 12 ] ; 
	461:	WCHAR UnicodeDefaultChar ; 
	462:	UINT CodePage ; 
	463:	WCHAR CodePageName [ 260 ] ; 
	464:	} CPINFOEXW , * LPCPINFOEXW ; 
	465:	typedef struct _currencyfmtA { 
	466:	UINT NumDigits ; 
	467:	UINT LeadingZero ; 
	468:	UINT Grouping ; 
	469:	LPSTR lpDecimalSep ; 
	470:	LPSTR lpThousandSep ; 
	471:	UINT NegativeOrder ; 
	472:	UINT PositiveOrder ; 
	473:	LPSTR lpCurrencySymbol ; 
	474:	} CURRENCYFMTA , * LPCURRENCYFMTA ; 
	475:	typedef struct _currencyfmtW { 
	476:	UINT NumDigits ; 
	477:	UINT LeadingZero ; 
	478:	UINT Grouping ; 
	479:	LPWSTR lpDecimalSep ; 
	480:	LPWSTR lpThousandSep ; 
	481:	UINT NegativeOrder ; 
	482:	UINT PositiveOrder ; 
	483:	LPWSTR lpCurrencySymbol ; 
	484:	} CURRENCYFMTW , * LPCURRENCYFMTW ; 
	485:	typedef struct _numberfmtA { 
	486:	UINT NumDigits ; 
	487:	UINT LeadingZero ; 
	488:	UINT Grouping ; 
	489:	LPSTR lpDecimalSep ; 
	490:	LPSTR lpThousandSep ; 
	491:	UINT NegativeOrder ; 
	492:	} NUMBERFMTA , * LPNUMBERFMTA ; 
	493:	typedef struct _numberfmtW { 
	494:	UINT NumDigits ; 
	495:	UINT LeadingZero ; 
	496:	UINT Grouping ; 
	497:	LPWSTR lpDecimalSep ; 
	498:	LPWSTR lpThousandSep ; 
	499:	UINT NegativeOrder ; 
	500:	} NUMBERFMTW , * LPNUMBERFMTW ; 
	502:	int CompareStringA ( LCID , DWORD , LPCSTR , int , LPCSTR , int ) ; 
	503:	int CompareStringW ( LCID , DWORD , LPCWSTR , int , LPCWSTR , int ) ; 
	504:	LCID ConvertDefaultLocale ( LCID ) ; 
	505:	BOOL EnumCalendarInfoA ( CALINFO_ENUMPROCA , LCID , CALID , CALTYPE ) ; 
	506:	BOOL EnumCalendarInfoW ( CALINFO_ENUMPROCW , LCID , CALID , CALTYPE ) ; 
	507:	BOOL EnumDateFormatsA ( DATEFMT_ENUMPROCA , LCID , DWORD ) ; 
	508:	BOOL EnumDateFormatsW ( DATEFMT_ENUMPROCW , LCID , DWORD ) ; 
	509:	BOOL EnumSystemCodePagesA ( CODEPAGE_ENUMPROCA , DWORD ) ; 
	510:	BOOL EnumSystemCodePagesW ( CODEPAGE_ENUMPROCW , DWORD ) ; 
	511:	BOOL EnumSystemLocalesA ( LOCALE_ENUMPROCA , DWORD ) ; 
	512:	BOOL EnumSystemLocalesW ( LOCALE_ENUMPROCW , DWORD ) ; 
	513:	BOOL EnumTimeFormatsA ( TIMEFMT_ENUMPROCA , LCID , DWORD ) ; 
	514:	BOOL EnumTimeFormatsW ( TIMEFMT_ENUMPROCW , LCID , DWORD ) ; 
	515:	int FoldStringA ( DWORD , LPCSTR , int , LPSTR , int ) ; 
	516:	int FoldStringW ( DWORD , LPCWSTR , int , LPWSTR , int ) ; 
	517:	UINT GetACP ( void ) ; 
	518:	BOOL GetCPInfo ( UINT , LPCPINFO ) ; 
	519:	BOOL GetCPInfoExA ( UINT , DWORD , LPCPINFOEXA ) ; 
	520:	BOOL GetCPInfoExW ( UINT , DWORD , LPCPINFOEXW ) ; 
	521:	int GetCurrencyFormatA ( LCID , DWORD , LPCSTR , const CURRENCYFMTA * , LPSTR , int ) ; 
	522:	int GetCurrencyFormatW ( LCID , DWORD , LPCWSTR , const CURRENCYFMTW * , LPWSTR , int ) ; 
	523:	int GetDateFormatA ( LCID , DWORD , const SYSTEMTIME * , LPCSTR , LPSTR , int ) ; 
	524:	int GetDateFormatW ( LCID , DWORD , const SYSTEMTIME * , LPCWSTR , LPWSTR , int ) ; 
	525:	int GetLocaleInfoA ( LCID , LCTYPE , LPSTR , int ) ; 
	526:	int GetLocaleInfoW ( LCID , LCTYPE , LPWSTR , int ) ; 
	527:	int GetNumberFormatA ( LCID , DWORD , LPCSTR , const NUMBERFMTA * , LPSTR , int ) ; 
	528:	int GetNumberFormatW ( LCID , DWORD , LPCWSTR , const NUMBERFMTW * , LPWSTR , int ) ; 
	529:	UINT GetOEMCP ( void ) ; 
	530:	BOOL GetStringTypeA ( LCID , DWORD , LPCSTR , int , LPWORD ) ; 
	531:	BOOL GetStringTypeW ( DWORD , LPCWSTR , int , LPWORD ) ; 
	532:	BOOL GetStringTypeExA ( LCID , DWORD , LPCSTR , int , LPWORD ) ; 
	533:	BOOL GetStringTypeExW ( LCID , DWORD , LPCWSTR , int , LPWORD ) ; 
	534:	LANGID GetSystemDefaultLangID ( void ) ; 
	535:	LCID GetSystemDefaultLCID ( void ) ; 
	536:	LCID GetThreadLocale ( void ) ; 
	537:	int GetTimeFormatA ( LCID , DWORD , const SYSTEMTIME * , LPCSTR , LPSTR , int ) ; 
	538:	int GetTimeFormatW ( LCID , DWORD , const SYSTEMTIME * , LPCWSTR , LPWSTR , int ) ; 
	539:	LANGID GetUserDefaultLangID ( void ) ; 
	540:	LCID GetUserDefaultLCID ( void ) ; 
	541:	BOOL IsDBCSLeadByte ( BYTE ) ; 
	542:	BOOL IsDBCSLeadByteEx ( UINT , BYTE ) ; 
	543:	BOOL IsValidCodePage ( UINT ) ; 
	544:	BOOL IsValidLocale ( LCID , DWORD ) ; 
	545:	int LCMapStringA ( LCID , DWORD , LPCSTR , int , LPSTR , int ) ; 
	546:	int LCMapStringW ( LCID , DWORD , LPCWSTR , int , LPWSTR , int ) ; 
	547:	int MultiByteToWideChar ( UINT , DWORD , LPCSTR , int , LPWSTR , int ) ; 
	548:	BOOL SetLocaleInfoA ( LCID , LCTYPE , LPCSTR ) ; 
	549:	BOOL SetLocaleInfoW ( LCID , LCTYPE , LPCWSTR ) ; 
	550:	BOOL SetThreadLocale ( LCID ) ; 
	551:	int WideCharToMultiByte ( UINT , DWORD , LPCWSTR , int , LPSTR , int , LPCSTR , LPBOOL ) ; 
	618:	typedef CPINFOEXA CPINFOEX ; 
	619:	typedef LPCPINFOEXA LPCPINFOEX ; 
	620:	typedef CURRENCYFMTA CURRENCYFMT ; 
	621:	typedef LPCURRENCYFMTA LPCURRENCYFMT ; 
	622:	typedef NUMBERFMTA NUMBERFMT ; 
	623:	typedef LPNUMBERFMTA LPNUMBERFMT ; 
	85:	typedef struct tagVS_FIXEDFILEINFO { 
	86:	DWORD dwSignature ; 
	87:	DWORD dwStrucVersion ; 
	88:	DWORD dwFileVersionMS ; 
	89:	DWORD dwFileVersionLS ; 
	90:	DWORD dwProductVersionMS ; 
	91:	DWORD dwProductVersionLS ; 
	92:	DWORD dwFileFlagsMask ; 
	93:	DWORD dwFileFlags ; 
	94:	DWORD dwFileOS ; 
	95:	DWORD dwFileType ; 
	96:	DWORD dwFileSubtype ; 
	97:	DWORD dwFileDateMS ; 
	98:	DWORD dwFileDateLS ; 
	99:	} VS_FIXEDFILEINFO ; 
	100:	DWORD VerFindFileA ( DWORD , LPSTR , LPSTR , LPSTR , LPSTR , PUINT , LPSTR , PUINT ) ; 
	101:	DWORD VerFindFileW ( DWORD , LPWSTR , LPWSTR , LPWSTR , LPWSTR , PUINT , LPWSTR , PUINT ) ; 
	102:	DWORD VerInstallFileA ( DWORD , LPSTR , LPSTR , LPSTR , LPSTR , LPSTR , LPSTR , PUINT ) ; 
	103:	DWORD VerInstallFileW ( DWORD , LPWSTR , LPWSTR , LPWSTR , LPWSTR , LPWSTR , LPWSTR , PUINT ) ; 
	104:	DWORD GetFileVersionInfoSizeA ( LPSTR , PDWORD ) ; 
	105:	DWORD GetFileVersionInfoSizeW ( LPWSTR , PDWORD ) ; 
	106:	BOOL GetFileVersionInfoA ( LPSTR , DWORD , DWORD , PVOID ) ; 
	107:	BOOL GetFileVersionInfoW ( LPWSTR , DWORD , DWORD , PVOID ) ; 
	108:	DWORD VerLanguageNameA ( DWORD , LPSTR , DWORD ) ; 
	109:	DWORD VerLanguageNameW ( DWORD , LPWSTR , DWORD ) ; 
	110:	BOOL VerQueryValueA ( PCVOID , LPSTR , PVOID * , PUINT ) ; 
	111:	BOOL VerQueryValueW ( PCVOID , LPWSTR , PVOID * , PUINT ) ; 
	160:	typedef struct _NETRESOURCEA { 
	161:	DWORD dwScope ; 
	162:	DWORD dwType ; 
	163:	DWORD dwDisplayType ; 
	164:	DWORD dwUsage ; 
	165:	LPSTR lpLocalName ; 
	166:	LPSTR lpRemoteName ; 
	167:	LPSTR lpComment ; 
	168:	LPSTR lpProvider ; 
	169:	} NETRESOURCEA , * LPNETRESOURCEA ; 
	170:	typedef struct _NETRESOURCEW { 
	171:	DWORD dwScope ; 
	172:	DWORD dwType ; 
	173:	DWORD dwDisplayType ; 
	174:	DWORD dwUsage ; 
	175:	LPWSTR lpLocalName ; 
	176:	LPWSTR lpRemoteName ; 
	177:	LPWSTR lpComment ; 
	178:	LPWSTR lpProvider ; 
	179:	} NETRESOURCEW , * LPNETRESOURCEW ; 
	180:	typedef struct _CONNECTDLGSTRUCTA { 
	181:	DWORD cbStructure ; 
	182:	HWND hwndOwner ; 
	183:	LPNETRESOURCEA lpConnRes ; 
	184:	DWORD dwFlags ; 
	185:	DWORD dwDevNum ; 
	186:	} CONNECTDLGSTRUCTA , * LPCONNECTDLGSTRUCTA ; 
	187:	typedef struct _CONNECTDLGSTRUCTW { 
	188:	DWORD cbStructure ; 
	189:	HWND hwndOwner ; 
	190:	LPNETRESOURCEW lpConnRes ; 
	191:	DWORD dwFlags ; 
	192:	DWORD dwDevNum ; 
	193:	} CONNECTDLGSTRUCTW , * LPCONNECTDLGSTRUCTW ; 
	194:	typedef struct _DISCDLGSTRUCTA { 
	195:	DWORD cbStructure ; 
	196:	HWND hwndOwner ; 
	197:	LPSTR lpLocalName ; 
	198:	LPSTR lpRemoteName ; 
	199:	DWORD dwFlags ; 
	200:	} DISCDLGSTRUCTA , * LPDISCDLGSTRUCTA ; 
	201:	typedef struct _DISCDLGSTRUCTW { 
	202:	DWORD cbStructure ; 
	203:	HWND hwndOwner ; 
	204:	LPWSTR lpLocalName ; 
	205:	LPWSTR lpRemoteName ; 
	206:	DWORD dwFlags ; 
	207:	} DISCDLGSTRUCTW , * LPDISCDLGSTRUCTW ; 
	208:	typedef struct _UNIVERSAL_NAME_INFOA { LPSTR lpUniversalName ; } UNIVERSAL_NAME_INFOA , * LPUNIVERSAL_NAME_INFOA ; 
	209:	typedef struct _UNIVERSAL_NAME_INFOW { LPWSTR lpUniversalName ; } UNIVERSAL_NAME_INFOW , * LPUNIVERSAL_NAME_INFOW ; 
	210:	typedef struct _REMOTE_NAME_INFOA { 
	211:	LPSTR lpUniversalName ; 
	212:	LPSTR lpConnectionName ; 
	213:	LPSTR lpRemainingPath ; 
	214:	} REMOTE_NAME_INFOA , * LPREMOTE_NAME_INFOA ; 
	215:	typedef struct _REMOTE_NAME_INFOW { 
	216:	LPWSTR lpUniversalName ; 
	217:	LPWSTR lpConnectionName ; 
	218:	LPWSTR lpRemainingPath ; 
	219:	} REMOTE_NAME_INFOW , * LPREMOTE_NAME_INFOW ; 
	220:	typedef struct _NETINFOSTRUCT { 
	221:	DWORD cbStructure ; 
	222:	DWORD dwProviderVersion ; 
	223:	DWORD dwStatus ; 
	224:	DWORD dwCharacteristics ; 
	225:	DWORD dwHandle ; 
	226:	WORD wNetType ; 
	227:	DWORD dwPrinters ; 
	228:	DWORD dwDrives ; 
	229:	} NETINFOSTRUCT , * LPNETINFOSTRUCT ; 
	230:	typedef UINT ( * PFNGETPROFILEPATHA ) ( LPCSTR , LPSTR , UINT ) ; 
	231:	typedef UINT ( * PFNGETPROFILEPATHW ) ( LPCWSTR , LPWSTR , UINT ) ; 
	232:	typedef UINT ( * PFNRECONCILEPROFILEA ) ( LPCSTR , LPCSTR , DWORD ) ; 
	233:	typedef UINT ( * PFNRECONCILEPROFILEW ) ( LPCWSTR , LPCWSTR , DWORD ) ; 
	234:	typedef BOOL ( * PFNPROCESSPOLICIESA ) ( HWND , LPCSTR , LPCSTR , LPCSTR , DWORD ) ; 
	235:	typedef BOOL ( * PFNPROCESSPOLICIESW ) ( HWND , LPCWSTR , LPCWSTR , LPCWSTR , DWORD ) ; 
	236:	typedef struct _NETCONNECTINFOSTRUCT { 
	237:	DWORD cbStructure ; 
	238:	DWORD dwFlags ; 
	239:	DWORD dwSpeed ; 
	240:	DWORD dwDelay ; 
	241:	DWORD dwOptDataSize ; 
	242:	} NETCONNECTINFOSTRUCT , * LPNETCONNECTINFOSTRUCT ; 
	244:	DWORD WNetAddConnectionA ( LPCSTR , LPCSTR , LPCSTR ) ; 
	245:	DWORD WNetAddConnectionW ( LPCWSTR , LPCWSTR , LPCWSTR ) ; 
	246:	DWORD WNetAddConnection2A ( LPNETRESOURCEA , LPCSTR , LPCSTR , DWORD ) ; 
	247:	DWORD WNetAddConnection2W ( LPNETRESOURCEW , LPCWSTR , LPCWSTR , DWORD ) ; 
	248:	DWORD WNetAddConnection3A ( HWND , LPNETRESOURCEA , LPCSTR , LPCSTR , DWORD ) ; 
	249:	DWORD WNetAddConnection3W ( HWND , LPNETRESOURCEW , LPCWSTR , LPCWSTR , DWORD ) ; 
	250:	DWORD WNetCancelConnectionA ( LPCSTR , BOOL ) ; 
	251:	DWORD WNetCancelConnectionW ( LPCWSTR , BOOL ) ; 
	252:	DWORD WNetCancelConnection2A ( LPCSTR , DWORD , BOOL ) ; 
	253:	DWORD WNetCancelConnection2W ( LPCWSTR , DWORD , BOOL ) ; 
	254:	DWORD WNetGetConnectionA ( LPCSTR , LPSTR , PDWORD ) ; 
	255:	DWORD WNetGetConnectionW ( LPCWSTR , LPWSTR , PDWORD ) ; 
	256:	DWORD WNetUseConnectionA ( HWND , LPNETRESOURCEA , LPCSTR , LPCSTR , DWORD , LPSTR , PDWORD , PDWORD ) ; 
	257:	DWORD WNetUseConnectionW ( HWND , LPNETRESOURCEW , LPCWSTR , LPCWSTR , DWORD , LPWSTR , PDWORD , PDWORD ) ; 
	258:	DWORD WNetSetConnectionA ( LPCSTR , DWORD , PVOID ) ; 
	259:	DWORD WNetSetConnectionW ( LPCWSTR , DWORD , PVOID ) ; 
	260:	DWORD WNetConnectionDialog ( HWND , DWORD ) ; 
	261:	DWORD WNetDisconnectDialog ( HWND , DWORD ) ; 
	262:	DWORD WNetConnectionDialog1A ( LPCONNECTDLGSTRUCTA ) ; 
	263:	DWORD WNetConnectionDialog1W ( LPCONNECTDLGSTRUCTW ) ; 
	264:	DWORD WNetDisconnectDialog1A ( LPDISCDLGSTRUCTA ) ; 
	265:	DWORD WNetDisconnectDialog1W ( LPDISCDLGSTRUCTW ) ; 
	266:	DWORD WNetOpenEnumA ( DWORD , DWORD , DWORD , LPNETRESOURCEA , LPHANDLE ) ; 
	267:	DWORD WNetOpenEnumW ( DWORD , DWORD , DWORD , LPNETRESOURCEW , LPHANDLE ) ; 
	268:	DWORD WNetEnumResourceA ( HANDLE , PDWORD , PVOID , PDWORD ) ; 
	269:	DWORD WNetEnumResourceW ( HANDLE , PDWORD , PVOID , PDWORD ) ; 
	270:	DWORD WNetCloseEnum ( HANDLE ) ; 
	271:	DWORD WNetGetUniversalNameA ( LPCSTR , DWORD , PVOID , PDWORD ) ; 
	272:	DWORD WNetGetUniversalNameW ( LPCWSTR , DWORD , PVOID , PDWORD ) ; 
	273:	DWORD WNetGetUserA ( LPCSTR , LPSTR , PDWORD ) ; 
	274:	DWORD WNetGetUserW ( LPCWSTR , LPWSTR , PDWORD ) ; 
	275:	DWORD WNetGetProviderNameA ( DWORD , LPSTR , PDWORD ) ; 
	276:	DWORD WNetGetProviderNameW ( DWORD , LPWSTR , PDWORD ) ; 
	277:	DWORD WNetGetNetworkInformationA ( LPCSTR , LPNETINFOSTRUCT ) ; 
	278:	DWORD WNetGetNetworkInformationW ( LPCWSTR , LPNETINFOSTRUCT ) ; 
	279:	DWORD WNetGetResourceInformationA ( LPNETRESOURCEA , LPVOID , LPDWORD , LPCSTR * ) ; 
	280:	DWORD WNetGetResourceInformationW ( LPNETRESOURCEA , LPVOID , LPDWORD , LPCWSTR * ) ; 
	281:	DWORD WNetGetLastErrorA ( PDWORD , LPSTR , DWORD , LPSTR , DWORD ) ; 
	282:	DWORD WNetGetLastErrorW ( PDWORD , LPWSTR , DWORD , LPWSTR , DWORD ) ; 
	283:	DWORD MultinetGetConnectionPerformanceA ( LPNETRESOURCEA , LPNETCONNECTINFOSTRUCT ) ; 
	284:	DWORD MultinetGetConnectionPerformanceW ( LPNETRESOURCEW , LPNETCONNECTINFOSTRUCT ) ; 
	317:	typedef NETRESOURCEA NETRESOURCE , * LPNETRESOURCE ; 
	318:	typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT , * LPCONNECTDLGSTRUCT ; 
	319:	typedef DISCDLGSTRUCTA DISCDLGSTRUCT , * LPDISCDLGSTRUCT ; 
	320:	typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO , * LPUNIVERSAL_NAME_INFO ; 
	321:	typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO , * LPREMOTE_NAME_INFO ; 
	39:	typedef ACCESS_MASK REGSAM ; 
	40:	typedef struct value_entA { 
	41:	LPSTR ve_valuename ; 
	42:	DWORD ve_valuelen ; 
	43:	DWORD ve_valueptr ; 
	44:	DWORD ve_type ; 
	45:	} VALENTA , * PVALENTA ; 
	46:	typedef struct value_entW { 
	47:	LPWSTR ve_valuename ; 
	48:	DWORD ve_valuelen ; 
	49:	DWORD ve_valueptr ; 
	50:	DWORD ve_type ; 
	51:	} VALENTW , * PVALENTW ; 
	52:	BOOL AbortSystemShutdownA ( LPCSTR ) ; 
	53:	BOOL AbortSystemShutdownW ( LPCWSTR ) ; 
	54:	BOOL InitiateSystemShutdownA ( LPSTR , LPSTR , DWORD , BOOL , BOOL ) ; 
	55:	BOOL InitiateSystemShutdownW ( LPWSTR , LPWSTR , DWORD , BOOL , BOOL ) ; 
	56:	LONG RegCloseKey ( HKEY ) ; 
	57:	LONG RegConnectRegistryA ( LPSTR , HKEY , PHKEY ) ; 
	58:	LONG RegConnectRegistryW ( LPWSTR , HKEY , PHKEY ) ; 
	59:	LONG RegCreateKeyA ( HKEY , LPCSTR , PHKEY ) ; 
	60:	LONG RegCreateKeyExA ( HKEY , LPCSTR , DWORD , LPSTR , DWORD , REGSAM , LPSECURITY_ATTRIBUTES , PHKEY , PDWORD ) ; 
	61:	LONG RegCreateKeyExW ( HKEY , LPCWSTR , DWORD , LPWSTR , DWORD , REGSAM , LPSECURITY_ATTRIBUTES , PHKEY , PDWORD ) ; 
	62:	LONG RegCreateKeyW ( HKEY , LPCWSTR , PHKEY ) ; 
	63:	LONG RegDeleteKeyA ( HKEY , LPCSTR ) ; 
	64:	LONG RegDeleteKeyW ( HKEY , LPCWSTR ) ; 
	65:	LONG RegDeleteValueA ( HKEY , LPCSTR ) ; 
	66:	LONG RegDeleteValueW ( HKEY , LPCWSTR ) ; 
	67:	LONG RegEnumKeyA ( HKEY , DWORD , LPSTR , DWORD ) ; 
	68:	LONG RegEnumKeyW ( HKEY , DWORD , LPWSTR , DWORD ) ; 
	69:	LONG RegEnumKeyExA ( HKEY , DWORD , LPSTR , PDWORD , PDWORD , LPSTR , PDWORD , PFILETIME ) ; 
	70:	LONG RegEnumKeyExW ( HKEY , DWORD , LPWSTR , PDWORD , PDWORD , LPWSTR , PDWORD , PFILETIME ) ; 
	71:	LONG RegEnumValueA ( HKEY , DWORD , LPSTR , PDWORD , PDWORD , PDWORD , LPBYTE , PDWORD ) ; 
	72:	LONG RegEnumValueW ( HKEY , DWORD , LPWSTR , PDWORD , PDWORD , PDWORD , LPBYTE , PDWORD ) ; 
	73:	LONG RegFlushKey ( HKEY ) ; 
	74:	LONG RegGetKeySecurity ( HKEY , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , PDWORD ) ; 
	75:	LONG RegLoadKeyA ( HKEY , LPCSTR , LPCSTR ) ; 
	76:	LONG RegLoadKeyW ( HKEY , LPCWSTR , LPCWSTR ) ; 
	77:	LONG RegNotifyChangeKeyValue ( HKEY , BOOL , DWORD , HANDLE , BOOL ) ; 
	78:	LONG RegOpenKeyA ( HKEY , LPCSTR , PHKEY ) ; 
	79:	LONG RegOpenKeyExA ( HKEY , LPCSTR , DWORD , REGSAM , PHKEY ) ; 
	80:	LONG RegOpenKeyExW ( HKEY , LPCWSTR , DWORD , REGSAM , PHKEY ) ; 
	81:	LONG RegOpenKeyW ( HKEY , LPCWSTR , PHKEY ) ; 
	82:	LONG RegQueryInfoKeyA ( HKEY , LPSTR , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PFILETIME ) ; 
	83:	LONG RegQueryInfoKeyW ( HKEY , LPWSTR , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PDWORD , PFILETIME ) ; 
	84:	LONG RegQueryMultipleValuesA ( HKEY , PVALENTA , DWORD , LPSTR , PDWORD ) ; 
	85:	LONG RegQueryMultipleValuesW ( HKEY , PVALENTW , DWORD , LPWSTR , PDWORD ) ; 
	86:	LONG RegQueryValueA ( HKEY , LPCSTR , LPSTR , PLONG ) ; 
	87:	LONG RegQueryValueExA ( HKEY , LPCSTR , PDWORD , PDWORD , LPBYTE , PDWORD ) ; 
	88:	LONG RegQueryValueExW ( HKEY , LPCWSTR , PDWORD , PDWORD , LPBYTE , PDWORD ) ; 
	89:	LONG RegQueryValueW ( HKEY , LPCWSTR , LPWSTR , PLONG ) ; 
	90:	LONG RegReplaceKeyA ( HKEY , LPCSTR , LPCSTR , LPCSTR ) ; 
	91:	LONG RegReplaceKeyW ( HKEY , LPCWSTR , LPCWSTR , LPCWSTR ) ; 
	92:	LONG RegRestoreKeyA ( HKEY , LPCSTR , DWORD ) ; 
	93:	LONG RegRestoreKeyW ( HKEY , LPCWSTR , DWORD ) ; 
	94:	LONG RegSaveKeyA ( HKEY , LPCSTR , LPSECURITY_ATTRIBUTES ) ; 
	95:	LONG RegSaveKeyW ( HKEY , LPCWSTR , LPSECURITY_ATTRIBUTES ) ; 
	96:	LONG RegSetKeySecurity ( HKEY , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ) ; 
	97:	LONG RegSetValueA ( HKEY , LPCSTR , DWORD , LPCSTR , DWORD ) ; 
	98:	LONG RegSetValueExA ( HKEY , LPCSTR , DWORD , DWORD , const BYTE * , DWORD ) ; 
	99:	LONG RegSetValueExW ( HKEY , LPCWSTR , DWORD , DWORD , const BYTE * , DWORD ) ; 
	100:	LONG RegSetValueW ( HKEY , LPCWSTR , DWORD , LPCWSTR , DWORD ) ; 
	101:	LONG RegUnLoadKeyA ( HKEY , LPCSTR ) ; 
	102:	LONG RegUnLoadKeyW ( HKEY , LPCWSTR ) ; 
	130:	typedef VALENTA VALENT , * PVALENT ; 
	70:	typedef struct _SERVICE_STATUS { 
	71:	DWORD dwServiceType ; 
	72:	DWORD dwCurrentState ; 
	73:	DWORD dwControlsAccepted ; 
	74:	DWORD dwWin32ExitCode ; 
	75:	DWORD dwServiceSpecificExitCode ; 
	76:	DWORD dwCheckPoint ; 
	77:	DWORD dwWaitHint ; 
	78:	} SERVICE_STATUS , * LPSERVICE_STATUS ; 
	79:	typedef struct _SERVICE_STATUS_PROCESS { 
	80:	DWORD dwServiceType ; 
	81:	DWORD dwCurrentState ; 
	82:	DWORD dwControlsAccepted ; 
	83:	DWORD dwWin32ExitCode ; 
	84:	DWORD dwServiceSpecificExitCode ; 
	85:	DWORD dwCheckPoint ; 
	86:	DWORD dwWaitHint ; 
	87:	DWORD dwProcessId ; 
	88:	DWORD dwServiceFlags ; 
	89:	} SERVICE_STATUS_PROCESS , * LPSERVICE_STATUS_PROCESS ; 
	90:	typedef enum _SC_STATUS_TYPE { 
	91:	SC_STATUS_PROCESS_INFO = 0 
	92:	} SC_STATUS_TYPE ; 
	93:	typedef enum _SC_ENUM_TYPE { 
	94:	SC_ENUM_PROCESS_INFO = 0 
	95:	} SC_ENUM_TYPE ; 
	96:	typedef struct _ENUM_SERVICE_STATUSA { 
	97:	LPSTR lpServiceName ; 
	98:	LPSTR lpDisplayName ; 
	99:	SERVICE_STATUS ServiceStatus ; 
	100:	} ENUM_SERVICE_STATUSA , * LPENUM_SERVICE_STATUSA ; 
	101:	typedef struct _ENUM_SERVICE_STATUSW { 
	102:	LPWSTR lpServiceName ; 
	103:	LPWSTR lpDisplayName ; 
	104:	SERVICE_STATUS ServiceStatus ; 
	105:	} ENUM_SERVICE_STATUSW , * LPENUM_SERVICE_STATUSW ; 
	106:	typedef struct _ENUM_SERVICE_STATUS_PROCESSA { 
	107:	LPSTR lpServiceName ; 
	108:	LPSTR lpDisplayName ; 
	109:	SERVICE_STATUS_PROCESS ServiceStatusProcess ; 
	110:	} ENUM_SERVICE_STATUS_PROCESSA , * LPENUM_SERVICE_STATUS_PROCESSA ; 
	111:	typedef struct _ENUM_SERVICE_STATUS_PROCESSW { 
	112:	LPWSTR lpServiceName ; 
	113:	LPWSTR lpDisplayName ; 
	114:	SERVICE_STATUS_PROCESS ServiceStatusProcess ; 
	115:	} ENUM_SERVICE_STATUS_PROCESSW , * LPENUM_SERVICE_STATUS_PROCESSW ; 
	116:	typedef struct _QUERY_SERVICE_CONFIGA { 
	117:	DWORD dwServiceType ; 
	118:	DWORD dwStartType ; 
	119:	DWORD dwErrorControl ; 
	120:	LPSTR lpBinaryPathName ; 
	121:	LPSTR lpLoadOrderGroup ; 
	122:	DWORD dwTagId ; 
	123:	LPSTR lpDependencies ; 
	124:	LPSTR lpServiceStartName ; 
	125:	LPSTR lpDisplayName ; 
	126:	} QUERY_SERVICE_CONFIGA , * LPQUERY_SERVICE_CONFIGA ; 
	127:	typedef struct _QUERY_SERVICE_CONFIGW { 
	128:	DWORD dwServiceType ; 
	129:	DWORD dwStartType ; 
	130:	DWORD dwErrorControl ; 
	131:	LPWSTR lpBinaryPathName ; 
	132:	LPWSTR lpLoadOrderGroup ; 
	133:	DWORD dwTagId ; 
	134:	LPWSTR lpDependencies ; 
	135:	LPWSTR lpServiceStartName ; 
	136:	LPWSTR lpDisplayName ; 
	137:	} QUERY_SERVICE_CONFIGW , * LPQUERY_SERVICE_CONFIGW ; 
	138:	typedef struct _QUERY_SERVICE_LOCK_STATUSA { 
	139:	DWORD fIsLocked ; 
	140:	LPSTR lpLockOwner ; 
	141:	DWORD dwLockDuration ; 
	142:	} QUERY_SERVICE_LOCK_STATUSA , * LPQUERY_SERVICE_LOCK_STATUSA ; 
	143:	typedef struct _QUERY_SERVICE_LOCK_STATUSW { 
	144:	DWORD fIsLocked ; 
	145:	LPWSTR lpLockOwner ; 
	146:	DWORD dwLockDuration ; 
	147:	} QUERY_SERVICE_LOCK_STATUSW , * LPQUERY_SERVICE_LOCK_STATUSW ; 
	148:	typedef void ( * LPSERVICE_MAIN_FUNCTIONA ) ( DWORD , LPSTR * ) ; 
	149:	typedef void ( * LPSERVICE_MAIN_FUNCTIONW ) ( DWORD , LPWSTR * ) ; 
	150:	typedef struct _SERVICE_TABLE_ENTRYA { 
	151:	LPSTR lpServiceName ; 
	152:	LPSERVICE_MAIN_FUNCTIONA lpServiceProc ; 
	153:	} SERVICE_TABLE_ENTRYA , * LPSERVICE_TABLE_ENTRYA ; 
	154:	typedef struct _SERVICE_TABLE_ENTRYW { 
	155:	LPWSTR lpServiceName ; 
	156:	LPSERVICE_MAIN_FUNCTIONW lpServiceProc ; 
	157:	} SERVICE_TABLE_ENTRYW , * LPSERVICE_TABLE_ENTRYW ; 
	158:	typedef struct SC_HANDLE__ { int i ; } * SC_HANDLE ; 
	159:	typedef SC_HANDLE * LPSC_HANDLE ; 
	160:	typedef PVOID SC_LOCK ; 
	161:	typedef DWORD SERVICE_STATUS_HANDLE ; 
	162:	typedef void ( * LPHANDLER_FUNCTION ) ( DWORD ) ; 
	163:	typedef DWORD ( * LPHANDLER_FUNCTION_EX ) ( DWORD , DWORD , LPVOID , LPVOID ) ; 
	164:	typedef struct _SERVICE_DESCRIPTIONA { 
	165:	LPSTR lpDescription ; 
	166:	} SERVICE_DESCRIPTIONA , * LPSERVICE_DESCRIPTIONA ; 
	167:	typedef struct _SERVICE_DESCRIPTIONW { 
	168:	LPWSTR lpDescription ; 
	169:	} SERVICE_DESCRIPTIONW , * LPSERVICE_DESCRIPTIONW ; 
	170:	typedef enum _SC_ACTION_TYPE { 
	171:	SC_ACTION_NONE = 0 , 
	172:	SC_ACTION_RESTART = 1 , 
	173:	SC_ACTION_REBOOT = 2 , 
	174:	SC_ACTION_RUN_COMMAND = 3 
	175:	} SC_ACTION_TYPE ; 
	176:	typedef struct _SC_ACTION { 
	177:	SC_ACTION_TYPE Type ; 
	178:	DWORD Delay ; 
	179:	} SC_ACTION , * LPSC_ACTION ; 
	180:	typedef struct _SERVICE_FAILURE_ACTIONSA { 
	181:	DWORD dwResetPeriod ; 
	182:	LPSTR lpRebootMsg ; 
	183:	LPSTR lpCommand ; 
	184:	DWORD cActions ; 
	185:	SC_ACTION * lpsaActions ; 
	186:	} SERVICE_FAILURE_ACTIONSA , * LPSERVICE_FAILURE_ACTIONSA ; 
	187:	typedef struct _SERVICE_FAILURE_ACTIONSW { 
	188:	DWORD dwResetPeriod ; 
	189:	LPWSTR lpRebootMsg ; 
	190:	LPWSTR lpCommand ; 
	191:	DWORD cActions ; 
	192:	SC_ACTION * lpsaActions ; 
	193:	} SERVICE_FAILURE_ACTIONSW , * LPSERVICE_FAILURE_ACTIONSW ; 
	195:	BOOL ChangeServiceConfigA ( SC_HANDLE , DWORD , DWORD , DWORD , LPCSTR , LPCSTR , LPDWORD , LPCSTR , LPCSTR , LPCSTR , LPCSTR ) ; 
	196:	BOOL ChangeServiceConfigW ( SC_HANDLE , DWORD , DWORD , DWORD , LPCWSTR , LPCWSTR , LPDWORD , LPCWSTR , LPCWSTR , LPCWSTR , LPCWSTR ) ; 
	197:	BOOL ChangeServiceConfig2A ( SC_HANDLE , DWORD , LPVOID ) ; 
	198:	BOOL ChangeServiceConfig2W ( SC_HANDLE , DWORD , LPVOID ) ; 
	199:	BOOL CloseServiceHandle ( SC_HANDLE ) ; 
	200:	BOOL ControlService ( SC_HANDLE , DWORD , LPSERVICE_STATUS ) ; 
	201:	SC_HANDLE CreateServiceA ( SC_HANDLE , LPCSTR , LPCSTR , DWORD , DWORD , DWORD , DWORD , LPCSTR , LPCSTR , PDWORD , LPCSTR , LPCSTR , LPCSTR ) ; 
	202:	SC_HANDLE CreateServiceW ( SC_HANDLE , LPCWSTR , LPCWSTR , DWORD , DWORD , DWORD , DWORD , LPCWSTR , LPCWSTR , PDWORD , LPCWSTR , LPCWSTR , LPCWSTR ) ; 
	203:	BOOL DeleteService ( SC_HANDLE ) ; 
	204:	BOOL EnumDependentServicesA ( SC_HANDLE , DWORD , LPENUM_SERVICE_STATUSA , DWORD , PDWORD , PDWORD ) ; 
	205:	BOOL EnumDependentServicesW ( SC_HANDLE , DWORD , LPENUM_SERVICE_STATUSW , DWORD , PDWORD , PDWORD ) ; 
	206:	BOOL EnumServicesStatusA ( SC_HANDLE , DWORD , DWORD , LPENUM_SERVICE_STATUSA , DWORD , PDWORD , PDWORD , PDWORD ) ; 
	207:	BOOL EnumServicesStatusW ( SC_HANDLE , DWORD , DWORD , LPENUM_SERVICE_STATUSW , DWORD , PDWORD , PDWORD , PDWORD ) ; 
	208:	BOOL EnumServicesStatusExA ( SC_HANDLE , SC_ENUM_TYPE , DWORD , DWORD , LPBYTE , DWORD , LPDWORD , LPDWORD , LPDWORD , LPCSTR ) ; 
	209:	BOOL EnumServicesStatusExW ( SC_HANDLE , SC_ENUM_TYPE , DWORD , DWORD , LPBYTE , DWORD , LPDWORD , LPDWORD , LPDWORD , LPCWSTR ) ; 
	210:	BOOL GetServiceDisplayNameA ( SC_HANDLE , LPCSTR , LPSTR , PDWORD ) ; 
	211:	BOOL GetServiceDisplayNameW ( SC_HANDLE , LPCWSTR , LPWSTR , PDWORD ) ; 
	212:	BOOL GetServiceKeyNameA ( SC_HANDLE , LPCSTR , LPSTR , PDWORD ) ; 
	213:	BOOL GetServiceKeyNameW ( SC_HANDLE , LPCWSTR , LPWSTR , PDWORD ) ; 
	214:	SC_LOCK LockServiceDatabase ( SC_HANDLE ) ; 
	215:	BOOL NotifyBootConfigStatus ( BOOL ) ; 
	216:	SC_HANDLE OpenSCManagerA ( LPCSTR , LPCSTR , DWORD ) ; 
	217:	SC_HANDLE OpenSCManagerW ( LPCWSTR , LPCWSTR , DWORD ) ; 
	218:	SC_HANDLE OpenServiceA ( SC_HANDLE , LPCSTR , DWORD ) ; 
	219:	SC_HANDLE OpenServiceW ( SC_HANDLE , LPCWSTR , DWORD ) ; 
	220:	BOOL QueryServiceConfigA ( SC_HANDLE , LPQUERY_SERVICE_CONFIGA , DWORD , PDWORD ) ; 
	221:	BOOL QueryServiceConfigW ( SC_HANDLE , LPQUERY_SERVICE_CONFIGW , DWORD , PDWORD ) ; 
	222:	BOOL QueryServiceConfig2A ( SC_HANDLE , DWORD , LPBYTE , DWORD , LPDWORD ) ; 
	223:	BOOL QueryServiceConfig2W ( SC_HANDLE , DWORD , LPBYTE , DWORD , LPDWORD ) ; 
	224:	BOOL QueryServiceLockStatusA ( SC_HANDLE , LPQUERY_SERVICE_LOCK_STATUSA , DWORD , PDWORD ) ; 
	225:	BOOL QueryServiceLockStatusW ( SC_HANDLE , LPQUERY_SERVICE_LOCK_STATUSW , DWORD , PDWORD ) ; 
	226:	BOOL QueryServiceObjectSecurity ( SC_HANDLE , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , LPDWORD ) ; 
	227:	BOOL QueryServiceStatus ( SC_HANDLE , LPSERVICE_STATUS ) ; 
	228:	BOOL QueryServiceStatusEx ( SC_HANDLE , SC_STATUS_TYPE , LPBYTE , DWORD , LPDWORD ) ; 
	229:	SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA ( LPCSTR , LPHANDLER_FUNCTION ) ; 
	230:	SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW ( LPCWSTR , LPHANDLER_FUNCTION ) ; 
	231:	SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA ( LPCSTR , LPHANDLER_FUNCTION_EX , LPVOID ) ; 
	232:	SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW ( LPCWSTR , LPHANDLER_FUNCTION_EX , LPVOID ) ; 
	233:	BOOL SetServiceObjectSecurity ( SC_HANDLE , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ) ; 
	234:	BOOL SetServiceStatus ( SERVICE_STATUS_HANDLE , LPSERVICE_STATUS ) ; 
	235:	BOOL StartServiceA ( SC_HANDLE , DWORD , LPCSTR * ) ; 
	236:	BOOL StartServiceCtrlDispatcherA ( LPSERVICE_TABLE_ENTRYA ) ; 
	237:	BOOL StartServiceCtrlDispatcherW ( LPSERVICE_TABLE_ENTRYW ) ; 
	238:	BOOL StartServiceW ( SC_HANDLE , DWORD , LPCWSTR ) ; 
	239:	BOOL UnlockServiceDatabase ( SC_LOCK ) ; 
	274:	typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS , * LPENUM_SERVICE_STATUS ; 
	275:	typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS ; 
	276:	typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS ; 
	277:	typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG , * LPQUERY_SERVICE_CONFIG ; 
	278:	typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS , * LPQUERY_SERVICE_LOCK_STATUS ; 
	279:	typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY , * LPSERVICE_TABLE_ENTRY ; 
	280:	typedef LPSERVICE_MAIN_FUNCTIONA LPSERVICE_MAIN_FUNCTION ; 
	281:	typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION ; 
	282:	typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION ; 
	283:	typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS ; 
	284:	typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS ; 
	11:	void WinMain ( ) { 
	12:	ExitProcess ( 0 ) ; 
	13:	} 