_chvalidator_l():
L0: # r1 terminates at r8
  r2	=	[ptr]      	  PARAM 0
  r3	=	[i32 x   1]	  PARAM 1
  r4	=	[i32 x   1]	  PARAM 2
  r5	=	&PARAM 0
  r6	=	&PARAM 1
  r7	=	&PARAM 2

L1: # r8 terminates at r9
  ret		[i32 x   1]	 r0
_InterlockedExchangeAdd():
L0: # r1 terminates at r7
  r2	=	[ptr]      	  PARAM 0
  r3	=	[i32 x   1]	  PARAM 1
  r4	=	&PARAM 0
  r5	=	&PARAM 1
  r6	=	[i32 x   1]	 0
  ret		[i32 x   1]	 r6
L1: # r8 terminates at r9
  ret		[i32 x   1]	 r0
_InterlockedExchangeAdd64():
L0: # r1 terminates at r8
  r2	=	[ptr]      	  PARAM 0
  r3	=	[i64 x   1]	  PARAM 1
  r4	=	&PARAM 0
  r5	=	&PARAM 1
  r6	=	[i32 x   1]	 0
  r7	=	[i64 x   1]	 SXT r6
  ret		[i64 x   1]	 r7
L1: # r9 terminates at r10
  ret		[i64 x   1]	 r0
__stosb():
L0: # r1 terminates at r8
  r2	=	[ptr]      	  PARAM 0
  r3	=	[i8  x   1]	  PARAM 1
  r4	=	[i64 x   1]	  PARAM 2
  r5	=	&PARAM 0
  r6	=	&PARAM 1
  r7	=	&PARAM 2

L1: # r8 terminates at r9
  ret		[void]     	 r0
__shiftright128():
L0: # r1 terminates at r10
  r2	=	[i64 x   1]	  PARAM 0
  r3	=	[i64 x   1]	  PARAM 1
  r4	=	[i8  x   1]	  PARAM 2
  r5	=	&PARAM 0
  r6	=	&PARAM 1
  r7	=	&PARAM 2
  r8	=	[i32 x   1]	 0
  r9	=	[i64 x   1]	 ZXT r8
  ret		[i64 x   1]	 r9
L1: # r11 terminates at r12
  ret		[i64 x   1]	 r0
__readgsqword():
L0: # r1 terminates at r7
  r2	=	[i32 x   1]	  PARAM 0
  r3	=	&PARAM 0
  r4	=	[i32 x   1]	 0
  r5	=	[ptr]      	 INT2PTR r4
  r6	=	[i64 x   1]	 PTR2INT r5
  ret		[i64 x   1]	 r6
L1: # r8 terminates at r9
  ret		[i64 x   1]	 r0
WinMain():
L0: # r1 terminates at r11
  r2	=	[ptr]      	  PARAM 0
  r3	=	[ptr]      	  PARAM 1
  r4	=	[ptr]      	  PARAM 2
  r5	=	[i32 x   1]	  PARAM 3
  r6	=	&PARAM 0
  r7	=	&PARAM 1
  r8	=	&PARAM 2
  r9	=	&PARAM 3
  r10	=	[void]     	CALL GetWglFunctions()

L1: # r11 terminates at r29
  r12	=	LOCAL 80 (8 align)
  r13 = INITIALIZER ...
  r14	=	[i64 x   1]	 80
  r15	=	[i32 x   1]	 TRUNC r14
 *r12 	=	[i32 x   1]	 r15 (4 align)
  r17	=	 &k2ú¡
  r18	=	[ptr]      	 r12.data[8]
 *r18 	=	[ptr]      	 r17 (8 align)
  r20	=	[ptr]      	 *r6 (8 align)
  r21	=	[ptr]      	 r12.data[24]
 *r21 	=	[ptr]      	 r20 (8 align)
  r23	=	"o"
  r24	=	[ptr]      	 r12.data[64]
 *r24 	=	[ptr]      	 r23 (8 align)
  r26	=	LOCAL 2 (2 align)
  r27	=	[i16 x   1]	ECALL RegisterClassExW(r12)
 *r26 	=	[i16 x   1]	 r27 (2 align)

L2: # r29 terminates at r30

L4: # r30 terminates at r35
  r31	=	[i16 x   1]	 *r26 (2 align)
  r32	=	[i16 x   1]	 0
  r33	=	[bool]     	 r31 != r32
  r34	=	[bool]     	 0
  if (r33)	L5 else L6

L5: # r36 terminates at r40
  r37	=	"Failed to register window class"
  r38	=	[ptr]      	 0
  r39	=	[bool]     	 r37 != r38

L6: # r40 terminates at r44
  r41	=	[bool]     	 PHI L4:r34, L5:r39
  r42	=	[bool]     	 0
  r43	=	[bool]     	 r41 == r42
  if (r43)	L7 else L8

L7: # r45 terminates at r47
 DEBUGBREAK

L8: # r47 terminates at r49
  r48	=	[i32 x   1]	 0
  if (r48)	L2 else L3

L3: # r50 terminates at r95
  r51	=	LOCAL 4 (4 align)
  r52	=	[i32 x   1]	 2147483648
 *r51 	=	[i32 x   1]	 r52 (4 align)
  r54	=	LOCAL 4 (4 align)
  r55	=	[i32 x   1]	 2147483648
 *r54 	=	[i32 x   1]	 r55 (4 align)
  r57	=	LOCAL 4 (4 align)
  r58	=	[i64 x   1]	 262144
  r59	=	[i32 x   1]	 TRUNC r58
 *r57 	=	[i32 x   1]	 r59 (4 align)
  r61	=	LOCAL 4 (4 align)
  r62	=	[i64 x   1]	 0
  r63	=	[i64 x   1]	 12582912
  r64	=	[i64 x   1]	 12582912
  r65	=	[i64 x   1]	 524288
  r66	=	[i64 x   1]	 13107200
  r67	=	[i64 x   1]	 262144
  r68	=	[i64 x   1]	 13369344
  r69	=	[i64 x   1]	 131072
  r70	=	[i64 x   1]	 13500416
  r71	=	[i64 x   1]	 65536
  r72	=	[i64 x   1]	 13565952
  r73	=	[i32 x   1]	 TRUNC r72
 *r61 	=	[i32 x   1]	 r73 (4 align)
  r75	=	LOCAL 8 (8 align)
  r76	=	[i32 x   1]	 *r57 (4 align)
  r77	=	[ptr]      	 r12.data[64]
  r78	=	[ptr]      	 *r77 (8 align)
  r79	=	"O"
  r80	=	[i32 x   1]	 *r61 (4 align)
  r81	=	[i32 x   1]	 2147483648
  r82	=	[i32 x   1]	 2147483648
  r83	=	[i32 x   1]	 *r51 (4 align)
  r84	=	[i32 x   1]	 *r54 (4 align)
  r85	=	[i32 x   1]	 0
  r86	=	[ptr]      	 INT2PTR r85
  r87	=	[i32 x   1]	 0
  r88	=	[ptr]      	 INT2PTR r87
  r89	=	[ptr]      	 r12.data[24]
  r90	=	[ptr]      	 *r89 (8 align)
  r91	=	[i32 x   1]	 0
  r92	=	[ptr]      	 INT2PTR r91
  r93	=	[ptr]      	ECALL CreateWindowExW(r76, r78, r79, r80, r81, r82, r83, r84, r86, r88, r90, r92)
 *r75 	=	[ptr]      	 r93 (8 align)

L9: # r95 terminates at r96

L11: # r96 terminates at r99
  r97	=	[ptr]      	 *r75 (8 align)
  r98	=	[bool]     	 0
  if (r97)	L12 else L13

L12: # r100 terminates at r104
  r101	=	"Failed to create window"
  r102	=	[ptr]      	 0
  r103	=	[bool]     	 r101 != r102

L13: # r104 terminates at r108
  r105	=	[bool]     	 PHI L11:r98, L12:r103
  r106	=	[bool]     	 0
  r107	=	[bool]     	 r105 == r106
  if (r107)	L14 else L15

L14: # r109 terminates at r111
 DEBUGBREAK

L15: # r111 terminates at r113
  r112	=	[i32 x   1]	 0
  if (r112)	L9 else L10

L10: # r114 terminates at r119
  r115	=	LOCAL 8 (8 align)
  r116	=	[ptr]      	 *r75 (8 align)
  r117	=	[ptr]      	ECALL GetDC(r116)
 *r115 	=	[ptr]      	 r117 (8 align)

L16: # r119 terminates at r120

L18: # r120 terminates at r123
  r121	=	[ptr]      	 *r115 (8 align)
  r122	=	[bool]     	 0
  if (r121)	L19 else L20

L19: # r124 terminates at r128
  r125	=	"Failed to window device context"
  r126	=	[ptr]      	 0
  r127	=	[bool]     	 r125 != r126

L20: # r128 terminates at r132
  r129	=	[bool]     	 PHI L18:r122, L19:r127
  r130	=	[bool]     	 0
  r131	=	[bool]     	 r129 == r130
  if (r131)	L21 else L22

L21: # r133 terminates at r135
 DEBUGBREAK

L22: # r135 terminates at r137
  r136	=	[i32 x   1]	 0
  if (r136)	L16 else L17

L17: # r138 terminates at r187
  r139	=	LOCAL 60 (4 align)
  r140 = INITIALIZER ...
  r141	=	[i32 x   1]	 8193
 *r139 	=	[i32 x   1]	 r141 (4 align)
  r143	=	[i32 x   1]	 1
  r144	=	[ptr]      	 r139.data[4]
 *r144 	=	[i32 x   1]	 r143 (4 align)
  r146	=	[i32 x   1]	 8208
  r147	=	[ptr]      	 r139.data[8]
 *r147 	=	[i32 x   1]	 r146 (4 align)
  r149	=	[i32 x   1]	 1
  r150	=	[ptr]      	 r139.data[12]
 *r150 	=	[i32 x   1]	 r149 (4 align)
  r152	=	[i32 x   1]	 8209
  r153	=	[ptr]      	 r139.data[16]
 *r153 	=	[i32 x   1]	 r152 (4 align)
  r155	=	[i32 x   1]	 1
  r156	=	[ptr]      	 r139.data[20]
 *r156 	=	[i32 x   1]	 r155 (4 align)
  r158	=	[i32 x   1]	 8211
  r159	=	[ptr]      	 r139.data[24]
 *r159 	=	[i32 x   1]	 r158 (4 align)
  r161	=	[i32 x   1]	 8235
  r162	=	[ptr]      	 r139.data[28]
 *r162 	=	[i32 x   1]	 r161 (4 align)
  r164	=	[i32 x   1]	 8212
  r165	=	[ptr]      	 r139.data[32]
 *r165 	=	[i32 x   1]	 r164 (4 align)
  r167	=	[i32 x   1]	 24
  r168	=	[ptr]      	 r139.data[36]
 *r168 	=	[i32 x   1]	 r167 (4 align)
  r170	=	[i32 x   1]	 8226
  r171	=	[ptr]      	 r139.data[40]
 *r171 	=	[i32 x   1]	 r170 (4 align)
  r173	=	[i32 x   1]	 24
  r174	=	[ptr]      	 r139.data[44]
 *r174 	=	[i32 x   1]	 r173 (4 align)
  r176	=	[i32 x   1]	 8227
  r177	=	[ptr]      	 r139.data[48]
 *r177 	=	[i32 x   1]	 r176 (4 align)
  r179	=	[i32 x   1]	 8
  r180	=	[ptr]      	 r139.data[52]
 *r180 	=	[i32 x   1]	 r179 (4 align)
  r182	=	[i32 x   1]	 0
  r183	=	[ptr]      	 r139.data[56]
 *r183 	=	[i32 x   1]	 r182 (4 align)
  r185	=	LOCAL 4 (4 align)
  r186	=	LOCAL 4 (4 align)

L23: # r187 terminates at r198
  r188	=	[ptr]      	 *r115 (8 align)
  r189	=	[i32 x   1]	 0
  r190	=	[ptr]      	 INT2PTR r189
  r191	=	[i32 x   1]	 1
  r192	=	 &wglChoosePixelFormatARB
  r193	=	[ptr]      	 *r192 (8 align)
  r194	=	[i32 x   1]	VCALL r193(r188, r139, r190, r191, r185, r186)
  r195	=	[i32 x   1]	 0
  r196	=	[bool]     	 r194 == r195
  r197	=	[bool]     	 1
  if (r196)	L25 else L24

L24: # r199 terminates at r203
  r200	=	[i32 x   1]	 *r186 (4 align)
  r201	=	[i32 x   1]	 0
  r202	=	[bool]     	 r200 == r201

L25: # r203 terminates at r205
  r204	=	[bool]     	 PHI L23:r197, L24:r202
  if (r204)	L26 else L27

L26: # r206 terminates at r209
  r207	=	"OpenGL does not support required pixel format!"
  r208	=	[void]     	CALL FatalError(r207)

L27: # r209 terminates at r221
  r210	=	LOCAL 40 (4 align)
  r211 = INITIALIZER ...
  r212	=	[i64 x   1]	 40
  r213	=	[i16 x   1]	 TRUNC r212
 *r210 	=	[i16 x   1]	 r213 (2 align)
  r215	=	LOCAL 4 (4 align)
  r216	=	[ptr]      	 *r115 (8 align)
  r217	=	[i32 x   1]	 *r185 (4 align)
  r218	=	[i64 x   1]	 40
  r219	=	[i32 x   1]	ECALL DescribePixelFormat(r216, r217, r218, r210)
 *r215 	=	[i32 x   1]	 r219 (4 align)

L28: # r221 terminates at r222

L30: # r222 terminates at r227
  r223	=	[i32 x   1]	 *r215 (4 align)
  r224	=	[i32 x   1]	 0
  r225	=	[bool]     	 r223 != r224
  r226	=	[bool]     	 0
  if (r225)	L31 else L32

L31: # r228 terminates at r232
  r229	=	"Failed to describe OpenGL pixel format"
  r230	=	[ptr]      	 0
  r231	=	[bool]     	 r229 != r230

L32: # r232 terminates at r236
  r233	=	[bool]     	 PHI L30:r226, L31:r231
  r234	=	[bool]     	 0
  r235	=	[bool]     	 r233 == r234
  if (r235)	L33 else L34

L33: # r237 terminates at r239
 DEBUGBREAK

L34: # r239 terminates at r241
  r240	=	[i32 x   1]	 0
  if (r240)	L28 else L29

L29: # r242 terminates at r243

L35: # r243 terminates at r249
  r244	=	[ptr]      	 *r115 (8 align)
  r245	=	[i32 x   1]	 *r185 (4 align)
  r246	=	[i32 x   1]	ECALL SetPixelFormat(r244, r245, r210)
  r247	=	[i32 x   1]	 0
  r248	=	[bool]     	 r246 == r247
  if (r248)	L36 else L37

L36: # r250 terminates at r253
  r251	=	"Cannot set OpenGL selected pixel format!"
  r252	=	[void]     	CALL FatalError(r251)

L37: # r253 terminates at r290
  r254	=	LOCAL 36 (4 align)
  r255 = INITIALIZER ...
  r256	=	[i32 x   1]	 8337
 *r254 	=	[i32 x   1]	 r256 (4 align)
  r258	=	[i32 x   1]	 4
  r259	=	[ptr]      	 r254.data[4]
 *r259 	=	[i32 x   1]	 r258 (4 align)
  r261	=	[i32 x   1]	 8338
  r262	=	[ptr]      	 r254.data[8]
 *r262 	=	[i32 x   1]	 r261 (4 align)
  r264	=	[i32 x   1]	 5
  r265	=	[ptr]      	 r254.data[12]
 *r265 	=	[i32 x   1]	 r264 (4 align)
  r267	=	[i32 x   1]	 37158
  r268	=	[ptr]      	 r254.data[16]
 *r268 	=	[i32 x   1]	 r267 (4 align)
  r270	=	[i32 x   1]	 1
  r271	=	[ptr]      	 r254.data[20]
 *r271 	=	[i32 x   1]	 r270 (4 align)
  r273	=	[i32 x   1]	 8340
  r274	=	[ptr]      	 r254.data[24]
 *r274 	=	[i32 x   1]	 r273 (4 align)
  r276	=	[i32 x   1]	 1
  r277	=	[ptr]      	 r254.data[28]
 *r277 	=	[i32 x   1]	 r276 (4 align)
  r279	=	[i32 x   1]	 0
  r280	=	[ptr]      	 r254.data[32]
 *r280 	=	[i32 x   1]	 r279 (4 align)
  r282	=	LOCAL 8 (8 align)
  r283	=	[ptr]      	 *r115 (8 align)
  r284	=	[i32 x   1]	 0
  r285	=	[ptr]      	 INT2PTR r284
  r286	=	 &wglCreateContextAttribsARB
  r287	=	[ptr]      	 *r286 (8 align)
  r288	=	[ptr]      	VCALL r287(r283, r285, r254)
 *r282 	=	[ptr]      	 r288 (8 align)

L38: # r290 terminates at r294
  r291	=	[ptr]      	 *r282 (8 align)
  r292	=	[ptr]      	 0
  r293	=	[bool]     	 r291 == r292
  if (r293)	L39 else L40

L39: # r295 terminates at r298
  r296	=	"Cannot create modern OpenGL context! OpenGL version 4.5 not supported?"
  r297	=	[void]     	CALL FatalError(r296)

L40: # r298 terminates at r304
  r299	=	LOCAL 4 (4 align)
  r300	=	[ptr]      	 *r115 (8 align)
  r301	=	[ptr]      	 *r282 (8 align)
  r302	=	[i32 x   1]	ECALL wglMakeCurrent(r300, r301)
 *r299 	=	[i32 x   1]	 r302 (4 align)

L41: # r304 terminates at r305

L43: # r305 terminates at r310
  r306	=	[i32 x   1]	 *r299 (4 align)
  r307	=	[i32 x   1]	 0
  r308	=	[bool]     	 r306 != r307
  r309	=	[bool]     	 0
  if (r308)	L44 else L45

L44: # r311 terminates at r315
  r312	=	"Failed to make current OpenGL context"
  r313	=	[ptr]      	 0
  r314	=	[bool]     	 r312 != r313

L45: # r315 terminates at r319
  r316	=	[bool]     	 PHI L43:r309, L44:r314
  r317	=	[bool]     	 0
  r318	=	[bool]     	 r316 == r317
  if (r318)	L46 else L47

L46: # r320 terminates at r322
 DEBUGBREAK

L47: # r322 terminates at r324
  r323	=	[i32 x   1]	 0
  if (r323)	L41 else L42

L42: # r325 terminates at r330
  r326	=	 &glCreateBuffers
  r327	=	"glCreateBuffers"
  r328	=	[ptr]      	ECALL wglGetProcAddress(r327)
 *r326 	=	[ptr]      	 r328 (8 align)

L48: # r330 terminates at r331

L50: # r331 terminates at r336
  r332	=	 &glCreateBuffers
  r333	=	[ptr]      	 *r332 (8 align)
  r334	=	[ptr]      	 0
  r335	=	[bool]     	 r333 == r334
  if (r335)	L51 else L52

L51: # r337 terminates at r339
 DEBUGBREAK

L52: # r339 terminates at r341
  r340	=	[i32 x   1]	 0
  if (r340)	L48 else L49

L49: # r342 terminates at r347
  r343	=	 &glNamedBufferStorage
  r344	=	"glNamedBufferStorage"
  r345	=	[ptr]      	ECALL wglGetProcAddress(r344)
 *r343 	=	[ptr]      	 r345 (8 align)

L53: # r347 terminates at r348

L55: # r348 terminates at r353
  r349	=	 &glNamedBufferStorage
  r350	=	[ptr]      	 *r349 (8 align)
  r351	=	[ptr]      	 0
  r352	=	[bool]     	 r350 == r351
  if (r352)	L56 else L57

L56: # r354 terminates at r356
 DEBUGBREAK

L57: # r356 terminates at r358
  r357	=	[i32 x   1]	 0
  if (r357)	L53 else L54

L54: # r359 terminates at r364
  r360	=	 &glBindVertexArray
  r361	=	"glBindVertexArray"
  r362	=	[ptr]      	ECALL wglGetProcAddress(r361)
 *r360 	=	[ptr]      	 r362 (8 align)

L58: # r364 terminates at r365

L60: # r365 terminates at r370
  r366	=	 &glBindVertexArray
  r367	=	[ptr]      	 *r366 (8 align)
  r368	=	[ptr]      	 0
  r369	=	[bool]     	 r367 == r368
  if (r369)	L61 else L62

L61: # r371 terminates at r373
 DEBUGBREAK

L62: # r373 terminates at r375
  r374	=	[i32 x   1]	 0
  if (r374)	L58 else L59

L59: # r376 terminates at r381
  r377	=	 &glCreateVertexArrays
  r378	=	"glCreateVertexArrays"
  r379	=	[ptr]      	ECALL wglGetProcAddress(r378)
 *r377 	=	[ptr]      	 r379 (8 align)

L63: # r381 terminates at r382

L65: # r382 terminates at r387
  r383	=	 &glCreateVertexArrays
  r384	=	[ptr]      	 *r383 (8 align)
  r385	=	[ptr]      	 0
  r386	=	[bool]     	 r384 == r385
  if (r386)	L66 else L67

L66: # r388 terminates at r390
 DEBUGBREAK

L67: # r390 terminates at r392
  r391	=	[i32 x   1]	 0
  if (r391)	L63 else L64

L64: # r393 terminates at r398
  r394	=	 &glVertexArrayAttribBinding
  r395	=	"glVertexArrayAttribBinding"
  r396	=	[ptr]      	ECALL wglGetProcAddress(r395)
 *r394 	=	[ptr]      	 r396 (8 align)

L68: # r398 terminates at r399

L70: # r399 terminates at r404
  r400	=	 &glVertexArrayAttribBinding
  r401	=	[ptr]      	 *r400 (8 align)
  r402	=	[ptr]      	 0
  r403	=	[bool]     	 r401 == r402
  if (r403)	L71 else L72

L71: # r405 terminates at r407
 DEBUGBREAK

L72: # r407 terminates at r409
  r408	=	[i32 x   1]	 0
  if (r408)	L68 else L69

L69: # r410 terminates at r415
  r411	=	 &glVertexArrayVertexBuffer
  r412	=	"glVertexArrayVertexBuffer"
  r413	=	[ptr]      	ECALL wglGetProcAddress(r412)
 *r411 	=	[ptr]      	 r413 (8 align)

L73: # r415 terminates at r416

L75: # r416 terminates at r421
  r417	=	 &glVertexArrayVertexBuffer
  r418	=	[ptr]      	 *r417 (8 align)
  r419	=	[ptr]      	 0
  r420	=	[bool]     	 r418 == r419
  if (r420)	L76 else L77

L76: # r422 terminates at r424
 DEBUGBREAK

L77: # r424 terminates at r426
  r425	=	[i32 x   1]	 0
  if (r425)	L73 else L74

L74: # r427 terminates at r432
  r428	=	 &glVertexArrayAttribFormat
  r429	=	"glVertexArrayAttribFormat"
  r430	=	[ptr]      	ECALL wglGetProcAddress(r429)
 *r428 	=	[ptr]      	 r430 (8 align)

L78: # r432 terminates at r433

L80: # r433 terminates at r438
  r434	=	 &glVertexArrayAttribFormat
  r435	=	[ptr]      	 *r434 (8 align)
  r436	=	[ptr]      	 0
  r437	=	[bool]     	 r435 == r436
  if (r437)	L81 else L82

L81: # r439 terminates at r441
 DEBUGBREAK

L82: # r441 terminates at r443
  r442	=	[i32 x   1]	 0
  if (r442)	L78 else L79

L79: # r444 terminates at r449
  r445	=	 &glEnableVertexArrayAttrib
  r446	=	"glEnableVertexArrayAttrib"
  r447	=	[ptr]      	ECALL wglGetProcAddress(r446)
 *r445 	=	[ptr]      	 r447 (8 align)

L83: # r449 terminates at r450

L85: # r450 terminates at r455
  r451	=	 &glEnableVertexArrayAttrib
  r452	=	[ptr]      	 *r451 (8 align)
  r453	=	[ptr]      	 0
  r454	=	[bool]     	 r452 == r453
  if (r454)	L86 else L87

L86: # r456 terminates at r458
 DEBUGBREAK

L87: # r458 terminates at r460
  r459	=	[i32 x   1]	 0
  if (r459)	L83 else L84

L84: # r461 terminates at r466
  r462	=	 &glCreateShaderProgramv
  r463	=	"glCreateShaderProgramv"
  r464	=	[ptr]      	ECALL wglGetProcAddress(r463)
 *r462 	=	[ptr]      	 r464 (8 align)

L88: # r466 terminates at r467

L90: # r467 terminates at r472
  r468	=	 &glCreateShaderProgramv
  r469	=	[ptr]      	 *r468 (8 align)
  r470	=	[ptr]      	 0
  r471	=	[bool]     	 r469 == r470
  if (r471)	L91 else L92

L91: # r473 terminates at r475
 DEBUGBREAK

L92: # r475 terminates at r477
  r476	=	[i32 x   1]	 0
  if (r476)	L88 else L89

L89: # r478 terminates at r483
  r479	=	 &glGetProgramiv
  r480	=	"glGetProgramiv"
  r481	=	[ptr]      	ECALL wglGetProcAddress(r480)
 *r479 	=	[ptr]      	 r481 (8 align)

L93: # r483 terminates at r484

L95: # r484 terminates at r489
  r485	=	 &glGetProgramiv
  r486	=	[ptr]      	 *r485 (8 align)
  r487	=	[ptr]      	 0
  r488	=	[bool]     	 r486 == r487
  if (r488)	L96 else L97

L96: # r490 terminates at r492
 DEBUGBREAK

L97: # r492 terminates at r494
  r493	=	[i32 x   1]	 0
  if (r493)	L93 else L94

L94: # r495 terminates at r500
  r496	=	 &glGetProgramInfoLog
  r497	=	"glGetProgramInfoLog"
  r498	=	[ptr]      	ECALL wglGetProcAddress(r497)
 *r496 	=	[ptr]      	 r498 (8 align)

L98: # r500 terminates at r501

L100: # r501 terminates at r506
  r502	=	 &glGetProgramInfoLog
  r503	=	[ptr]      	 *r502 (8 align)
  r504	=	[ptr]      	 0
  r505	=	[bool]     	 r503 == r504
  if (r505)	L101 else L102

L101: # r507 terminates at r509
 DEBUGBREAK

L102: # r509 terminates at r511
  r510	=	[i32 x   1]	 0
  if (r510)	L98 else L99

L99: # r512 terminates at r517
  r513	=	 &glGenProgramPipelines
  r514	=	"glGenProgramPipelines"
  r515	=	[ptr]      	ECALL wglGetProcAddress(r514)
 *r513 	=	[ptr]      	 r515 (8 align)

L103: # r517 terminates at r518

L105: # r518 terminates at r523
  r519	=	 &glGenProgramPipelines
  r520	=	[ptr]      	 *r519 (8 align)
  r521	=	[ptr]      	 0
  r522	=	[bool]     	 r520 == r521
  if (r522)	L106 else L107

L106: # r524 terminates at r526
 DEBUGBREAK

L107: # r526 terminates at r528
  r527	=	[i32 x   1]	 0
  if (r527)	L103 else L104

L104: # r529 terminates at r534
  r530	=	 &glUseProgramStages
  r531	=	"glUseProgramStages"
  r532	=	[ptr]      	ECALL wglGetProcAddress(r531)
 *r530 	=	[ptr]      	 r532 (8 align)

L108: # r534 terminates at r535

L110: # r535 terminates at r540
  r536	=	 &glUseProgramStages
  r537	=	[ptr]      	 *r536 (8 align)
  r538	=	[ptr]      	 0
  r539	=	[bool]     	 r537 == r538
  if (r539)	L111 else L112

L111: # r541 terminates at r543
 DEBUGBREAK

L112: # r543 terminates at r545
  r544	=	[i32 x   1]	 0
  if (r544)	L108 else L109

L109: # r546 terminates at r551
  r547	=	 &glBindProgramPipeline
  r548	=	"glBindProgramPipeline"
  r549	=	[ptr]      	ECALL wglGetProcAddress(r548)
 *r547 	=	[ptr]      	 r549 (8 align)

L113: # r551 terminates at r552

L115: # r552 terminates at r557
  r553	=	 &glBindProgramPipeline
  r554	=	[ptr]      	 *r553 (8 align)
  r555	=	[ptr]      	 0
  r556	=	[bool]     	 r554 == r555
  if (r556)	L116 else L117

L116: # r558 terminates at r560
 DEBUGBREAK

L117: # r560 terminates at r562
  r561	=	[i32 x   1]	 0
  if (r561)	L113 else L114

L114: # r563 terminates at r568
  r564	=	 &glProgramUniformMatrix2fv
  r565	=	"glProgramUniformMatrix2fv"
  r566	=	[ptr]      	ECALL wglGetProcAddress(r565)
 *r564 	=	[ptr]      	 r566 (8 align)

L118: # r568 terminates at r569

L120: # r569 terminates at r574
  r570	=	 &glProgramUniformMatrix2fv
  r571	=	[ptr]      	 *r570 (8 align)
  r572	=	[ptr]      	 0
  r573	=	[bool]     	 r571 == r572
  if (r573)	L121 else L122

L121: # r575 terminates at r577
 DEBUGBREAK

L122: # r577 terminates at r579
  r578	=	[i32 x   1]	 0
  if (r578)	L118 else L119

L119: # r580 terminates at r585
  r581	=	 &glBindTextureUnit
  r582	=	"glBindTextureUnit"
  r583	=	[ptr]      	ECALL wglGetProcAddress(r582)
 *r581 	=	[ptr]      	 r583 (8 align)

L123: # r585 terminates at r586

L125: # r586 terminates at r591
  r587	=	 &glBindTextureUnit
  r588	=	[ptr]      	 *r587 (8 align)
  r589	=	[ptr]      	 0
  r590	=	[bool]     	 r588 == r589
  if (r590)	L126 else L127

L126: # r592 terminates at r594
 DEBUGBREAK

L127: # r594 terminates at r596
  r595	=	[i32 x   1]	 0
  if (r595)	L123 else L124

L124: # r597 terminates at r602
  r598	=	 &glCreateTextures
  r599	=	"glCreateTextures"
  r600	=	[ptr]      	ECALL wglGetProcAddress(r599)
 *r598 	=	[ptr]      	 r600 (8 align)

L128: # r602 terminates at r603

L130: # r603 terminates at r608
  r604	=	 &glCreateTextures
  r605	=	[ptr]      	 *r604 (8 align)
  r606	=	[ptr]      	 0
  r607	=	[bool]     	 r605 == r606
  if (r607)	L131 else L132

L131: # r609 terminates at r611
 DEBUGBREAK

L132: # r611 terminates at r613
  r612	=	[i32 x   1]	 0
  if (r612)	L128 else L129

L129: # r614 terminates at r619
  r615	=	 &glTextureParameteri
  r616	=	"glTextureParameteri"
  r617	=	[ptr]      	ECALL wglGetProcAddress(r616)
 *r615 	=	[ptr]      	 r617 (8 align)

L133: # r619 terminates at r620

L135: # r620 terminates at r625
  r621	=	 &glTextureParameteri
  r622	=	[ptr]      	 *r621 (8 align)
  r623	=	[ptr]      	 0
  r624	=	[bool]     	 r622 == r623
  if (r624)	L136 else L137

L136: # r626 terminates at r628
 DEBUGBREAK

L137: # r628 terminates at r630
  r629	=	[i32 x   1]	 0
  if (r629)	L133 else L134

L134: # r631 terminates at r636
  r632	=	 &glTextureStorage2D
  r633	=	"glTextureStorage2D"
  r634	=	[ptr]      	ECALL wglGetProcAddress(r633)
 *r632 	=	[ptr]      	 r634 (8 align)

L138: # r636 terminates at r637

L140: # r637 terminates at r642
  r638	=	 &glTextureStorage2D
  r639	=	[ptr]      	 *r638 (8 align)
  r640	=	[ptr]      	 0
  r641	=	[bool]     	 r639 == r640
  if (r641)	L141 else L142

L141: # r643 terminates at r645
 DEBUGBREAK

L142: # r645 terminates at r647
  r646	=	[i32 x   1]	 0
  if (r646)	L138 else L139

L139: # r648 terminates at r653
  r649	=	 &glTextureSubImage2D
  r650	=	"glTextureSubImage2D"
  r651	=	[ptr]      	ECALL wglGetProcAddress(r650)
 *r649 	=	[ptr]      	 r651 (8 align)

L143: # r653 terminates at r654

L145: # r654 terminates at r659
  r655	=	 &glTextureSubImage2D
  r656	=	[ptr]      	 *r655 (8 align)
  r657	=	[ptr]      	 0
  r658	=	[bool]     	 r656 == r657
  if (r658)	L146 else L147

L146: # r660 terminates at r662
 DEBUGBREAK

L147: # r662 terminates at r664
  r663	=	[i32 x   1]	 0
  if (r663)	L143 else L144

L144: # r665 terminates at r670
  r666	=	 &glDebugMessageCallback
  r667	=	"glDebugMessageCallback"
  r668	=	[ptr]      	ECALL wglGetProcAddress(r667)
 *r666 	=	[ptr]      	 r668 (8 align)

L148: # r670 terminates at r671

L150: # r671 terminates at r676
  r672	=	 &glDebugMessageCallback
  r673	=	[ptr]      	 *r672 (8 align)
  r674	=	[ptr]      	 0
  r675	=	[bool]     	 r673 == r674
  if (r675)	L151 else L152

L151: # r677 terminates at r679
 DEBUGBREAK

L152: # r679 terminates at r681
  r680	=	[i32 x   1]	 0
  if (r680)	L148 else L149

L149: # r682 terminates at r962
  r683	=	 &]2ú¡
  r684	=	[i32 x   1]	 0
  r685	=	[ptr]      	 INT2PTR r684
  r686	=	 &glDebugMessageCallback
  r687	=	[ptr]      	 *r686 (8 align)
  r688	=	[void]     	VCALL r687(r683, r685)
  r689	=	[i32 x   1]	 33346
  r690	=	[void]     	ECALL glEnable(r689)
  r691	=	LOCAL 4 (4 align)
  r692	=	LOCAL 84 (4 align)
  r693 = INITIALIZER ...
  r694	=	[f32 x   1]	 0.000000
  r695	=	[f32 x   1]	 -0.000000
 *r692 	=	[f32 x   1]	 r695 (4 align)
  r697	=	[f32 x   1]	 0.750000
  r698	=	[ptr]      	 r692.data[4]
 *r698 	=	[f32 x   1]	 r697 (4 align)
  r700	=	[f32 x   1]	 25.000000
  r701	=	[ptr]      	 r692.data[8]
 *r701 	=	[f32 x   1]	 r700 (4 align)
  r703	=	[f32 x   1]	 50.000000
  r704	=	[ptr]      	 r692.data[12]
 *r704 	=	[f32 x   1]	 r703 (4 align)
  r706	=	[i32 x   1]	 1
  r707	=	[f32 x   1]	 1.000000
  r708	=	[ptr]      	 r692.data[16]
 *r708 	=	[f32 x   1]	 r707 (4 align)
  r710	=	[i32 x   1]	 0
  r711	=	[f32 x   1]	 0.000000
  r712	=	[ptr]      	 r692.data[20]
 *r712 	=	[f32 x   1]	 r711 (4 align)
  r714	=	[i32 x   1]	 0
  r715	=	[f32 x   1]	 0.000000
  r716	=	[ptr]      	 r692.data[24]
 *r716 	=	[f32 x   1]	 r715 (4 align)
  r718	=	[f32 x   1]	 0.750000
  r719	=	[ptr]      	 r692.data[28]
 *r719 	=	[f32 x   1]	 r718 (4 align)
  r721	=	[f32 x   1]	 0.500000
  r722	=	[f32 x   1]	 -0.500000
  r723	=	[ptr]      	 r692.data[32]
 *r723 	=	[f32 x   1]	 r722 (4 align)
  r725	=	[f32 x   1]	 0.000000
  r726	=	[ptr]      	 r692.data[36]
 *r726 	=	[f32 x   1]	 r725 (4 align)
  r728	=	[f32 x   1]	 0.000000
  r729	=	[ptr]      	 r692.data[40]
 *r729 	=	[f32 x   1]	 r728 (4 align)
  r731	=	[i32 x   1]	 0
  r732	=	[f32 x   1]	 0.000000
  r733	=	[ptr]      	 r692.data[44]
 *r733 	=	[f32 x   1]	 r732 (4 align)
  r735	=	[i32 x   1]	 1
  r736	=	[f32 x   1]	 1.000000
  r737	=	[ptr]      	 r692.data[48]
 *r737 	=	[f32 x   1]	 r736 (4 align)
  r739	=	[i32 x   1]	 0
  r740	=	[f32 x   1]	 0.000000
  r741	=	[ptr]      	 r692.data[52]
 *r741 	=	[f32 x   1]	 r740 (4 align)
  r743	=	[f32 x   1]	 0.750000
  r744	=	[f32 x   1]	 -0.750000
  r745	=	[ptr]      	 r692.data[56]
 *r745 	=	[f32 x   1]	 r744 (4 align)
  r747	=	[f32 x   1]	 0.500000
  r748	=	[f32 x   1]	 -0.500000
  r749	=	[ptr]      	 r692.data[60]
 *r749 	=	[f32 x   1]	 r748 (4 align)
  r751	=	[f32 x   1]	 50.000000
  r752	=	[ptr]      	 r692.data[64]
 *r752 	=	[f32 x   1]	 r751 (4 align)
  r754	=	[f32 x   1]	 0.000000
  r755	=	[ptr]      	 r692.data[68]
 *r755 	=	[f32 x   1]	 r754 (4 align)
  r757	=	[i32 x   1]	 0
  r758	=	[f32 x   1]	 0.000000
  r759	=	[ptr]      	 r692.data[72]
 *r759 	=	[f32 x   1]	 r758 (4 align)
  r761	=	[i32 x   1]	 0
  r762	=	[f32 x   1]	 0.000000
  r763	=	[ptr]      	 r692.data[76]
 *r763 	=	[f32 x   1]	 r762 (4 align)
  r765	=	[i32 x   1]	 1
  r766	=	[f32 x   1]	 1.000000
  r767	=	[ptr]      	 r692.data[80]
 *r767 	=	[f32 x   1]	 r766 (4 align)
  r769	=	[i32 x   1]	 1
  r770	=	 &glCreateBuffers
  r771	=	[ptr]      	 *r770 (8 align)
  r772	=	[void]     	VCALL r771(r769, r691)
  r773	=	[i32 x   1]	 *r691 (4 align)
  r774	=	[i64 x   1]	 84
  r775	=	[i32 x   1]	 0
  r776	=	 &glNamedBufferStorage
  r777	=	[ptr]      	 *r776 (8 align)
  r778	=	[void]     	VCALL r777(r773, r774, r692, r775)
  r779	=	LOCAL 4 (4 align)
  r780	=	[i32 x   1]	 1
  r781	=	 &glCreateVertexArrays
  r782	=	[ptr]      	 *r781 (8 align)
  r783	=	[void]     	VCALL r782(r780, r779)
  r784	=	LOCAL 4 (4 align)
  r785	=	[i32 x   1]	 0
 *r784 	=	[i32 x   1]	 r785 (4 align)
  r787	=	[i32 x   1]	 *r779 (4 align)
  r788	=	[i32 x   1]	 *r784 (4 align)
  r789	=	[i32 x   1]	 *r691 (4 align)
  r790	=	[i32 x   1]	 0
  r791	=	[i64 x   1]	 28
  r792	=	 &glVertexArrayVertexBuffer
  r793	=	[ptr]      	 *r792 (8 align)
  r794	=	[void]     	VCALL r793(r787, r788, r789, r790, r791)
  r795	=	LOCAL 4 (4 align)
  r796	=	[i32 x   1]	 0
 *r795 	=	[i32 x   1]	 r796 (4 align)
  r798	=	[i32 x   1]	 *r779 (4 align)
  r799	=	[i32 x   1]	 *r795 (4 align)
  r800	=	[i32 x   1]	 2
  r801	=	[i32 x   1]	 5126
  r802	=	[i32 x   1]	 0
  r803	=	[ptr]      	 0
  r804	=	[i64 x   1]	 PTR2INT r803
  r805	=	 &glVertexArrayAttribFormat
  r806	=	[ptr]      	 *r805 (8 align)
  r807	=	[void]     	VCALL r806(r798, r799, r800, r801, r802, r804)
  r808	=	[i32 x   1]	 *r779 (4 align)
  r809	=	[i32 x   1]	 *r795 (4 align)
  r810	=	[i32 x   1]	 *r784 (4 align)
  r811	=	 &glVertexArrayAttribBinding
  r812	=	[ptr]      	 *r811 (8 align)
  r813	=	[void]     	VCALL r812(r808, r809, r810)
  r814	=	[i32 x   1]	 *r779 (4 align)
  r815	=	[i32 x   1]	 *r795 (4 align)
  r816	=	 &glEnableVertexArrayAttrib
  r817	=	[ptr]      	 *r816 (8 align)
  r818	=	[void]     	VCALL r817(r814, r815)
  r819	=	LOCAL 4 (4 align)
  r820	=	[i32 x   1]	 1
 *r819 	=	[i32 x   1]	 r820 (4 align)
  r822	=	[i32 x   1]	 *r779 (4 align)
  r823	=	[i32 x   1]	 *r819 (4 align)
  r824	=	[i32 x   1]	 2
  r825	=	[i32 x   1]	 5126
  r826	=	[i32 x   1]	 0
  r827	=	[ptr]      	 8
  r828	=	[i64 x   1]	 PTR2INT r827
  r829	=	 &glVertexArrayAttribFormat
  r830	=	[ptr]      	 *r829 (8 align)
  r831	=	[void]     	VCALL r830(r822, r823, r824, r825, r826, r828)
  r832	=	[i32 x   1]	 *r779 (4 align)
  r833	=	[i32 x   1]	 *r819 (4 align)
  r834	=	[i32 x   1]	 *r784 (4 align)
  r835	=	 &glVertexArrayAttribBinding
  r836	=	[ptr]      	 *r835 (8 align)
  r837	=	[void]     	VCALL r836(r832, r833, r834)
  r838	=	[i32 x   1]	 *r779 (4 align)
  r839	=	[i32 x   1]	 *r819 (4 align)
  r840	=	 &glEnableVertexArrayAttrib
  r841	=	[ptr]      	 *r840 (8 align)
  r842	=	[void]     	VCALL r841(r838, r839)
  r843	=	LOCAL 4 (4 align)
  r844	=	[i32 x   1]	 2
 *r843 	=	[i32 x   1]	 r844 (4 align)
  r846	=	[i32 x   1]	 *r779 (4 align)
  r847	=	[i32 x   1]	 *r843 (4 align)
  r848	=	[i32 x   1]	 3
  r849	=	[i32 x   1]	 5126
  r850	=	[i32 x   1]	 0
  r851	=	[ptr]      	 16
  r852	=	[i64 x   1]	 PTR2INT r851
  r853	=	 &glVertexArrayAttribFormat
  r854	=	[ptr]      	 *r853 (8 align)
  r855	=	[void]     	VCALL r854(r846, r847, r848, r849, r850, r852)
  r856	=	[i32 x   1]	 *r779 (4 align)
  r857	=	[i32 x   1]	 *r843 (4 align)
  r858	=	[i32 x   1]	 *r784 (4 align)
  r859	=	 &glVertexArrayAttribBinding
  r860	=	[ptr]      	 *r859 (8 align)
  r861	=	[void]     	VCALL r860(r856, r857, r858)
  r862	=	[i32 x   1]	 *r779 (4 align)
  r863	=	[i32 x   1]	 *r843 (4 align)
  r864	=	 &glEnableVertexArrayAttrib
  r865	=	[ptr]      	 *r864 (8 align)
  r866	=	[void]     	VCALL r865(r862, r863)
  r867	=	LOCAL 4 (4 align)
  r868	=	LOCAL 16 (4 align)
  r869 = INITIALIZER ...
  r870	=	[i32 x   1]	 2147483648
 *r868 	=	[i32 x   1]	 r870 (4 align)
  r872	=	[i32 x   1]	 4294967295
  r873	=	[ptr]      	 r868.data[4]
 *r873 	=	[i32 x   1]	 r872 (4 align)
  r875	=	[i32 x   1]	 4294967295
  r876	=	[ptr]      	 r868.data[8]
 *r876 	=	[i32 x   1]	 r875 (4 align)
  r878	=	[i32 x   1]	 2147483648
  r879	=	[ptr]      	 r868.data[12]
 *r879 	=	[i32 x   1]	 r878 (4 align)
  r881	=	[i32 x   1]	 3553
  r882	=	[i32 x   1]	 1
  r883	=	 &glCreateTextures
  r884	=	[ptr]      	 *r883 (8 align)
  r885	=	[void]     	VCALL r884(r881, r882, r867)
  r886	=	[i32 x   1]	 *r867 (4 align)
  r887	=	[i32 x   1]	 10241
  r888	=	[i32 x   1]	 9728
  r889	=	 &glTextureParameteri
  r890	=	[ptr]      	 *r889 (8 align)
  r891	=	[void]     	VCALL r890(r886, r887, r888)
  r892	=	[i32 x   1]	 *r867 (4 align)
  r893	=	[i32 x   1]	 10240
  r894	=	[i32 x   1]	 9728
  r895	=	 &glTextureParameteri
  r896	=	[ptr]      	 *r895 (8 align)
  r897	=	[void]     	VCALL r896(r892, r893, r894)
  r898	=	[i32 x   1]	 *r867 (4 align)
  r899	=	[i32 x   1]	 10242
  r900	=	[i32 x   1]	 10497
  r901	=	 &glTextureParameteri
  r902	=	[ptr]      	 *r901 (8 align)
  r903	=	[void]     	VCALL r902(r898, r899, r900)
  r904	=	[i32 x   1]	 *r867 (4 align)
  r905	=	[i32 x   1]	 10243
  r906	=	[i32 x   1]	 10497
  r907	=	 &glTextureParameteri
  r908	=	[ptr]      	 *r907 (8 align)
  r909	=	[void]     	VCALL r908(r904, r905, r906)
  r910	=	LOCAL 4 (4 align)
  r911	=	[i32 x   1]	 2
 *r910 	=	[i32 x   1]	 r911 (4 align)
  r913	=	LOCAL 4 (4 align)
  r914	=	[i32 x   1]	 2
 *r913 	=	[i32 x   1]	 r914 (4 align)
  r916	=	[i32 x   1]	 *r867 (4 align)
  r917	=	[i32 x   1]	 1
  r918	=	[i32 x   1]	 32856
  r919	=	[i32 x   1]	 *r910 (4 align)
  r920	=	[i32 x   1]	 *r913 (4 align)
  r921	=	 &glTextureStorage2D
  r922	=	[ptr]      	 *r921 (8 align)
  r923	=	[void]     	VCALL r922(r916, r917, r918, r919, r920)
  r924	=	[i32 x   1]	 *r867 (4 align)
  r925	=	[i32 x   1]	 0
  r926	=	[i32 x   1]	 0
  r927	=	[i32 x   1]	 0
  r928	=	[i32 x   1]	 *r910 (4 align)
  r929	=	[i32 x   1]	 *r913 (4 align)
  r930	=	[i32 x   1]	 6408
  r931	=	[i32 x   1]	 5121
  r932	=	 &glTextureSubImage2D
  r933	=	[ptr]      	 *r932 (8 align)
  r934	=	[void]     	VCALL r933(r924, r925, r926, r927, r928, r929, r930, r931, r868)
  r935	=	LOCAL 4 (4 align)
  r936	=	LOCAL 4 (4 align)
  r937	=	LOCAL 4 (4 align)
  r938	=	LOCAL 8 (8 align)
  r939	=	"#version 450 core                             
                                              
layout (location=0) in vec2 a_pos;            
layout (location=1) in vec2 a_uv;             
layout (location=2) in vec3 a_color;          
                                              
layout (location=0)                           
uniform mat2 u_matrix;                        
                                              
out gl_PerVertex { vec4 gl_Position; };       
out vec2 uv;                                  
out vec4 color;                               
                                              
void main()                                   
{                                             
    vec2 pos = u_matrix * a_pos;              
    gl_Position = vec4(pos, 0, 1);            
    uv = a_uv;                                
    color = vec4(a_color, 1);                 
}                                             
"
 *r938 	=	[ptr]      	 r939 (8 align)
  r941	=	LOCAL 8 (8 align)
  r942	=	"#version 450 core                             
                                              
in vec2 uv;                                   
in vec4 color;                                
                                              
layout (binding=0)                            
uniform sampler2D s_texture;                  
                                              
layout (location=0)                           
out vec4 o_color;                             
                                              
void main()                                   
{                                             
    o_color = color * texture(s_texture, uv); 
}                                             
"
 *r941 	=	[ptr]      	 r942 (8 align)
  r944	=	[i32 x   1]	 35633
  r945	=	[i32 x   1]	 1
  r946	=	 &glCreateShaderProgramv
  r947	=	[ptr]      	 *r946 (8 align)
  r948	=	[i32 x   1]	VCALL r947(r944, r945, r938)
 *r936 	=	[i32 x   1]	 r948 (4 align)
  r950	=	[i32 x   1]	 35632
  r951	=	[i32 x   1]	 1
  r952	=	 &glCreateShaderProgramv
  r953	=	[ptr]      	 *r952 (8 align)
  r954	=	[i32 x   1]	VCALL r953(r950, r951, r941)
 *r937 	=	[i32 x   1]	 r954 (4 align)
  r956	=	LOCAL 4 (4 align)
  r957	=	[i32 x   1]	 *r936 (4 align)
  r958	=	[i32 x   1]	 35714
  r959	=	 &glGetProgramiv
  r960	=	[ptr]      	 *r959 (8 align)
  r961	=	[void]     	VCALL r960(r957, r958, r956)

L153: # r962 terminates at r966
  r963	=	[i32 x   1]	 *r956 (4 align)
  r964	=	[i32 x   1]	 0
  r965	=	[bool]     	 r963 == r964
  if (r965)	L154 else L155

L154: # r967 terminates at r977
  r968	=	LOCAL 1024 (1 align)
  r969	=	[i32 x   1]	 *r936 (4 align)
  r970	=	[i64 x   1]	 1024
  r971	=	[i32 x   1]	 0
  r972	=	[ptr]      	 INT2PTR r971
  r973	=	 &glGetProgramInfoLog
  r974	=	[ptr]      	 *r973 (8 align)
  r975	=	[void]     	VCALL r974(r969, r970, r972, r968)
  r976	=	[void]     	ECALL OutputDebugStringA(r968)

L156: # r977 terminates at r978

L158: # r978 terminates at r984
  r979	=	"Failed to create vertex shader!"
  r980	=	[ptr]      	 0
  r981	=	[bool]     	 r979 == r980
  r982	=	[bool]     	 0
  r983	=	[bool]     	 r981 == r982
  if (r983)	L159 else L160

L159: # r985 terminates at r987
 DEBUGBREAK

L160: # r987 terminates at r989
  r988	=	[i32 x   1]	 0
  if (r988)	L156 else L157

L157: # r990 terminates at r991

L155: # r991 terminates at r997
  r992	=	[i32 x   1]	 *r937 (4 align)
  r993	=	[i32 x   1]	 35714
  r994	=	 &glGetProgramiv
  r995	=	[ptr]      	 *r994 (8 align)
  r996	=	[void]     	VCALL r995(r992, r993, r956)

L161: # r997 terminates at r1001
  r998	=	[i32 x   1]	 *r956 (4 align)
  r999	=	[i32 x   1]	 0
  r1000	=	[bool]     	 r998 == r999
  if (r1000)	L162 else L163

L162: # r1002 terminates at r1012
  r1003	=	LOCAL 1024 (1 align)
  r1004	=	[i32 x   1]	 *r937 (4 align)
  r1005	=	[i64 x   1]	 1024
  r1006	=	[i32 x   1]	 0
  r1007	=	[ptr]      	 INT2PTR r1006
  r1008	=	 &glGetProgramInfoLog
  r1009	=	[ptr]      	 *r1008 (8 align)
  r1010	=	[void]     	VCALL r1009(r1004, r1005, r1007, r1003)
  r1011	=	[void]     	ECALL OutputDebugStringA(r1003)

L164: # r1012 terminates at r1013

L166: # r1013 terminates at r1019
  r1014	=	"Failed to create fragment shader!"
  r1015	=	[ptr]      	 0
  r1016	=	[bool]     	 r1014 == r1015
  r1017	=	[bool]     	 0
  r1018	=	[bool]     	 r1016 == r1017
  if (r1018)	L167 else L168

L167: # r1020 terminates at r1022
 DEBUGBREAK

L168: # r1022 terminates at r1024
  r1023	=	[i32 x   1]	 0
  if (r1023)	L164 else L165

L165: # r1025 terminates at r1026

L163: # r1026 terminates at r1058
  r1027	=	[i32 x   1]	 1
  r1028	=	 &glGenProgramPipelines
  r1029	=	[ptr]      	 *r1028 (8 align)
  r1030	=	[void]     	VCALL r1029(r1027, r935)
  r1031	=	[i32 x   1]	 *r935 (4 align)
  r1032	=	[i32 x   1]	 1
  r1033	=	[i32 x   1]	 *r936 (4 align)
  r1034	=	 &glUseProgramStages
  r1035	=	[ptr]      	 *r1034 (8 align)
  r1036	=	[void]     	VCALL r1035(r1031, r1032, r1033)
  r1037	=	[i32 x   1]	 *r935 (4 align)
  r1038	=	[i32 x   1]	 2
  r1039	=	[i32 x   1]	 *r937 (4 align)
  r1040	=	 &glUseProgramStages
  r1041	=	[ptr]      	 *r1040 (8 align)
  r1042	=	[void]     	VCALL r1041(r1037, r1038, r1039)
  r1043	=	[i32 x   1]	 3042
  r1044	=	[void]     	ECALL glEnable(r1043)
  r1045	=	[i32 x   1]	 770
  r1046	=	[i32 x   1]	 771
  r1047	=	[void]     	ECALL glBlendFunc(r1045, r1046)
  r1048	=	[i32 x   1]	 2929
  r1049	=	[void]     	ECALL glDisable(r1048)
  r1050	=	[i32 x   1]	 2884
  r1051	=	[void]     	ECALL glDisable(r1050)
  r1052	=	LOCAL 4 (4 align)
  r1053	=	[i32 x   1]	 0
 *r1052 	=	[i32 x   1]	 r1053 (4 align)
  r1055	=	[i32 x   1]	 *r1052 (4 align)
  r1056	=	[i32 x   1]	 0
  r1057	=	[bool]     	 r1055 != r1056
  if (r1057)	L169 else L170

L169: # r1059 terminates at r1061
  r1060	=	[i32 x   1]	 1
  goto L171

L170: # r1062 terminates at r1064
  r1063	=	[i32 x   1]	 0

L171: # r1064 terminates at r1079
  r1065	=	[i32 x   1]	 PHI L169:r1060, L170:r1063
  r1066	=	 &wglSwapIntervalEXT
  r1067	=	[ptr]      	 *r1066 (8 align)
  r1068	=	[i32 x   1]	VCALL r1067(r1065)
  r1069	=	[ptr]      	 *r75 (8 align)
  r1070	=	[i32 x   1]	 10
  r1071	=	[i32 x   1]	ECALL ShowWindow(r1069, r1070)
  r1072	=	LOCAL 8 (8 align)
  r1073	=	LOCAL 8 (8 align)
  r1074	=	[i32 x   1]	ECALL QueryPerformanceFrequency(r1072)
  r1075	=	[i32 x   1]	ECALL QueryPerformanceCounter(r1073)
  r1076	=	LOCAL 4 (4 align)
  r1077	=	[f32 x   1]	 0.000000
 *r1076 	=	[f32 x   1]	 r1077 (4 align)

L173: # r1079 terminates at r1080
  goto L172

L172: # r1081 terminates at r1083
  r1082	=	LOCAL 48 (8 align)

L175: # r1083 terminates at r1092
  r1084	=	[i32 x   1]	 0
  r1085	=	[ptr]      	 INT2PTR r1084
  r1086	=	[i32 x   1]	 0
  r1087	=	[i32 x   1]	 0
  r1088	=	[i32 x   1]	 1
  r1089	=	[i32 x   1]	ECALL PeekMessageW(r1082, r1085, r1086, r1087, r1088)
  r1090	=	[i32 x   1]	 0
  r1091	=	[bool]     	 r1089 != r1090
  if (r1091)	L176 else L177

L176: # r1093 terminates at r1094

L178: # r1094 terminates at r1099
  r1095	=	[ptr]      	 r1082.data[8]
  r1096	=	[i32 x   1]	 *r1095 (4 align)
  r1097	=	[i32 x   1]	 18
  r1098	=	[bool]     	 r1096 == r1097
  if (r1098)	L179 else L180

L179: # r1100 terminates at r1101
  goto L174

L181: # r1102 terminates at r1103

L180: # r1103 terminates at r1106
  r1104	=	[i32 x   1]	ECALL TranslateMessage(r1082)
  r1105	=	[i64 x   1]	ECALL DispatchMessageW(r1082)
  goto L173

L182: # r1107 terminates at r1108

L177: # r1108 terminates at r1141
  r1109	=	LOCAL 16 (4 align)
  r1110	=	[ptr]      	 *r75 (8 align)
  r1111	=	[i32 x   1]	ECALL GetClientRect(r1110, r1109)
  r1112	=	[ptr]      	 r1109.data[8]
  r1113	=	[i32 x   1]	 *r1112 (4 align)
  r1114	=	[ptr]      	 r1109.data[0]
  r1115	=	[i32 x   1]	 *r1114 (4 align)
  r1116	=	[i32 x   1]	 r1113 - r1115
 *r51 	=	[i32 x   1]	 r1116 (4 align)
  r1118	=	[ptr]      	 r1109.data[12]
  r1119	=	[i32 x   1]	 *r1118 (4 align)
  r1120	=	[ptr]      	 r1109.data[4]
  r1121	=	[i32 x   1]	 *r1120 (4 align)
  r1122	=	[i32 x   1]	 r1119 - r1121
 *r54 	=	[i32 x   1]	 r1122 (4 align)
  r1124	=	LOCAL 8 (8 align)
  r1125	=	[i32 x   1]	ECALL QueryPerformanceCounter(r1124)
  r1126	=	LOCAL 4 (4 align)
  r1127	=	[ptr]      	 r1124.data[0]
  r1128	=	[i64 x   1]	 *r1127 (8 align)
  r1129	=	[ptr]      	 r1073.data[0]
  r1130	=	[i64 x   1]	 *r1129 (8 align)
  r1131	=	[i64 x   1]	 r1128 - r1130
  r1132	=	[f64 x   1]	 INT2FLT r1131
  r1133	=	[ptr]      	 r1072.data[0]
  r1134	=	[i64 x   1]	 *r1133 (8 align)
  r1135	=	[f64 x   1]	 INT2FLT r1134
  r1136	=	[f64 x   1]	 r1132 / r1135
  r1137	=	[f32 x   1]	 TRUNC r1136
 *r1126 	=	[f32 x   1]	 r1137 (4 align)
  r1139	=	[i64 x   1]	 8
  MEMCPY	(r1073, r1124, r1139)

L183: # r1141 terminates at r1146
  r1142	=	[i32 x   1]	 *r51 (4 align)
  r1143	=	[i32 x   1]	 0
  r1144	=	[bool]     	 r1142 != r1143
  r1145	=	[bool]     	 0
  if (r1144)	L184 else L185

L184: # r1147 terminates at r1151
  r1148	=	[i32 x   1]	 *r54 (4 align)
  r1149	=	[i32 x   1]	 0
  r1150	=	[bool]     	 r1148 != r1149

L185: # r1151 terminates at r1153
  r1152	=	[bool]     	 PHI L183:r1145, L184:r1150
  if (r1152)	L186 else L187

L186: # r1154 terminates at r1248
  r1155	=	[i32 x   1]	 0
  r1156	=	[i32 x   1]	 0
  r1157	=	[i32 x   1]	 *r51 (4 align)
  r1158	=	[i32 x   1]	 *r54 (4 align)
  r1159	=	[void]     	ECALL glViewport(r1155, r1156, r1157, r1158)
  r1160	=	[f32 x   1]	 0.392000
  r1161	=	[f32 x   1]	 0.584000
  r1162	=	[f32 x   1]	 0.929000
  r1163	=	[f32 x   1]	 1.000000
  r1164	=	[void]     	ECALL glClearColor(r1160, r1161, r1162, r1163)
  r1165	=	[i32 x   1]	 16384
  r1166	=	[i32 x   1]	 256
  r1167	=	[i32 x   1]	 16640
  r1168	=	[i32 x   1]	 1024
  r1169	=	[i32 x   1]	 17664
  r1170	=	[void]     	ECALL glClear(r1169)
  r1171	=	[f32 x   1]	 *r1076 (4 align)
  r1172	=	[f32 x   1]	 *r1126 (4 align)
  r1173	=	[f32 x   1]	 2.000000
  r1174	=	[f32 x   1]	 r1172 * r1173
  r1175	=	[f64 x   1]	 3.141593
  r1176	=	[f32 x   1]	 TRUNC r1175
  r1177	=	[f32 x   1]	 r1174 * r1176
  r1178	=	[f32 x   1]	 20.000000
  r1179	=	[f32 x   1]	 r1177 / r1178
  r1180	=	[f32 x   1]	 r1171 + r1179
 *r1076 	=	[f32 x   1]	 r1180 (4 align)
  r1182	=	[f32 x   1]	 *r1076 (4 align)
  r1183	=	[f32 x   1]	 2.000000
  r1184	=	[f64 x   1]	 3.141593
  r1185	=	[f32 x   1]	 TRUNC r1184
  r1186	=	[f32 x   1]	 r1183 * r1185
  r1187	=	[f32 x   1]	ECALL fmodf(r1182, r1186)
 *r1076 	=	[f32 x   1]	 r1187 (4 align)
  r1189	=	LOCAL 4 (4 align)
  r1190	=	[i32 x   1]	 *r54 (4 align)
  r1191	=	[f32 x   1]	 INT2FLT r1190
  r1192	=	[i32 x   1]	 *r51 (4 align)
  r1193	=	[f32 x   1]	 INT2FLT r1192
  r1194	=	[f32 x   1]	 r1191 / r1193
 *r1189 	=	[f32 x   1]	 r1194 (4 align)
  r1196	=	LOCAL 16 (4 align)
  r1197 = INITIALIZER ...
  r1198	=	[f32 x   1]	 *r1076 (4 align)
  r1199	=	[f32 x   1]	ECALL cosf(r1198)
  r1200	=	[f32 x   1]	 *r1189 (4 align)
  r1201	=	[f32 x   1]	 r1199 * r1200
 *r1196 	=	[f32 x   1]	 r1201 (4 align)
  r1203	=	[f32 x   1]	 *r1076 (4 align)
  r1204	=	[f32 x   1]	ECALL sinf(r1203)
  r1205	=	[f32 x   1]	 NEG r1204
  r1206	=	[ptr]      	 r1196.data[4]
 *r1206 	=	[f32 x   1]	 r1205 (4 align)
  r1208	=	[f32 x   1]	 *r1076 (4 align)
  r1209	=	[f32 x   1]	ECALL sinf(r1208)
  r1210	=	[f32 x   1]	 *r1189 (4 align)
  r1211	=	[f32 x   1]	 r1209 * r1210
  r1212	=	[ptr]      	 r1196.data[8]
 *r1212 	=	[f32 x   1]	 r1211 (4 align)
  r1214	=	[f32 x   1]	 *r1076 (4 align)
  r1215	=	[f32 x   1]	ECALL cosf(r1214)
  r1216	=	[ptr]      	 r1196.data[12]
 *r1216 	=	[f32 x   1]	 r1215 (4 align)
  r1218	=	LOCAL 4 (4 align)
  r1219	=	[i32 x   1]	 0
 *r1218 	=	[i32 x   1]	 r1219 (4 align)
  r1221	=	[i32 x   1]	 *r936 (4 align)
  r1222	=	[i32 x   1]	 *r1218 (4 align)
  r1223	=	[i32 x   1]	 1
  r1224	=	[i32 x   1]	 0
  r1225	=	 &glProgramUniformMatrix2fv
  r1226	=	[ptr]      	 *r1225 (8 align)
  r1227	=	[void]     	VCALL r1226(r1221, r1222, r1223, r1224, r1196)
  r1228	=	[i32 x   1]	 *r935 (4 align)
  r1229	=	 &glBindProgramPipeline
  r1230	=	[ptr]      	 *r1229 (8 align)
  r1231	=	[void]     	VCALL r1230(r1228)
  r1232	=	[i32 x   1]	 *r779 (4 align)
  r1233	=	 &glBindVertexArray
  r1234	=	[ptr]      	 *r1233 (8 align)
  r1235	=	[void]     	VCALL r1234(r1232)
  r1236	=	LOCAL 4 (4 align)
  r1237	=	[i32 x   1]	 0
 *r1236 	=	[i32 x   1]	 r1237 (4 align)
  r1239	=	[i32 x   1]	 *r1236 (4 align)
  r1240	=	[i32 x   1]	 *r867 (4 align)
  r1241	=	 &glBindTextureUnit
  r1242	=	[ptr]      	 *r1241 (8 align)
  r1243	=	[void]     	VCALL r1242(r1239, r1240)
  r1244	=	[i32 x   1]	 4
  r1245	=	[i32 x   1]	 0
  r1246	=	[i32 x   1]	 3
  r1247	=	[void]     	ECALL glDrawArrays(r1244, r1245, r1246)

L188: # r1248 terminates at r1253
  r1249	=	[ptr]      	 *r115 (8 align)
  r1250	=	[i32 x   1]	ECALL SwapBuffers(r1249)
  r1251	=	[i32 x   1]	 0
  r1252	=	[bool]     	 r1250 == r1251
  if (r1252)	L189 else L190

L189: # r1254 terminates at r1257
  r1255	=	"Failed to swap OpenGL buffers!"
  r1256	=	[void]     	CALL FatalError(r1255)

L190: # r1257 terminates at r1258
  goto L191

L187: # r1259 terminates at r1260

L192: # r1260 terminates at r1264
  r1261	=	[i32 x   1]	 *r1052 (4 align)
  r1262	=	[i32 x   1]	 0
  r1263	=	[bool]     	 r1261 != r1262
  if (r1263)	L193 else L194

L193: # r1265 terminates at r1268
  r1266	=	[i32 x   1]	 10
  r1267	=	[void]     	ECALL Sleep(r1266)

L194: # r1268 terminates at r1269

L191: # r1269 terminates at r1270
  goto L173

L174: # r1271 terminates at r1272
  ret		[i32 x   1]	 r0
uaw_CharUpperW():
L0: # r1 terminates at r6
  r2	=	[ptr]      	  PARAM 0
  r3	=	&PARAM 0
  r4	=	[i32 x   1]	 0
  r5	=	[ptr]      	 INT2PTR r4
  ret		[ptr]      	 r5
L1: # r7 terminates at r8
  ret		[ptr]      	 r0
FatalError():
L0: # r1 terminates at r10
  r2	=	[ptr]      	  PARAM 0
  r3	=	&PARAM 0
  r4	=	[i32 x   1]	 0
  r5	=	[ptr]      	 INT2PTR r4
  r6	=	[ptr]      	 *r3 (8 align)
  r7	=	"Error"
  r8	=	[i64 x   1]	 48
  r9	=	[i32 x   1]	ECALL MessageBoxA(r5, r6, r7, r8)

L1: # r10 terminates at r13
  r11	=	[i32 x   1]	 0
  r12	=	[void]     	ECALL ExitProcess(r11)
  ret		[void]     	 r0
DebugCallback():
L0: # r1 terminates at r18
  r2	=	[i32 x   1]	  PARAM 0
  r3	=	[i32 x   1]	  PARAM 1
  r4	=	[i32 x   1]	  PARAM 2
  r5	=	[i32 x   1]	  PARAM 3
  r6	=	[i32 x   1]	  PARAM 4
  r7	=	[ptr]      	  PARAM 5
  r8	=	[ptr]      	  PARAM 6
  r9	=	&PARAM 0
  r10	=	&PARAM 1
  r11	=	&PARAM 2
  r12	=	&PARAM 3
  r13	=	&PARAM 4
  r14	=	&PARAM 5
  r15	=	&PARAM 6
  r16	=	[ptr]      	 *r14 (8 align)
  r17	=	[void]     	ECALL OutputDebugStringA(r16)

L1: # r18 terminates at r21
  r19	=	"
"
  r20	=	[void]     	ECALL OutputDebugStringA(r19)

L2: # r21 terminates at r26
  r22	=	[i32 x   1]	 *r12 (4 align)
  r23	=	[i32 x   1]	 37190
  r24	=	[bool]     	 r22 == r23
  r25	=	[bool]     	 1
  if (r24)	L4 else L3

L3: # r27 terminates at r31
  r28	=	[i32 x   1]	 *r12 (4 align)
  r29	=	[i32 x   1]	 37191
  r30	=	[bool]     	 r28 == r29

L4: # r31 terminates at r33
  r32	=	[bool]     	 PHI L2:r25, L3:r30
  if (r32)	L5 else L6

L5: # r34 terminates at r35

L7: # r35 terminates at r39
  r36	=	[i32 x   1]	ECALL IsDebuggerPresent()
  r37	=	[i32 x   1]	 0
  r38	=	[bool]     	 r36 != r37
  if (r38)	L8 else L9

L8: # r40 terminates at r41

L10: # r41 terminates at r42

L12: # r42 terminates at r48
  r43	=	"OpenGL error - check the callstack in debugger"
  r44	=	[ptr]      	 0
  r45	=	[bool]     	 r43 == r44
  r46	=	[bool]     	 0
  r47	=	[bool]     	 r45 == r46
  if (r47)	L13 else L14

L13: # r49 terminates at r51
 DEBUGBREAK

L14: # r51 terminates at r53
  r52	=	[i32 x   1]	 0
  if (r52)	L10 else L11

L11: # r54 terminates at r55

L9: # r55 terminates at r58
  r56	=	"OpenGL API usage error! Use debugger to examine call stack!"
  r57	=	[void]     	CALL FatalError(r56)

L6: # r58 terminates at r59
  ret		[void]     	 r0
WindowProc():
L0: # r1 terminates at r11
  r2	=	[ptr]      	  PARAM 0
  r3	=	[i32 x   1]	  PARAM 1
  r4	=	[i64 x   1]	  PARAM 2
  r5	=	[i64 x   1]	  PARAM 3
  r6	=	&PARAM 0
  r7	=	&PARAM 1
  r8	=	&PARAM 2
  r9	=	&PARAM 3
  r10	=	[i32 x   1]	 *r7 (4 align)
 SWITCH	[i32 x   1]		r10 (
			2 -> L1,
			default -> L2)

L3: # r12 terminates at r13

L1: # r13 terminates at r16
  r14	=	[i32 x   1]	 0
  r15	=	[i64 x   1]	 SXT r14
  ret		[i64 x   1]	 r15
L4: # r17 terminates at r18

L2: # r18 terminates at r24
  r19	=	[ptr]      	 *r6 (8 align)
  r20	=	[i32 x   1]	 *r7 (4 align)
  r21	=	[i64 x   1]	 *r8 (8 align)
  r22	=	[i64 x   1]	 *r9 (8 align)
  r23	=	[i64 x   1]	ECALL DefWindowProcW(r19, r20, r21, r22)
  ret		[i64 x   1]	 r23
L5: # r25 terminates at r26
  ret		[i64 x   1]	 r0
StringsAreEqual():
L0: # r1 terminates at r12
  r2	=	[ptr]      	  PARAM 0
  r3	=	[ptr]      	  PARAM 1
  r4	=	[i64 x   1]	  PARAM 2
  r5	=	&PARAM 0
  r6	=	&PARAM 1
  r7	=	&PARAM 2
  r8	=	LOCAL 8 (8 align)
  r9	=	[ptr]      	 *r5 (8 align)
  r10	=	[i64 x   1]	ECALL strlen(r9)
 *r8 	=	[i64 x   1]	 r10 (8 align)

L1: # r12 terminates at r13

L2: # r13 terminates at r17
  r14	=	[i64 x   1]	 *r7 (8 align)
  r15	=	[i64 x   1]	 *r8 (8 align)
  r16	=	[bool]     	 r14 != r15
  if (r16)	L3 else L4

L3: # r18 terminates at r20
  r19	=	[i32 x   1]	 0
  ret		[i32 x   1]	 r19
L4: # r21 terminates at r29
  r22	=	[ptr]      	 *r5 (8 align)
  r23	=	[ptr]      	 *r6 (8 align)
  r24	=	[i64 x   1]	 *r7 (8 align)
  r25	=	[i32 x   1]	ECALL memcmp(r22, r23, r24)
  r26	=	[i32 x   1]	 0
  r27	=	[bool]     	 r25 == r26
  r28	=	[i32 x   1]	 ZXT r27
  ret		[i32 x   1]	 r28
L5: # r30 terminates at r31
  ret		[i32 x   1]	 r0
GetWglFunctions():
L0: # r1 terminates at r21
  r2	=	LOCAL 8 (8 align)
  r3	=	[i32 x   1]	 0
  r4	=	"S"
  r5	=	"D"
  r6	=	[i64 x   1]	 0
  r7	=	[i32 x   1]	 2147483648
  r8	=	[i32 x   1]	 2147483648
  r9	=	[i32 x   1]	 2147483648
  r10	=	[i32 x   1]	 2147483648
  r11	=	[i32 x   1]	 0
  r12	=	[ptr]      	 INT2PTR r11
  r13	=	[i32 x   1]	 0
  r14	=	[ptr]      	 INT2PTR r13
  r15	=	[i32 x   1]	 0
  r16	=	[ptr]      	 INT2PTR r15
  r17	=	[i32 x   1]	 0
  r18	=	[ptr]      	 INT2PTR r17
  r19	=	[ptr]      	ECALL CreateWindowExW(r3, r4, r5, r6, r7, r8, r9, r10, r12, r14, r16, r18)
 *r2 	=	[ptr]      	 r19 (8 align)

L1: # r21 terminates at r22

L2: # r22 terminates at r23

L4: # r23 terminates at r26
  r24	=	[ptr]      	 *r2 (8 align)
  r25	=	[bool]     	 0
  if (r24)	L5 else L6

L5: # r27 terminates at r31
  r28	=	"Failed to create dummy window"
  r29	=	[ptr]      	 0
  r30	=	[bool]     	 r28 != r29

L6: # r31 terminates at r35
  r32	=	[bool]     	 PHI L4:r25, L5:r30
  r33	=	[bool]     	 0
  r34	=	[bool]     	 r32 == r33
  if (r34)	L7 else L8

L7: # r36 terminates at r38
 DEBUGBREAK

L8: # r38 terminates at r40
  r39	=	[i32 x   1]	 0
  if (r39)	L2 else L3

L3: # r41 terminates at r46
  r42	=	LOCAL 8 (8 align)
  r43	=	[ptr]      	 *r2 (8 align)
  r44	=	[ptr]      	ECALL GetDC(r43)
 *r42 	=	[ptr]      	 r44 (8 align)

L9: # r46 terminates at r47

L11: # r47 terminates at r50
  r48	=	[ptr]      	 *r42 (8 align)
  r49	=	[bool]     	 0
  if (r48)	L12 else L13

L12: # r51 terminates at r55
  r52	=	"Failed to get device context for dummy window"
  r53	=	[ptr]      	 0
  r54	=	[bool]     	 r52 != r53

L13: # r55 terminates at r59
  r56	=	[bool]     	 PHI L11:r49, L12:r54
  r57	=	[bool]     	 0
  r58	=	[bool]     	 r56 == r57
  if (r58)	L14 else L15

L14: # r60 terminates at r62
 DEBUGBREAK

L15: # r62 terminates at r64
  r63	=	[i32 x   1]	 0
  if (r63)	L9 else L10

L10: # r65 terminates at r94
  r66	=	LOCAL 40 (4 align)
  r67 = INITIALIZER ...
  r68	=	[i64 x   1]	 40
  r69	=	[i16 x   1]	 TRUNC r68
 *r66 	=	[i16 x   1]	 r69 (2 align)
  r71	=	[i32 x   1]	 1
  r72	=	[i16 x   1]	 TRUNC r71
  r73	=	[ptr]      	 r66.data[2]
 *r73 	=	[i16 x   1]	 r72 (2 align)
  r75	=	[i32 x   1]	 4
  r76	=	[i32 x   1]	 32
  r77	=	[i32 x   1]	 36
  r78	=	[i32 x   1]	 1
  r79	=	[i32 x   1]	 37
  r80	=	[ptr]      	 r66.data[4]
 *r80 	=	[i32 x   1]	 r79 (4 align)
  r82	=	[i32 x   1]	 0
  r83	=	[i8  x   1]	 TRUNC r82
  r84	=	[ptr]      	 r66.data[8]
 *r84 	=	[i8  x   1]	 r83 (1 align)
  r86	=	[i32 x   1]	 24
  r87	=	[i8  x   1]	 TRUNC r86
  r88	=	[ptr]      	 r66.data[9]
 *r88 	=	[i8  x   1]	 r87 (1 align)
  r90	=	LOCAL 4 (4 align)
  r91	=	[ptr]      	 *r42 (8 align)
  r92	=	[i32 x   1]	ECALL ChoosePixelFormat(r91, r66)
 *r90 	=	[i32 x   1]	 r92 (4 align)

L16: # r94 terminates at r98
  r95	=	[i32 x   1]	 *r90 (4 align)
  r96	=	[i32 x   1]	 0
  r97	=	[bool]     	 r95 == r96
  if (r97)	L17 else L18

L17: # r99 terminates at r102
  r100	=	"Cannot choose OpenGL pixel format for dummy window!"
  r101	=	[void]     	CALL FatalError(r100)

L18: # r102 terminates at r109
  r103	=	LOCAL 4 (4 align)
  r104	=	[ptr]      	 *r42 (8 align)
  r105	=	[i32 x   1]	 *r90 (4 align)
  r106	=	[i64 x   1]	 40
  r107	=	[i32 x   1]	ECALL DescribePixelFormat(r104, r105, r106, r66)
 *r103 	=	[i32 x   1]	 r107 (4 align)

L19: # r109 terminates at r110

L21: # r110 terminates at r115
  r111	=	[i32 x   1]	 *r103 (4 align)
  r112	=	[i32 x   1]	 0
  r113	=	[bool]     	 r111 != r112
  r114	=	[bool]     	 0
  if (r113)	L22 else L23

L22: # r116 terminates at r120
  r117	=	"Failed to describe OpenGL pixel format"
  r118	=	[ptr]      	 0
  r119	=	[bool]     	 r117 != r118

L23: # r120 terminates at r124
  r121	=	[bool]     	 PHI L21:r114, L22:r119
  r122	=	[bool]     	 0
  r123	=	[bool]     	 r121 == r122
  if (r123)	L24 else L25

L24: # r125 terminates at r127
 DEBUGBREAK

L25: # r127 terminates at r129
  r128	=	[i32 x   1]	 0
  if (r128)	L19 else L20

L20: # r130 terminates at r131

L26: # r131 terminates at r137
  r132	=	[ptr]      	 *r42 (8 align)
  r133	=	[i32 x   1]	 *r90 (4 align)
  r134	=	[i32 x   1]	ECALL SetPixelFormat(r132, r133, r66)
  r135	=	[i32 x   1]	 0
  r136	=	[bool]     	 r134 == r135
  if (r136)	L27 else L28

L27: # r138 terminates at r141
  r139	=	"Cannot set OpenGL pixel format for dummy window!"
  r140	=	[void]     	CALL FatalError(r139)

L28: # r141 terminates at r146
  r142	=	LOCAL 8 (8 align)
  r143	=	[ptr]      	 *r42 (8 align)
  r144	=	[ptr]      	ECALL wglCreateContext(r143)
 *r142 	=	[ptr]      	 r144 (8 align)

L29: # r146 terminates at r147

L31: # r147 terminates at r150
  r148	=	[ptr]      	 *r142 (8 align)
  r149	=	[bool]     	 0
  if (r148)	L32 else L33

L32: # r151 terminates at r155
  r152	=	"Failed to create OpenGL context for dummy window"
  r153	=	[ptr]      	 0
  r154	=	[bool]     	 r152 != r153

L33: # r155 terminates at r159
  r156	=	[bool]     	 PHI L31:r149, L32:r154
  r157	=	[bool]     	 0
  r158	=	[bool]     	 r156 == r157
  if (r158)	L34 else L35

L34: # r160 terminates at r162
 DEBUGBREAK

L35: # r162 terminates at r164
  r163	=	[i32 x   1]	 0
  if (r163)	L29 else L30

L30: # r165 terminates at r170
  r166	=	[ptr]      	 *r42 (8 align)
  r167	=	[ptr]      	 *r142 (8 align)
  r168	=	[i32 x   1]	ECALL wglMakeCurrent(r166, r167)
 *r103 	=	[i32 x   1]	 r168 (4 align)

L36: # r170 terminates at r171

L38: # r171 terminates at r176
  r172	=	[i32 x   1]	 *r103 (4 align)
  r173	=	[i32 x   1]	 0
  r174	=	[bool]     	 r172 != r173
  r175	=	[bool]     	 0
  if (r174)	L39 else L40

L39: # r177 terminates at r181
  r178	=	"Failed to make current OpenGL context for dummy window"
  r179	=	[ptr]      	 0
  r180	=	[bool]     	 r178 != r179

L40: # r181 terminates at r185
  r182	=	[bool]     	 PHI L38:r175, L39:r180
  r183	=	[bool]     	 0
  r184	=	[bool]     	 r182 == r183
  if (r184)	L41 else L42

L41: # r186 terminates at r188
 DEBUGBREAK

L42: # r188 terminates at r190
  r189	=	[i32 x   1]	 0
  if (r189)	L36 else L37

L37: # r191 terminates at r196
  r192	=	LOCAL 8 (8 align)
  r193	=	"wglGetExtensionsStringARB"
  r194	=	[ptr]      	ECALL wglGetProcAddress(r193)
 *r192 	=	[ptr]      	 r194 (8 align)

L43: # r196 terminates at r200
  r197	=	[ptr]      	 *r192 (8 align)
  r198	=	[ptr]      	 0
  r199	=	[bool]     	 r197 == r198
  if (r199)	L44 else L45

L44: # r201 terminates at r204
  r202	=	"OpenGL does not support WGL_ARB_extensions_string extension!"
  r203	=	[void]     	CALL FatalError(r202)

L45: # r204 terminates at r210
  r205	=	LOCAL 8 (8 align)
  r206	=	[ptr]      	 *r42 (8 align)
  r207	=	[ptr]      	 *r192 (8 align)
  r208	=	[ptr]      	VCALL r207(r206)
 *r205 	=	[ptr]      	 r208 (8 align)

L46: # r210 terminates at r211

L48: # r211 terminates at r214
  r212	=	[ptr]      	 *r205 (8 align)
  r213	=	[bool]     	 0
  if (r212)	L49 else L50

L49: # r215 terminates at r219
  r216	=	"Failed to get OpenGL WGL extension string"
  r217	=	[ptr]      	 0
  r218	=	[bool]     	 r216 != r217

L50: # r219 terminates at r223
  r220	=	[bool]     	 PHI L48:r213, L49:r218
  r221	=	[bool]     	 0
  r222	=	[bool]     	 r220 == r221
  if (r222)	L51 else L52

L51: # r224 terminates at r226
 DEBUGBREAK

L52: # r226 terminates at r228
  r227	=	[i32 x   1]	 0
  if (r227)	L46 else L47

L47: # r229 terminates at r233
  r230	=	LOCAL 8 (8 align)
  r231	=	[ptr]      	 *r205 (8 align)
 *r230 	=	[ptr]      	 r231 (8 align)

L54: # r233 terminates at r234
  goto L53

L53: # r235 terminates at r236

L57: # r236 terminates at r237
  goto L56

L56: # r238 terminates at r239

L59: # r239 terminates at r245
  r240	=	[ptr]      	 *r205 (8 align)
  r241	=	[i8  x   1]	 *r240 (1 align)
  r242	=	[i32 x   1]	 SXT r241
  r243	=	[i32 x   1]	 0
  r244	=	[bool]     	 r242 == r243
  if (r244)	L60 else L61

L60: # r246 terminates at r247
  goto L58

L62: # r248 terminates at r249

L61: # r249 terminates at r250

L63: # r250 terminates at r257
  r251	=	[ptr]      	 *r205 (8 align)
  r252	=	[i8  x   1]	 *r251 (1 align)
  r253	=	[i32 x   1]	 SXT r252
  r254	=	[i8  x   1]	 32
  r255	=	[i32 x   1]	 SXT r254
  r256	=	[bool]     	 r253 == r255
  if (r256)	L64 else L65

L64: # r258 terminates at r259
  goto L58

L66: # r260 terminates at r261

L65: # r261 terminates at r266
  r262	=	[ptr]      	 *r205 (8 align)
  r263	=	[ptr]      	 1
  r264	=	[ptr]      	 r262 + r263
 *r205 	=	[ptr]      	 r264 (8 align)
  goto L57

L58: # r267 terminates at r276
  r268	=	LOCAL 8 (8 align)
  r269	=	[ptr]      	 *r205 (8 align)
  r270	=	[ptr]      	 *r230 (8 align)
  r271	=	[i64 x   1]	 PTR2INT r269
  r272	=	[i64 x   1]	 PTR2INT r270
  r273	=	[i64 x   1]	 r271 - r272
  r274	=	[i64 x   1]	 1
 *r268 	=	[i64 x   1]	 r273 (8 align)

L67: # r276 terminates at r283
  r277	=	"WGL_ARB_pixel_format"
  r278	=	[ptr]      	 *r230 (8 align)
  r279	=	[i64 x   1]	 *r268 (8 align)
  r280	=	[i32 x   1]	CALL StringsAreEqual(r277, r278, r279)
  r281	=	[i32 x   1]	 0
  r282	=	[bool]     	 r280 != r281
  if (r282)	L68 else L69

L68: # r284 terminates at r289
  r285	=	 &wglChoosePixelFormatARB
  r286	=	"wglChoosePixelFormatARB"
  r287	=	[ptr]      	ECALL wglGetProcAddress(r286)
 *r285 	=	[ptr]      	 r287 (8 align)
  goto L70

L69: # r290 terminates at r291

L71: # r291 terminates at r298
  r292	=	"WGL_ARB_create_context"
  r293	=	[ptr]      	 *r230 (8 align)
  r294	=	[i64 x   1]	 *r268 (8 align)
  r295	=	[i32 x   1]	CALL StringsAreEqual(r292, r293, r294)
  r296	=	[i32 x   1]	 0
  r297	=	[bool]     	 r295 != r296
  if (r297)	L72 else L73

L72: # r299 terminates at r304
  r300	=	 &wglCreateContextAttribsARB
  r301	=	"wglCreateContextAttribsARB"
  r302	=	[ptr]      	ECALL wglGetProcAddress(r301)
 *r300 	=	[ptr]      	 r302 (8 align)
  goto L74

L73: # r305 terminates at r306

L75: # r306 terminates at r313
  r307	=	"WGL_EXT_swap_control"
  r308	=	[ptr]      	 *r230 (8 align)
  r309	=	[i64 x   1]	 *r268 (8 align)
  r310	=	[i32 x   1]	CALL StringsAreEqual(r307, r308, r309)
  r311	=	[i32 x   1]	 0
  r312	=	[bool]     	 r310 != r311
  if (r312)	L76 else L77

L76: # r314 terminates at r319
  r315	=	 &wglSwapIntervalEXT
  r316	=	"wglSwapIntervalEXT"
  r317	=	[ptr]      	ECALL wglGetProcAddress(r316)
 *r315 	=	[ptr]      	 r317 (8 align)

L77: # r319 terminates at r320

L74: # r320 terminates at r321

L70: # r321 terminates at r322

L78: # r322 terminates at r328
  r323	=	[ptr]      	 *r205 (8 align)
  r324	=	[i8  x   1]	 *r323 (1 align)
  r325	=	[i32 x   1]	 SXT r324
  r326	=	[i32 x   1]	 0
  r327	=	[bool]     	 r325 == r326
  if (r327)	L79 else L80

L79: # r329 terminates at r330
  goto L55

L81: # r331 terminates at r332

L80: # r332 terminates at r339
  r333	=	[ptr]      	 *r205 (8 align)
  r334	=	[ptr]      	 1
  r335	=	[ptr]      	 r333 + r334
 *r205 	=	[ptr]      	 r335 (8 align)
  r337	=	[ptr]      	 *r205 (8 align)
 *r230 	=	[ptr]      	 r337 (8 align)
  goto L54

L55: # r340 terminates at r341

L82: # r341 terminates at r347
  r342	=	 &wglChoosePixelFormatARB
  r343	=	[ptr]      	 *r342 (8 align)
  r344	=	[ptr]      	 0
  r345	=	[bool]     	 r343 == r344
  r346	=	[bool]     	 1
  if (r345)	L86 else L85

L85: # r348 terminates at r353
  r349	=	 &wglCreateContextAttribsARB
  r350	=	[ptr]      	 *r349 (8 align)
  r351	=	[ptr]      	 0
  r352	=	[bool]     	 r350 == r351

L86: # r353 terminates at r356
  r354	=	[bool]     	 PHI L82:r346, L85:r352
  r355	=	[bool]     	 1
  if (r354)	L84 else L83

L83: # r357 terminates at r362
  r358	=	 &wglSwapIntervalEXT
  r359	=	[ptr]      	 *r358 (8 align)
  r360	=	[ptr]      	 0
  r361	=	[bool]     	 r359 == r360

L84: # r362 terminates at r364
  r363	=	[bool]     	 PHI L86:r355, L83:r361
  if (r363)	L87 else L88

L87: # r365 terminates at r368
  r366	=	"OpenGL does not support required WGL extensions for modern context!"
  r367	=	[void]     	CALL FatalError(r366)

L88: # r368 terminates at r381
  r369	=	[i32 x   1]	 0
  r370	=	[ptr]      	 INT2PTR r369
  r371	=	[i32 x   1]	 0
  r372	=	[ptr]      	 INT2PTR r371
  r373	=	[i32 x   1]	ECALL wglMakeCurrent(r370, r372)
  r374	=	[ptr]      	 *r142 (8 align)
  r375	=	[i32 x   1]	ECALL wglDeleteContext(r374)
  r376	=	[ptr]      	 *r2 (8 align)
  r377	=	[ptr]      	 *r42 (8 align)
  r378	=	[i32 x   1]	ECALL ReleaseDC(r376, r377)
  r379	=	[ptr]      	 *r2 (8 align)
  r380	=	[i32 x   1]	ECALL DestroyWindow(r379)
  ret		[void]     	 r0
__static_init():
L0: # r1 terminates at r2
  ret		[void]     	 r0
